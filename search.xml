<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql 索引失效的情况</title>
      <link href="/2019/07/27/mysql-index-invalid/"/>
      <url>/2019/07/27/mysql-index-invalid/</url>
      
        <content type="html"><![CDATA[<p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。数据库索引本质上是一种数据结构(存储结构+算法)，目的是为了加快目标数据检索的速度。当使用关联查询（inner 、left、right  join）等进行查询时候，关联条件都已建立索引，但查看执行计划发现并未走索引，总结下实际开发中，遇到的索引失效的情况。</p><a id="more"></a><p>执行如下的 sql 语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT</span><br><span class="line">t.ticket_id,</span><br><span class="line">t.product_id ,</span><br><span class="line">cp.product_name</span><br><span class="line">FROM</span><br><span class="line">ticket t</span><br><span class="line">LEFT JOIN config_product cp ON t.product_id = cp.product_id</span><br><span class="line">WHERE</span><br><span class="line">t.ticket_id = 1446400;</span><br></pre></td></tr></table></figure><p>发现 config_product 并未用到 product_id 字段的索引，经过分析，索引失效的原因的主要原因有如下几种：</p><ul><li>索引列字段的数据类型不相同</li><li>索引列字段的字符集不相同</li><li>对索引列进行运算，包括(+，-，*，/，! 等) </li><li>数据库中的数据太少也会导致索引失效<ul><li>如果索引列所在的表数据量非常小，比如 10 条以下，索引不会生效，多加几条记录就可以生效</li></ul></li><li>没有查询条件，或者查询条件没有建立索引</li><li>查询条件包含 or</li><li>模糊查询</li><li>组合索引，不是使用第一列索引，索引失效</li></ul><p>遇到的问题是第一种，<code>ticket.product_id</code> 字段的数据类型为 bigint，而 <code>config_product.product_id</code> 字段的数据类型为 varchar，就导致索引失效，将 <code>ticket.product_id</code> 字段的数据类型改为 varchar，索引便生效。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019/07/08 读书记录</title>
      <link href="/2019/07/08/notes-2019-7-8/"/>
      <url>/2019/07/08/notes-2019-7-8/</url>
      
        <content type="html"><![CDATA[<p>“从小我就喜欢闻泥土的味道，也因此其实从小我不怕死，一直觉得死是回家，是入土。我反而觉得生才是问题，人学会站立，是任性地想脱离这土地，因此不断向上攀爬，不断抓取任何理由——欲望、理想、追求。然而，我们终究需要脚踏着黄土。在我看来，生是更激烈的索取，或许太激烈的生活本身就是一种任性。”</p><a id="more"></a><h1 id="皮囊"><a href="#皮囊" class="headerlink" title="皮囊"></a>皮囊</h1><ul><li>那一刻才明白阿太曾经对我说过的一句话，才明白阿太的生活观：我们的生命本来多轻盈，都是被这肉体和各种欲望的污浊给拖住。阿太，我记住了。</li><li>有时候人会做些看上去奇怪的反应，比如，越厌恶、越排斥的人和地方，我们却越容易纠葛于此，越容易耗尽自己所有就为了抵达。</li><li>我才明白，那封信里，我向文展说的“小时候的玩伴真该一起聚聚了”，真是个天真的提议。每个人都已经过上不同的生活，不同的生活让许多人在这个时空里没法相处在共同的状态中，除非等彼此都老了，年迈再次抹去其他，构成我们每个人最重要的标志，或许那时候的聚会才能成真。</li><li>他没有说下去，我或许明白了，他想说的是，在不知道怎么生活的情况下，我会采用的是一种现成的、狭隘的、充满功利而且市侩的逻辑——怎么能尽快挣钱以及怎么能尽量成名，用好听的词汇就是所谓“梦想”和“责任”。</li><li>从小我就喜欢闻泥土的味道，也因此其实从小我不怕死，一直觉得死是回家，是入土。我反而觉得生才是问题，人学会站立，是任性地想脱离这土地，因此不断向上攀爬，不断抓取任何理由——欲望、理想、追求。然而，我们终究需要脚踏着黄土。在我看来，生是更激烈的索取，或许太激烈的生活本身就是一种任性。</li><li>或许只有当一个写作者，彻彻底底地解剖过自我一次，他书写起其他每个肉体，才会足够的尊敬和理解。</li></ul><h1 id="牧羊少年奇幻之旅"><a href="#牧羊少年奇幻之旅" class="headerlink" title="牧羊少年奇幻之旅"></a>牧羊少年奇幻之旅</h1><ul><li>对于该怎样生活，所有人都有固定的观念。但是他们对于自己该怎样生活却一头雾水，就像那个给人解梦、却不会把梦变成现实的老妇人。</li><li>总是以理想的眼光看待世界，以为事情会按理想的方式发展，而不会用现实的眼光看待世界，看不到事情真相。</li><li>害怕遭受痛苦比遭受痛苦本身还要糟糕。</li></ul><h1 id="恶意"><a href="#恶意" class="headerlink" title="恶意"></a>恶意</h1><ul><li>“令他害怕的，并非暴力本身，而是那些讨厌自己的人散发的负面能量。他从来没有想象过，在这世上竟然会有这样的恶意存在。”</li></ul><h1 id="人间失格"><a href="#人间失格" class="headerlink" title="人间失格"></a>人间失格</h1><ul><li>众人都对自己的手艺扬扬自得，都在为人生调味。是选择活在回忆中，还是献身于瞬间？或者——活在对未来的憧憬里，人人不同。但正是这些不同的选择，让人有了愚笨与灵巧之分。”</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apple Watch 使用感受</title>
      <link href="/2019/05/12/yuque/Apple%20Watch%20%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/"/>
      <url>/2019/05/12/yuque/Apple%20Watch%20%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</url>
      
        <content type="html"><![CDATA[<p>Apple 家的产品永远没有性价比可言，去年九月分的时候，首发在狗东入手了国行 Apple Watch 4 蜂窝版，花了人民币 4299，为什么不买港版，当时官网说港版的不支持大陆的eSIM，遂放弃，后面网友验证，其实港版的是支持大陆的eSIM，不然怎么着也可以省好几百，为什么不买 GPS 版本呢，因为恰好深圳恰好是首批开通 esm 的城市，再者像 TESTV 里面测评 AW4 时说的一句话：“因为不联网的 Apple Watch，没有灵魂”，所以咬咬牙入手了蜂窝版本，那到现在，也用了差不多大半年了，一分钱还真是一份货，不得不说，香，真香~</p><a id="more"></a><p>我买Apple Watch 4（后面简称AW4）的主要用途还是用来锻炼用，我平常喜欢跑步，以前跑步都会带上手机去跑步，但是有了 AW4，就可以彻底的拜托手机的束缚。如果要问我最好的跑步体验是什么，那肯定是： AW4+AirPods，二者都是无线化设备，摆脱了线的束缚，让跑步的时候变得更加自在，由于 AW4 的蜂窝功能，可以直接在线收听音乐。我特别不喜欢现在市面上的无线蓝牙耳机，因为现在大多数的蓝牙耳机是入耳式了，入耳式耳机对我来说，感觉有一种听诊器效应，戴着特别的不自在，而 AirPods 这种半入耳式耳机，耳朵没有压迫感，完全感受不到他的存在，我之前还担心 AirPods 会被汗水浸坏，毕竟它不防水，但是经过这大半年的使用，其实我的想法是多余的，我觉得 AirPods 应该是有轻度的防水防汗，只是 Apple 没有在产品介绍页说明。</p><p>AW4 我使用场景如下几个：</p><ul><li>跑步的时候，完全脱离手机，打开手表上的 keep app，记录我跑步过程中的心率，里程，GPS 等等一系列的数据，戴上AirPods，打开手表的音乐，边跑边听音乐，跑完后，如果比较口渴，想买瓶水，打开手表上的支付宝，进行离线扫描支付，回到家，手表上的跑步数据就会自动同步到手机 keep 软件；</li><li>提醒按时喝水，WaterMinder 大概每隔一段时间，手表就会稍微震动一下，提醒喝水，比如喝了 250ml 水，直接点击手表进行记录；</li><li>站立提醒，每次久坐超过一个小时，就会提醒你站立走动几下；</li><li>手机没电的情况下，可以用手表进行接听和拨打电话；</li><li>乘坐公交和地铁，现在深圳的公交和地铁已经全线支持银联支付，AW4 开通 Apple Pay，就可以直接“叮”一下，乘坐公交和地铁了；</li><li>自动解锁 Mac，靠近 mac 的时候，手腕轻轻震动一下，mac 自动解锁；</li><li>还有一些其他的比如脱离手机的情况下，解锁摩拜单车，回复微信，回复短信，睡眠质量记录等等；</li></ul><p>AW4 唯一不太满意的可能就是续航了，官方宣称是 18 个小时的续航时间，但是从我实际的使用来看，如果当天没有进行体能锻炼，一天下来，差不多还会剩余 百分之60 以上的电量，用两天是没有的问题，但是如果当天有进行一次体能锻炼，那就撑不到第二天了，所以每天晚上都要取下来给它充电，其实大部分也不会带着手表睡觉吧？</p><p>那总的来说，AW4 这个手表，我个人还是比较满意的，没有它也不会觉得怎么样，但是买了它，生活会可能稍微幸福那么一些许，如果你觉得这东西值，那就买吧！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apple Watch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 年终总结</title>
      <link href="/2019/01/08/2018-summary/"/>
      <url>/2019/01/08/2018-summary/</url>
      
        <content type="html"><![CDATA[<p>凡是过往，皆为序章，一年又一年的流水账又来了，发现距离我上次发博已经过去了 3 个多月，可见我越来越懒了。每年的年终总结也是打脸总结，先来看看去年的立的那些 flag 完成了哪些：<br><a id="more"></a></p><ul><li style="list-style: none"><input type="checkbox" checked> 薪资涨涨涨。<strong>涨是涨了一点，但是依旧入不敷出，物价上涨，生活艰难。</strong></li><li style="list-style: none"><input type="checkbox" checked> 跑一次半马或者全马。<strong>2018 年 12 月 16 号，深圳国际马拉松比赛日，完成人生的第一个半马。</strong></li><li style="list-style: none"><input type="checkbox" checked> 坚持运动，希望年底能看到腹肌。<strong>坚持运动倒是做到了，全年跑步总里程 1180 公里，跑步、游泳、骑行、徒步各种玩，可腹肌依旧只有一块。</strong></li><li style="list-style: none"><input type="checkbox"> <del>亲自 DIY 一台主机。</del> <strong>已过了搞机的年纪，热情已褪去。</strong></li><li style="list-style: none"><input type="checkbox"> <del>github 开源项目 star 数量突破100。</del> <strong>天天加班，咸鱼一条，github 已弃更好久，是时候捡起来了。</strong></li><li style="list-style: none"><input type="checkbox" checked> 看 5 本除技术以外的书籍。<strong>为了不让 kindle 吃灰，今年倒是看了些书，《白夜行》、《硅谷钢铁侠》、《黑铁时代》、《解忧杂货店》、《三国的那些人那些事：霸主篇》、《三体》三部曲、《追风筝的人》，正在看《嫌疑人x的献身》，强烈推荐《三体》，中国硬核科幻。</strong></li><li style="list-style: none"><input type="checkbox" checked> 参加一次公益活动。<strong>将自己不穿的衣服捐献给了白鲸鱼公益平台。</strong></li><li style="list-style: none"><input type="checkbox" checked> 入手期待了两年的 Smartisan T3。<strong>依旧没有等来 T3，却迈入了苹果神教，apple watch 真香。</strong></li></ul><p>2018 年，是自我纠正的一年，纠正了很多东西，纠正了我不喜欢看书的毛病，可以静下心来思考人生，纠正了我的运动习惯，不在乱跑一通，纠正了我的饮食规律，戒掉高热量食物，养成了看食品标签的习惯等等，当坚持变为习惯，这也算是一种小成功。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>生活上，这是我坚持运动的第二年，两年前我还是一个 180 多斤的胖子，但是两年过去了，我终于甩掉了胖子这个标签，真的不得感叹运动带给人的变化，体型变好看了，人也自信了。18 年 5 月份，在朋友的邀请下，加入了深圳最年轻的跑团<code>KISS 深圳跑团</code>，从此运动不在孤独，同时也真切的感受到，这世界比你自律的人多了去了，真是应了 keep 的那句宣传语：自律给我自由！12月16日，完成了人生的第一个半马，用时 2 小时 4 分钟，原来，我也可以跑马拉松，19年，争取跑个全马。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作上，加入互联网企业，实实在在的感受到了快速上线的紧迫感，同时也接触到了一些新的技术，容器，微信开发，大数据，分布式等等。作为一名开发者，避免不了加班，曾去想平衡工作和生活，但是最终还是失败了。但是后来也想通了：照顾好你自己，仔细选择你的关系圈，尽可能多的活在当下，你会发现你的生活不需要去“平衡什么”，因为无论你在做什么，你都会感到快乐和满足。</p><h2 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h2><p>情感上，不想讲太多，有趣的灵魂那么多，总会找到一个适合的人。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>今年放弃了立 flag，没有最终结果做支撑的 flag，一吹即倒。不如少些当下的心安，多些长期的充实。最后，用米兰·昆德拉 《生命中不能承受之轻》 这段话，送给新一年的自己：</p><blockquote class="blockquote-center"><p>从现在起，我开始谨慎地选择我的生活，我不再轻易让自己迷失在各种诱惑里。我心中已经听到来自远方的呼唤，再不需要回过头去关心身后的种种是非与议论。我已无暇顾及过去，我要向前走。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号前后端分离授权方案</title>
      <link href="/2018/09/16/wechat-mp-auth/"/>
      <url>/2018/09/16/wechat-mp-auth/</url>
      
        <content type="html"><![CDATA[<p>最近在重构公司的微信公众号项目，需要将其重构现在流行的微服务架构，使其前后端分离，分开独立部署，其中需要解决的一个需求就是基于公众号端的登录方案。前端采用 vue 框架，用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑，中间就涉及到了前后端分离情况下的微信授权，微信授权涉及到签名和 token 机制，都需要后端与前端协调好，下面就针对此问题的实践方案做一个总结。</p><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>下面是一个简单的流程图：</p><p><img src="http://image.leeyom.top/blog/wechat-mp-oauth.jpg" title="微信前后端分离授权方案"></p><p>步骤如下：</p><ol><li><p>微信公众号的菜单 url，微信有提供接口，可以通过后台接口生成，生成的 url 如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx55dffe0ea4c7c68a&amp;</span><br><span class="line">redirect_uri=https%3A%2F%2Fdev.leeyom.top%2Fhome.html%3Fts%3D1536829668153&amp;</span><br><span class="line">response_type=code&amp;scope=snsapi_userinfo&amp;state=5&amp;connect_redirect=1#wechat_redirect</span><br></pre></td></tr></table></figure><ul><li><code>redirect_uri</code>：回调页面，也就是我们自己的客户端页面，这里我们统一的跳转到 home.html 页面。</li><li><code>scope</code>：应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过 openid 拿到昵称、性别、所在地。并且，即使在未关注的情况下，只要用户授权，也能获取其信息，如果已关注，那就是静默授权，也就是说不会弹出授权框）。</li><li><code>state</code>：重定向后会带上 state 参数，这个参数后端跟前端约定好，比如 1 跳转到订单页面，2 跳转到注册页面等等，前端根据此参数进行路由。</li></ul></li><li>微信回调到指定的页面后，会在 url 的后面携带 code 参数，前端通过这个 code 码调用后端接口，去换取用户的信息（openid、昵称、地址等等）和 token 值，这个 code 码是一次性的，使用一次后就失效，token 值主要是用来保证后端接口安全，采用 <a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener">jwt</a> 处理，前端后期发起的所有请求，header 里都要带上此 token 值，。</li><li>拿到用户的信息（openid），判断用户是否绑定，如果已经绑定，根据 state，跳转到指定的页面界面，若未绑定，则跳转到绑定界面。</li><li>绑定成功，后端返回新的用户信息（userInfo）和 token 值，前端同时更新用户信息和 token 值到 localStorage 里，若绑定失败，则提示用户重新进入，之所以会绑定失败，可能是 token 失效，那就需要用户重新进入，去拿用户的 openid。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>会存在两次跳转，用户点击菜单后，首先会跳转到微信的服务器，然后再跳转到我们的业务页面。</li><li>state 需要前后端严格约定好，否则就会出现页面路由出错。</li><li>微信公众号每次新加了菜单，都需要后端手动调用创建菜单的接口。</li><li>由于微信内置浏览器不支持 session 和 cookie，也就是说，每次请求，jsessionid 都是不一样，那么后端 <code>request.getSession().getAttribute(&quot;xxx&quot;)</code> 是无法获取 session 中的值。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://segmentfault.com/a/1190000010753247" target="_blank" rel="noopener">Vue微信公众号开发踩坑记录</a></li><li><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">微信网页授权</a></li><li><a href="http://www.youmeek.com/jwt/" target="_blank" rel="noopener">优化单点登录流程的好东西：JWT 介绍</a></li><li><a href="https://github.com/Wechat-Group/weixin-java-tools" target="_blank" rel="noopener">全能微信Java开发工具包</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cluster 故障转移机制浅析</title>
      <link href="/2018/05/09/redis-failover/"/>
      <url>/2018/05/09/redis-failover/</url>
      
        <content type="html"><![CDATA[<p>我们知道在单机模式下，单机模式就是指 Redis 主节点以单个节点的形式存在，这个主节点可读可写，从节点只读，通常单机模式为“1主 N 备”的结构，单机模式下要实现故障转移需要“哨兵” Sentinel 辅助，由一个或者多个 Sentinel 实例组成的系统可以监视 Redis 主节点及其从节点，实现故障转移。而 Redis Cluster 集群自身实现了高可用，并不需要借助哨兵，这完全是一个自治的过程，接下来就它的故障转移机制做一个简单的浅析。</p><a id="more"></a><h1 id="故障发现"><a href="#故障发现" class="headerlink" title="故障发现"></a>故障发现</h1><p>故障发现通常包含两个环节：主观下线（pfail）和客观下线（fail）。</p><h2 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h2><p>简单理解为：指某个节点认为另一个节点不可用，即下线状态，这个状态并不是最终的故障判定，只能代表一个节点的意见，可能存在误判情况。深入一点理解可以这么说：集群中每个节点都会定期向其他节点发送 ping 消息，接收节点回复 pong 消息作为响应。如果在 <code>cluster-node-timeout</code> 时间内通信一直失败，则发送节点会认为接收节点存在故障，把接收节点标记为主观下线（pfail）状态。具体的流程如下：</p><ol><li>节点 a 发送 ping 消息给节点 b，如果通信正常将接收到 pong 消息，节点 a 更新最近一次与节点 b 的通信时间。</li><li>如果节点 a 与节点 b 通信出现问题则断开连接，下次会进行重连。如 果一直通信失败，则节点 a 记录的与节点 b 最后通信时间将无法更新。</li><li>节点 a 内的定时任务检测到与节点 b 最后通信时间超高 <code>cluster-node-timeout</code> 时，更新本地对节点 b 的状态为主观下线（pfail）。</li></ol><p>当 <code>cluster-note-timeout</code> 时间内某节点无法与另一 个节点顺利完成 ping 消息通信时，则将该节点标记为主观下线状态。主观下线的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时任务,默认每秒执行10次</span></span><br><span class="line"><span class="function">def <span class="title">clusterCron</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">  <span class="comment">// ... 忽略其他代码</span></span></span><br><span class="line"><span class="function">  <span class="title">for</span><span class="params">(node in server.cluster.nodes)</span>:</span></span><br><span class="line"><span class="function">    <span class="comment">// 忽略自身节点比较</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(node.flags == CLUSTER_NODE_MYSELF)</span>:</span></span><br><span class="line"><span class="function">      <span class="keyword">continue</span></span>;</span><br><span class="line">    <span class="comment">// 系统当前时间</span></span><br><span class="line">    <span class="keyword">long</span> now = mstime();</span><br><span class="line">    <span class="comment">// 自身节点最后一次与该节点PING通信的时间差</span></span><br><span class="line">    <span class="keyword">long</span> delay = now - node.ping_sent;</span><br><span class="line">    <span class="comment">// 如果通信时间差超过 cluster_node_timeout，将该节点标记为PFAIL（主观下线）</span></span><br><span class="line">    <span class="keyword">if</span> (delay &gt; server.cluster_node_timeout) :</span><br><span class="line">      node.flags = CLUSTER_NODE_PFAIL;</span><br></pre></td></tr></table></figure><p>但是主观下线并不能判定一个节点是否真正的出现故障，比方说，节点 6379 与 6385 通信中断，导致 6379 判断 6385 为主观下线状态，但是 6380 与 6385 节点之间通信正常，这种情况不能判定节点 6385 发生故障。那怎样才能真正的判定一个节点是否故障呢？那这就要求多个节点协作完成故障发现了，这个过程叫客观下线。</p><h2 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h2><p>当某个节点判断另外一个节点主观下线后，相应的节点状态会跟随消息在集群内传播。ping/pong 消息的消息体会携带集群 1/10 的其他节点状态数据， 当接受节点发现消息体中含有主观下线的节点状态时，会在本地找到故障节点的 ClusterNode 结构，保存到下线报告链表中。通过 Gossip 消息传播，集群内节点不断收集到故障节点的下线报告。当 <strong>半数以上持有槽的主节点</strong> 都标记某个节点是主观下线时，就会触发客观下线。大致的流程如下：</p><ol><li>当消息体内含有其他节点的 pfail 状态会判断发送节点的状态，如果发送节点是主节点则对报告的 pfail 状态处理，如果发送节点是从节点则忽略。</li><li>找到 pfail 对应的节点结构，更新 clusterNode 内部下线报告链表。</li><li>根据更新后的下线报告链表告尝试进行客观下线。</li></ol><p>那对于上面的流程还要细分两个点，就是 <strong>维护下线报告链表</strong> 和 <strong>尝试客观下线</strong>。</p><h3 id="维护下线报告链表"><a href="#维护下线报告链表" class="headerlink" title="维护下线报告链表"></a>维护下线报告链表</h3><p>每个节点 ClusterNode 结构中都会存在一个下线链表结构，保存了其他主节点针对当前节点的下线报告，当接收到 pfail 状态时，会维护对应节点的下线上报链表，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">clusterNodeAddFailureReport</span><span class="params">(clusterNode failNode, clusterNode senderNode)</span> :</span></span><br><span class="line"><span class="function">  <span class="comment">// 获取故障节点的下线报告链表</span></span></span><br><span class="line"><span class="function">  list report_list </span>= failNode.fail_reports;</span><br><span class="line">  <span class="comment">// 查找发送节点的下线报告是否存在</span></span><br><span class="line">  <span class="keyword">for</span>(clusterNodeFailReport report : report_list):</span><br><span class="line">    <span class="comment">// 存在发送节点的下线报告上报</span></span><br><span class="line">    <span class="keyword">if</span>(senderNode == report.node):</span><br><span class="line">      <span class="comment">// 更新下线报告时间</span></span><br><span class="line">      report.time = now();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果下线报告不存在,插入新的下线报告</span></span><br><span class="line">    report_list.add(<span class="keyword">new</span> clusterNodeFailReport(senderNode,now()));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>每个下线报告都存在有效期，有效期为 <code>cluster-node-time*2</code>，每次在尝试触发客观下线时，都会检测下线报告是否过期，对于过期的下线报告将被删除。如果在 <code>cluster-node-time*2</code> 的时间内该下线报告没有得到更新则过期并删除，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">clusterNodeCleanupFailureReports</span><span class="params">(clusterNode node)</span> :</span></span><br><span class="line"><span class="function">  list report_list </span>= node.fail_reports;</span><br><span class="line">  <span class="keyword">long</span> maxtime = server.cluster_node_timeout * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">long</span> now = now();</span><br><span class="line">  <span class="keyword">for</span>(clusterNodeFailReport report : report_list):</span><br><span class="line">    <span class="comment">// 如果最后上报过期时间大于cluster_node_timeout * 2则删除</span></span><br><span class="line">    <span class="keyword">if</span>(now - report.time &gt; maxtime):</span><br><span class="line">      report_list.del(report);</span><br></pre></td></tr></table></figure><p>这样做的目的是防止故障误报，例如节点 A 在上一小时报告节点 B 主观下线，但是之后又恢复正常。现在又有其他节点上报节点 B 主观下线，根据实际情况之前的属于误报不能被使用。</p><h3 id="尝试客观下线"><a href="#尝试客观下线" class="headerlink" title="尝试客观下线"></a>尝试客观下线</h3><p>集群中的节点每次接收到其他节点的 pfail 状态，都会尝试触发客观下线，流程如下：</p><ul><li>首先统计有效的下线报告数量，如果小于集群内持有槽的主节点总数的一半则退出。</li><li>当下线报告大于槽主节点数量一半时，标记对应故障节点为客观下线状态。</li><li>向集群广播一条 fail 消息，通知所有的节点将故障节点标记为客观下线，fail 消息的消息体只包含故障节点的 ID。<ul><li>通知集群内所有的节点标记故障节点为客观下线状态并立刻生效。</li><li>通知故障节点的从节点触发故障转移流程。</li></ul></li></ul><p>整个流程的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">markNodeAsFailingIfNeeded</span><span class="params">(clusterNode failNode)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取集群持有槽的节点数量</span></span><br><span class="line">  <span class="keyword">int</span> slotNodeSize = getSlotNodeSize();</span><br><span class="line">  <span class="comment">// 主观下线节点数必须超过槽节点数量的一半</span></span><br><span class="line">  <span class="keyword">int</span> needed_quorum = (slotNodeSize / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 统计failNode节点有效的下线报告数量（不包括当前节点）</span></span><br><span class="line">  <span class="keyword">int</span> failures = clusterNodeFailureReportsCount(failNode);</span><br><span class="line">  <span class="comment">// 如果当前节点是主节点，将当前节点计累加到failures</span></span><br><span class="line">  <span class="keyword">if</span> (nodeIsMaster(myself)):</span><br><span class="line">    failures++;</span><br><span class="line">    <span class="comment">// 下线报告数量不足槽节点的一半退出</span></span><br><span class="line">  <span class="keyword">if</span> (failures &lt; needed_quorum):</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 将改节点标记为客观下线状态(fail)</span></span><br><span class="line">  failNode.flags = REDIS_NODE_FAIL;</span><br><span class="line">  <span class="comment">// 更新客观下线的时间</span></span><br><span class="line">  failNode.fail_time = mstime();</span><br><span class="line">  <span class="comment">// 如果当前节点为主节点,向集群广播对应节点的fail消息</span></span><br><span class="line">  <span class="keyword">if</span> (nodeIsMaster(myself))</span><br><span class="line">    clusterSendFail(failNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h1><p>故障节点变为客观下线后，如果下线节点是持有槽的主节点则需要在它 的从节点中选出一个替换它，从而保证集群的高可用。下线主节点的所有从 节点承担故障恢复的义务，当从节点通过内部定时任务发现自身复制的主节 点进入客观下线时，将会触发故障恢复流程：</p><ul><li><strong>资格检查</strong>：<ul><li>每个从节点都要检查最后与主节点断线时间，判断是否有资格替换故障的主节点。如果从节点与主节点断线时间超过 <code>cluster-node-time*cluster-slave-validity-factor</code>，则当前从节点不具备故障转移资格。</li><li>参数 <code>cluster-slave-validity-factor</code>用于从节点的有效因子，默认为 10。</li></ul></li><li><p><strong>准备选举时间</strong>:</p><ul><li>当从节点符合故障转移资格后，更新触发故障选举的时间，只有到达该时间后才能执行后续流程。</li><li>复制偏移量越大说明从节点延迟越低，那么它应该具有更高的优先级来替换故障主节点。</li><li>使用之上的优先级排名，更新选举触发时间，触发时间越低的从从节点，优先发起选举操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">updateFailoverTime</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">  <span class="comment">// 默认触发选举时间：发现客观下线后一秒内执行。</span></span></span><br><span class="line"><span class="function">  server.cluster.failover_auth_time </span>= now() + <span class="number">500</span> + random() % <span class="number">500</span>;</span><br><span class="line">  <span class="comment">// 获取当前从节点排名，偏移量越大，排名越靠前，数值越小</span></span><br><span class="line">  <span class="keyword">int</span> rank = clusterGetSlaveRank();</span><br><span class="line">  <span class="keyword">long</span> added_delay = rank * <span class="number">1000</span>;</span><br><span class="line">  <span class="comment">// 使用added_delay时间累加到failover_auth_time中</span></span><br><span class="line">  server.cluster.failover_auth_time += added_delay;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>发起选举</strong>：</p><ul><li>当从节点定时任务检测到达故障选举时间（failover_auth_time）到达后，发起选举流程如下：<ul><li>更新配置纪元<ul><li>配置纪元是一个只增不减的整数，每个主节点自身维护一个配置纪元 （clusterNode.configEpoch）标示当前主节点的版本，所有主节点的配置纪元都不相等，从节点会复制主节点的配置纪元。</li></ul></li><li>广播选举消息<ul><li>在集群内广播选举消息（FAILOVER_AUTH_REQUEST），并记录已发送过消息的状态，保证该从节点在一个配置纪元内只能发起一次选举。</li><li>请求所有收到这条消息并且具有投票权的主节点给自己投票。</li></ul></li></ul></li></ul></li><li><strong>选举投票</strong>：<ul><li>只有持有槽的主节点才会处理故障选举消息，因为每个持有槽的节点在一个配置纪元内都有唯一的一张选票，当接到第一个请求投票的从节点消息时回复 <code>FAILOVER_AUTH_ACK</code> 消息作为投票，之后相同配置纪元内其他从节点的选举消息将忽略。</li><li>如集群内有 N 个持有槽的主节 点代表有 N 张选票。由于在每个配置纪元内持有槽的主节点只能投票给一个从节点，因此只能有一个从节点获得 N/2+1 的选票，保证能够找出唯一的从节点。</li><li>当从节点收集到 N/2+1 个持有槽的主节点投票时，从节点可以执行替换故障节点操作。</li><li>当然也有存在投票作废的情况：<ul><li>每个配置纪元代表了一次选举周期，如果在开始投票之后的 <code>cluster-node-timeout*2</code> 时间内从节点没有获取足够数量的投票，则本次选举作废。从节点对配置纪元自增并发起下一轮投票，直到选举成功为止。</li></ul></li><li>还需要知道一个点：<ul><li>故障主节点也算在投票数内，假设集群内节点规模是3主3从，其中有 2 个主节点部署在一台机器上，当这台机器宕机时，由于从节点无法收集到 3/2+1 个主节点选票将导致故障转移失败。</li><li>因此部署集群时所有主节点最少需要部署在3台物理机上才能避免单点问题。</li></ul></li></ul></li><li><strong>替换主节点</strong>：<ul><li>当从节点收集到足够的选票之后，触发替换主节点操作：<ul><li>当前从节点取消复制变为主节点。</li><li>执行 clusterDelSlot 操作撤销故障主节点负责的槽，并执行 clusterAddSlot 把这些槽委派给自己。</li><li>向集群广播自己的 pong 消息，通知集群内所有的节点当前从节点变为主节点并接管了故障主节点的槽信息。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关闭朋友圈的伪思考</title>
      <link href="/2018/05/05/close-fcircle/"/>
      <url>/2018/05/05/close-fcircle/</url>
      
        <content type="html"><![CDATA[<p>这个想法萌生于某个晚上，手机在黑暗中闪着弱光，好像肌肉般记忆一般，拿起手机习惯性打开朋友圈，然后开始刷新，然后再次陷入茫然，开始思考到朋友圈存在的哲学问题。我每天在关注什么？朋友们关注的是什么？他们关注的我关注吗？</p><a id="more"></a><p>后来，我总结了下，朋友圈的内容如下：</p><ul><li>朋友们的生活<blockquote><p>他们分享的自拍，食物，聚会，旅游，工作，小孩，喜怒哀乐。</p></blockquote></li><li>朋友们的转发<blockquote><p>他们转发的文章，音乐，鸡汤，养生。</p></blockquote></li><li>朋友们的广告<blockquote><p>他们发布的微商广告，促销活动，团购打折，海外代购。</p></blockquote></li></ul><p>其实占大头的肯定是朋友们的生活了，那真正我们关注的人有哪些呢？其实我们真正关注的人，可能也就是我们自己的家人和几个真正的朋友。可能将朋友约出来面对面交流，再或者一句微信语音问候，也要比在朋友圈的一句评论，一个点赞可能要来的更加实在。而且如果真相关注一个人，你肯定会主动找到她的头像，去查看她的相册，看她最近在忙些啥。</p><p>可能人骨子里都有一种窥探欲，我们都喜欢关注他人过的怎么样，而忽略自己过的怎么样。当然我们也有一种渴望被别人关注的欲望，比如你发的朋友圈，你希望更多的人帮你点赞和评论。但是这些东西更多的是让人心累，你发个东西没人理，难过，理的人太多，又疲于应付，然后选择这条内容，删掉。</p><p>有句话说的很好：<strong>你的生活，并没有多少人真正关心，别人的生活，你也并不会真正关心</strong>。的确如此，你真正关心的人只有那么几个，那么真正关心你的，也并不多。 所以手机嘛，就应该做回它本来的样子，能够和朋友保持联系就好，把人搞的焦虑浮躁，就没啥意思了。关注一下身边的人和事，可能比关注朋友圈来的更值。</p><p>感觉在关闭朋友圈的这段时间，总觉得会少些什么，但是慢慢的，这种感觉也就慢慢消失了。这时候，会发现，有更多的时间好好看几本书，好好静下来思考，好好听几首音乐，其实生活还是那样，依旧没有变。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 朋友圈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cluster 集群搭建和部署</title>
      <link href="/2018/04/28/redis-cluster/"/>
      <url>/2018/04/28/redis-cluster/</url>
      
        <content type="html"><![CDATA[<p>Redis Cluster 是 Redis 的分布式解决方案，在 3.0 版本正式推出，有效地解决了 Redis 分布式方面的需求。当遇到单机内存、并发、流量等瓶颈时，可以采用 Cluster 架构方案达到负载均衡的目的。之前，Redis 分布式方案一般客户端分区和代理，但是这些方案都有部署复杂度、性能损耗、无法高可用等等缺陷。Redis Cluster 它非常优雅地解决了 Redis 集群方面的问题，因此理解应用好 Redis Cluster 将极大地解放我们使用分布式 Redis 的工作量，同时它也是学习分布式存储的绝佳案例。</p><a id="more"></a><p>Redis 集群一般由多个节点组成，节点数量至少为 6 个才能保证组成完整高可用的集群。作为举例，本文将搭建一个 6（3主3从）个节点的集群，主备关系如下图所示，其中 M 代码 Master 节点，S 代表 Slave 节点，A-M 和 A-S 为一对主备节点，麻雀虽小，五脏俱全。先手动搭建，然后再尝试用 Redis 集群管理工具 redis-trib 搭建，这样就能更加理解 Redis Cluster 的<a href="http://www.leeyom.top/2018/04/28/dis-storage/">工作原理</a>。</p><p><img src="http://image.leeyom.top/20180427152481315320882.png" title="示意图"></p><h1 id="准备节点"><a href="#准备节点" class="headerlink" title="准备节点"></a>准备节点</h1><p>建议为集群内所有节点统一目录，一般划分三个目录：conf、 data、log，分别存放配置、数据和日志相关文件。把 6 个节点配置统一放在 conf 目录下，在解压文件夹 redis-4.0.9 中有一个 Redis 配置文件 redis.conf，其中一些默认的配置项需要修改（配置项较多，本文仅为举例，修改一些必要的配置）。以下仅以 6379 端口为例进行配置，6380，6381 等端口配置操作类似。配置文件命名规则 <code>redis-{port}.conf</code>，将修改后的配置文件分别放入 conf 文件夹下面，核心要修改的配置项如下：</p><table><thead><tr><th style="text-align:center">配置项名称</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>port 6379</code></td><td style="text-align:center">指定 Reidis 监听端口</td></tr><tr><td style="text-align:center"><code>bind 127.0.0.1</code></td><td style="text-align:center">默认绑定主机地址，本文只有一台机器，故采用默认配置</td></tr><tr><td style="text-align:center"><code>logfile &quot;&quot;</code></td><td style="text-align:center">日志名称，本文设置为：<code>logfile &quot;/usr/local/redis-cluster/log/{port}.log&quot;</code></td></tr><tr><td style="text-align:center"><code>dbfilename dump.rdb</code></td><td style="text-align:center">本地数据库持久化文件名，本文设置为：<code>dbfilename dump-{port}.rdb</code></td></tr><tr><td style="text-align:center"><code>dir ./</code></td><td style="text-align:center">本地数据库持久化文件存放路径，本文设置为：<code>dir /usr/local/redis-cluster/data/</code></td></tr><tr><td style="text-align:center"><code>pidfile /var/run/redis_6379.pid</code></td><td style="text-align:center">Redis 守护进程 pid，本文设置为：<code>pidfile /var/run/redis_{port}.pid</code></td></tr><tr><td style="text-align:center"><code>cluster-enabled yes</code></td><td style="text-align:center">将 Redis 配置以集群模式启动</td></tr><tr><td style="text-align:center"><code>cluster-config-file node-6379.conf</code></td><td style="text-align:center">集群模式下自动生成的集群配置文件，采用 <code>node-{port}.conf</code> 格式定义</td></tr><tr><td style="text-align:center"><code>cluster-node-timeout 15000</code></td><td style="text-align:center">节点超时时间，单位毫秒</td></tr></tbody></table><p><a href="http://www.leeyom.top/2018/04/25/redis-sentinel/#%E5%87%86%E5%A4%87">准备</a>好后，启动所有的节点，一个一个启动有点麻烦，创建一个启动脚本和停止脚本，批量拉起和停止 redis 服务，脚本内容如下：</p><ul><li><p>启动脚本，start.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/local/redis-cluster/conf/redis-6379.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-cluster/conf/redis-6380.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-cluster/conf/redis-6381.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-cluster/conf/redis-6382.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-cluster/conf/redis-6383.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-cluster/conf/redis-6384.conf &amp;</span><br></pre></td></tr></table></figure></li><li><p>停止脚本，stop.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis-server | grep -v grep | awk &apos;&#123;print $2&#125;&apos; | xargs kill -9</span><br></pre></td></tr></table></figure></li></ul><p>执行启动脚本 start.sh ，查看 redis-server 进程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-redis-cluster redis-cluster]# ps -ef|grep redis-server</span><br><span class="line">root     32181     1  0 17:50 ?        00:00:00 redis-server 127.0.0.1:6379 [cluster]</span><br><span class="line">root     32182     1  0 17:50 ?        00:00:00 redis-server 127.0.0.1:6382 [cluster]</span><br><span class="line">root     32183     1  0 17:50 ?        00:00:00 redis-server 127.0.0.1:6380 [cluster]</span><br><span class="line">root     32184     1  0 17:50 ?        00:00:00 redis-server 127.0.0.1:6383 [cluster]</span><br><span class="line">root     32185     1  0 17:50 ?        00:00:00 redis-server 127.0.0.1:6384 [cluster]</span><br><span class="line">root     32186     1  0 17:50 ?        00:00:00 redis-server 127.0.0.1:6381 [cluster]</span><br></pre></td></tr></table></figure><p>如节点 6379 首次启动后生成集群配置 nodes-6379.conf 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">541c76599b2e872b91babdabc9a6bd22f6e8b16d :0@0 myself,master - 0 0 0 connected</span><br><span class="line">rs currentEpoch 0 lastVoteEpoch 0</span><br></pre></td></tr></table></figure><p>文件内容记录了集群初始状态，这里最重要的是节点 ID，它是一个 40 位 16 进制字符串，用于唯一标识集群内一个节点，之后很多集群操作都要借助于节点 ID 来完成。需要注意是，节点 ID 不同于运行 ID 。节点 ID 在集群初始化时只创建一次，节点重启时会加载集群配置文件进行重用，而 Redis 的运行 ID 每次重启都会变化。</p><p>在节点 6380 执行 <code>cluster nodes</code> 命令获取集群节点状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-redis-cluster data]# redis-cli -h 127.0.0.1 -p 6380</span><br><span class="line">127.0.0.1:6380&gt; cluster nodes</span><br><span class="line">4bc590060dc0c987e84dbb7e155da37df74a4026 :6380@16380 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><p>但是目前它只能识别自己，下面通过节点握手让 6 个节点彼此建立联系从而组成一个集群。</p><h1 id="节点握手"><a href="#节点握手" class="headerlink" title="节点握手"></a>节点握手</h1><p>节点握手是指一批运行在集群模式下的节点通过 Gossip 协议彼此通信，达到感知对方的过程。节点握手是集群彼此通信的第一步，由客户端发起命令：<code>cluster meet {ip} {port}</code>，比如这里 6379 和 6380 两个节点进行握手通信：</p><ul><li>节点 6379 本地创建 6380 节点信息对象，并发送 meet 消息。</li><li>节点 6380 接受到 meet 消息后，保存 6379 节点信息并回复 pong 消息。</li><li>之后节点 6379 和 6380 彼此定期通过 ping/pong 消息进行正常的节点通信。</li></ul><p>集群内的每个 Redis 实例监听两个 TCP 端口，6379（默认）用于服务客户端查询，16379（默认服务端口 + 10000）用于集群内部通信，所有的 Redis 节点彼此互联（PING-PONG 机制），节点间通信使用轻量的二进制协议，减少带宽占用。</p><p>下面分别执行 meet 命令让其他节点加入到集群中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6380</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6381</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6382</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6383</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6384</span><br></pre></td></tr></table></figure><p>最后执行 <code>cluster nodes</code> 命令确认 6 个节点都彼此感知并组成集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">fb07612cf5be9ffec1f7b16d2533995547dbf1a6 127.0.0.1:6382@16382 master - 0 1524799644954 0 connected</span><br><span class="line">541c76599b2e872b91babdabc9a6bd22f6e8b16d 127.0.0.1:6379@16379 myself,master - 0 1524799642000 2 connected</span><br><span class="line">17cb468a7805ed5f286f44c5ffdecef645beb2e2 127.0.0.1:6384@16384 master - 0 1524799643000 5 connected</span><br><span class="line">224f02fb1a4a232fa0190a89569ccf924e60ce1f 127.0.0.1:6383@16383 master - 0 1524799641926 4 connected</span><br><span class="line">90b5c3ae81411306931d1bd5a4363b3476ce7c59 127.0.0.1:6381@16381 master - 0 1524799643000 3 connected</span><br><span class="line">4bc590060dc0c987e84dbb7e155da37df74a4026 127.0.0.1:6380@16380 master - 0 1524799643950 1 connected</span><br></pre></td></tr></table></figure><p>节点握手之后，集群还不能进行工作，为啥？因为所有的节点还没有分配槽（slot），对吧？执行 <code>cluster info</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:0</span><br><span class="line">cluster_slots_ok:0</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:0</span><br><span class="line">cluster_current_epoch:5</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_ping_sent:196</span><br><span class="line">cluster_stats_messages_pong_sent:218</span><br><span class="line">cluster_stats_messages_meet_sent:5</span><br><span class="line">cluster_stats_messages_sent:419</span><br><span class="line">cluster_stats_messages_ping_received:218</span><br><span class="line">cluster_stats_messages_pong_received:201</span><br><span class="line">cluster_stats_messages_received:419</span><br></pre></td></tr></table></figure><p>被分配的槽（cluster_slots_assigned）是 0，所以接下来就是给这些节点分配槽（slot）。</p><h1 id="分配槽"><a href="#分配槽" class="headerlink" title="分配槽"></a>分配槽</h1><p>Redis 集群使用的是 hash solt 算法，会把所有的数据映射到 16384 个槽中，每个 key 会映射为一个固定的槽，只有当节点分配了槽，才能响应和这些槽关联的键命令。通过：<code>cluster addslots {start..end}</code> 命令为节点分配槽。因为示例的这个集群是 3 主 3 从，那只需要将 16384 个 slot 平均分配给 6379、6380、6381 三个主节点，由于使用的是 cluster addslots 的命令，由于不支持批量添加操作，所以需要使用 shell 脚本进行添加，创建脚本 addslot.sh 并执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 cluster addslots &#123;0..5461&#125;</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6380 cluster addslots &#123;5462..10922&#125;</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6381 cluster addslots &#123;10923..16383&#125;</span><br></pre></td></tr></table></figure><p>执行cluster info 查看集群状态，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:5</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_ping_sent:3601</span><br><span class="line">cluster_stats_messages_pong_sent:3692</span><br><span class="line">cluster_stats_messages_meet_sent:5</span><br><span class="line">cluster_stats_messages_sent:7298</span><br><span class="line">cluster_stats_messages_ping_received:3692</span><br><span class="line">cluster_stats_messages_pong_received:3606</span><br><span class="line">cluster_stats_messages_received:7298</span><br></pre></td></tr></table></figure><p>当前集群状态是 OK，hash slot 均已分配完毕，集群进入在线状态。剩下的三个节点（6382、6383、6384）充当从节点，负责主节点出现故障时，可以自动进行故障转移。<strong>注意在集群模式下 slaveof 添加从节点操作不再支持</strong>，应该使用 <code>cluster replicate {nodeId}</code> 命令让一个节点成为从节点。其中命令执行必须在对应的从节点上执行，nodeId 是要复制主节点的节点 ID，通过 <code>cluster nodes</code> 命令可以查看所以节点的 nodeId，前面的 40 位 16 进制字符串就是对应节点的 nodeId :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">fb07612cf5be9ffec1f7b16d2533995547dbf1a6 127.0.0.1:6382@16382 master - 0 1524811513984 0 connected</span><br><span class="line">541c76599b2e872b91babdabc9a6bd22f6e8b16d 127.0.0.1:6379@16379 myself,master - 0 1524811511000 2 connected 0-5461</span><br><span class="line">17cb468a7805ed5f286f44c5ffdecef645beb2e2 127.0.0.1:6384@16384 master - 0 1524811514991 5 connected</span><br><span class="line">224f02fb1a4a232fa0190a89569ccf924e60ce1f 127.0.0.1:6383@16383 master - 0 1524811512000 4 connected</span><br><span class="line">90b5c3ae81411306931d1bd5a4363b3476ce7c59 127.0.0.1:6381@16381 master - 0 1524811513000 3 connected 10923-16383</span><br><span class="line">4bc590060dc0c987e84dbb7e155da37df74a4026 127.0.0.1:6380@16380 master - 0 1524811512975 1 connected 5462-10922</span><br></pre></td></tr></table></figure><p>开始进行复制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6382&gt; cluster replicate 541c76599b2e872b91babdabc9a6bd22f6e8b16d</span><br><span class="line">127.0.0.1:6383&gt; cluster replicate 4bc590060dc0c987e84dbb7e155da37df74a4026</span><br><span class="line">127.0.0.1:6384&gt; cluster replicate 90b5c3ae81411306931d1bd5a4363b3476ce7c59</span><br></pre></td></tr></table></figure><p>通过<code>cluster nodes</code> 命令查看集群状态和复制关系，分别是 3个 master 和 3 个 slave：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">fb07612cf5be9ffec1f7b16d2533995547dbf1a6 127.0.0.1:6382@16382 slave 541c76599b2e872b91babdabc9a6bd22f6e8b16d 0 1524811962000 2 connected</span><br><span class="line">541c76599b2e872b91babdabc9a6bd22f6e8b16d 127.0.0.1:6379@16379 myself,master - 0 1524811962000 2 connected 0-5461</span><br><span class="line">17cb468a7805ed5f286f44c5ffdecef645beb2e2 127.0.0.1:6384@16384 slave 90b5c3ae81411306931d1bd5a4363b3476ce7c59 0 1524811964596 5 connected</span><br><span class="line">224f02fb1a4a232fa0190a89569ccf924e60ce1f 127.0.0.1:6383@16383 slave 4bc590060dc0c987e84dbb7e155da37df74a4026 0 1524811962581 4 connected</span><br><span class="line">90b5c3ae81411306931d1bd5a4363b3476ce7c59 127.0.0.1:6381@16381 master - 0 1524811963588 3 connected 10923-16383</span><br><span class="line">4bc590060dc0c987e84dbb7e155da37df74a4026 127.0.0.1:6380@16380 master - 0 1524811963000 1 connected 5462-10922</span><br></pre></td></tr></table></figure><p>目前为止，依照 Redis 协议手动建立一个集群。它由 6 个节点构成， 3 个主节点负责处理槽和相关数据，3 个从节点负责故障转移。手动搭建集群便于理解集群建立的流程和细节，但是要是节点数比较多的话，手动这样搭建，岂不是要累死，因此 Redis 官方提供了 <code>redis-trib.rb</code> 工具方便我们快速搭建集群，下面就来体验下这个工具的好处吧。</p><h1 id="redis-trib-搭建集群"><a href="#redis-trib-搭建集群" class="headerlink" title="redis-trib 搭建集群"></a>redis-trib 搭建集群</h1><h2 id="Ruby-环境准备"><a href="#Ruby-环境准备" class="headerlink" title="Ruby 环境准备"></a>Ruby 环境准备</h2><ul><li><p>安装 Ruby ，<a href="http://www.ruby-lang.org/en/downloads/" target="_blank" rel="noopener">下载</a>并解压缩，然后执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>检测是否安装成功，输入 <code>ruby -v</code>，打印版本号，说明安装成功。</p></li><li><p>安装 rubygem redis 依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://rubygems.org/downloads/redis-4.0.1.gem</span><br><span class="line">$ gem install -l redis-4.0.1.gem</span><br><span class="line">$ gem list --check redis gem</span><br></pre></td></tr></table></figure><p>中间在执行 <code>gem install -l redis-4.0.1.gem</code> 这一步报错报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR:  Loading command: install (LoadError)</span><br><span class="line">      cannot load such file -- zlib</span><br><span class="line">ERROR:  While executing gem ... (NoMethodError)</span><br><span class="line">  undefined method `invoke_with_build_args&apos; for nil:NilClass</span><br></pre></td></tr></table></figure><p>意思是缺少 zlib 依赖，需要安装 zlib 库，那就接下来安装 zlib：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br></pre></td></tr></table></figure><p>集成 zlib 库到 ruby 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/ruby-2.5.1/ext/zlib</span><br><span class="line">$ ruby extconf.rb</span><br><span class="line"># 在操作下一步之前需要修改 Makefile 文件中的 zlib.o: $(top_srcdir)/include/ruby.h，将 $(top_srcdir) 修改为 ../.. 如下</span><br><span class="line"># zlib.o: ../../include/ruby.h</span><br><span class="line"># 这一步如果不修改，make 时会爆出另外一个错误</span><br><span class="line"># make:*** No rule to make target `/include/ruby.h&apos;, needed by `zlib.o&apos;.  Stop</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>成功之后，再次运行 <code>gem install -l redis-4.0.1.gem</code>，出现以下界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-redis-cluster ~]# gem install -l redis-4.0.1.gem</span><br><span class="line">Successfully installed redis-4.0.1</span><br><span class="line">Parsing documentation for redis-4.0.1</span><br><span class="line">Installing ri documentation for redis-4.0.1</span><br><span class="line">Done installing documentation for redis after 0 seconds</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure><p>成功安装 rubygem redis 依赖。</p></li><li><p>安装 redis-trib.rb：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /&#123;redis_home&#125;/src/redis-trib.rb /usr/local/bin</span><br></pre></td></tr></table></figure><p>确认 redis-trib.rb 是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-redis-cluster src]# redis-trib.rb</span><br><span class="line">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</span><br><span class="line"></span><br><span class="line">  create          host1:port1 ... hostN:portN</span><br><span class="line">                  --replicas &lt;arg&gt;</span><br><span class="line">  check           host:port</span><br><span class="line">  info            host:port</span><br><span class="line">  fix             host:port</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">  reshard         host:port</span><br><span class="line">                  --from &lt;arg&gt;</span><br><span class="line">                  --to &lt;arg&gt;</span><br><span class="line">                  --slots &lt;arg&gt;</span><br><span class="line">                  --yes</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">                  --pipeline &lt;arg&gt;</span><br><span class="line">  rebalance       host:port</span><br><span class="line">                  --weight &lt;arg&gt;</span><br><span class="line">                  --auto-weights</span><br><span class="line">                  --use-empty-masters</span><br><span class="line">                  --timeout &lt;arg&gt;</span><br><span class="line">                  --simulate</span><br><span class="line">                  --pipeline &lt;arg&gt;</span><br><span class="line">                  --threshold &lt;arg&gt;</span><br><span class="line">  add-node        new_host:new_port existing_host:existing_port</span><br><span class="line">                  --slave</span><br><span class="line">                  --master-id &lt;arg&gt;</span><br><span class="line">  del-node        host:port node_id</span><br><span class="line">  // 省略</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>从 redis-trib.rb 的提示信息可以看出，它提供了集群创建、检查、修复、均衡等命令行工具。</p></li></ul><h2 id="准备节点-1"><a href="#准备节点-1" class="headerlink" title="准备节点"></a>准备节点</h2><p>  跟之前内容一样准备好节点配置并用 start.sh 脚本批量启动：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/local/redis-trib/conf/redis-6481.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-trib/conf/redis-6482.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-trib/conf/redis-6483.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-trib/conf/redis-6484.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-trib/conf/redis-6485.conf &amp;</span><br><span class="line">redis-server /usr/local/redis-trib/conf/redis-6486.conf &amp;</span><br></pre></td></tr></table></figure><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>  启动好 6 个节点之后，使用 <code>redis-trib.rb create</code> 命令完成节点握手和槽分配过程，命令如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb create --replicas 1 127.0.0.1:6481 127.0.0.1:6482 127.0.0.1:6483 127.0.0.1:6484 127.0.0.1:6485 127.0.0.1:6486</span><br></pre></td></tr></table></figure><p>  replicas 参数指定集群中每个主节点配备几个从节点，这里设置为 1。<br>  中间会让你输入 yes 同意主从节点角色分配的计划，redis-trib.rb 开始执行节点握手和槽分配操作，输出如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Using 3 masters:</span><br><span class="line">127.0.0.1:6481</span><br><span class="line">127.0.0.1:6482</span><br><span class="line">127.0.0.1:6483</span><br><span class="line">Adding replica 127.0.0.1:6485 to 127.0.0.1:6481</span><br><span class="line">Adding replica 127.0.0.1:6486 to 127.0.0.1:6482</span><br><span class="line">Adding replica 127.0.0.1:6484 to 127.0.0.1:6483</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: 01286db488f5d17d349b902f8cc0a847fcd9ccc1 127.0.0.1:6481</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">M: f995f54df2a20510625a5f0643441d284a17d168 127.0.0.1:6482</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">M: e8c2e4bd5388cb2559577f552b2b5aff56c471c0 127.0.0.1:6483</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">S: 8332a7745d8dd5dc9dd294f5aae07166f25a8314 127.0.0.1:6484</span><br><span class="line">   replicates e8c2e4bd5388cb2559577f552b2b5aff56c471c0</span><br><span class="line">S: ebcb250ba7b69ad5d9346367b63cb4a706e5b217 127.0.0.1:6485</span><br><span class="line">   replicates 01286db488f5d17d349b902f8cc0a847fcd9ccc1</span><br><span class="line">S: 55df5e160bcea284d27f0d6c193535567858765d 127.0.0.1:6486</span><br><span class="line">   replicates f995f54df2a20510625a5f0643441d284a17d168</span><br><span class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join.......</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6481)</span><br><span class="line">M: 01286db488f5d17d349b902f8cc0a847fcd9ccc1 127.0.0.1:6481</span><br><span class="line">   slots:0-5460 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: e8c2e4bd5388cb2559577f552b2b5aff56c471c0 127.0.0.1:6483</span><br><span class="line">   slots:10923-16383 (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: ebcb250ba7b69ad5d9346367b63cb4a706e5b217 127.0.0.1:6485</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 01286db488f5d17d349b902f8cc0a847fcd9ccc1</span><br><span class="line">S: 8332a7745d8dd5dc9dd294f5aae07166f25a8314 127.0.0.1:6484</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e8c2e4bd5388cb2559577f552b2b5aff56c471c0</span><br><span class="line">M: f995f54df2a20510625a5f0643441d284a17d168 127.0.0.1:6482</span><br><span class="line">   slots:5461-10922 (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 55df5e160bcea284d27f0d6c193535567858765d 127.0.0.1:6486</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates f995f54df2a20510625a5f0643441d284a17d168</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>  16384 个槽全部被分配，集群创建成功。这里需要 <strong>注意给 redis-trib.rb 的节点地址必须是不包含任何槽/数据的节点</strong>，否则会拒绝创建集群。</p><h2 id="检查集群的完整性"><a href="#检查集群的完整性" class="headerlink" title="检查集群的完整性"></a>检查集群的完整性</h2><p>接下来就要检查下是否所有的槽都分配到存活的主节点上，只要 16384 个槽中有一个没有分配给节点则表示集群不完整。可以使用 <code>redis-trib.rb check</code> 命令检测。check 命令只需要给出集群中任意一个节 点地址就可以完成整个集群的检查工作，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-trib.rb check 127.0.0.1:6481</span><br></pre></td></tr></table></figure><p>最后输出提示信息，提示所有的槽都分配到主节点上去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered</span><br></pre></td></tr></table></figure><p>总得来说，使用 redis-trib 极大的们简化集群创建、检查、槽迁移和均衡等常见运维操作。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ul><li><a href="https://blog.csdn.net/feinifi/article/details/78251486" target="_blank" rel="noopener">gem install redis报错解决办法</a></li><li><a href="http://gitbook.cn/gitchat/activity/5a9b8abbf055ac6f65966638" target="_blank" rel="noopener">基于 Redis 的分布式缓存实现方案及可靠性加固策略</a></li><li><a href="https://github.com/wangleeyom/code-grocery-shop/tree/master/%E6%90%AD%E5%BB%BA%20Redis%20%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">示例涉及的配置文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式数据存储算法浅析</title>
      <link href="/2018/04/28/dis-storage/"/>
      <url>/2018/04/28/dis-storage/</url>
      
        <content type="html"><![CDATA[<p>分布式数据库首先要解决把整个数据集按照分区规则映射到多个节点的问题，即把数据集划分到多个节点上，每个节点负责整体数据的一个子集。需要重点关注的是数据分区算法，通常的分区算法有 hash 算法、一致性 hash 算法、hash slot 算法，下面就这几种常见的数据分区算法进行简单的浅析。</p><a id="more"></a><h1 id="hash-算法"><a href="#hash-算法" class="headerlink" title="hash 算法"></a>hash 算法</h1><p>使用特定的数据，如 Redis 的键或用户 ID，再根据节点数量 N 使用公式： hash（key）% N 取模，用来决定数据映射到哪一个节点上。比如，这个时候来了一个 key = hello_world，hash(hello_world) = 11111，这时，集群中一共 3 个节点，11111 % 3 = 2，这个时候，这个 key-value 会打到第 2 个节点上去。 但是这种方案存在一个问题：<strong>当节点数量变化时，如扩容或收缩节点，数据节点映射关系需要重新计算，会导致数据的重新迁移</strong>。</p><p><img src="http://image.leeyom.top/20180426152471241969981.png" title="hash 算法"></p><p>假如其中的某台机器宕机了，就导致 1/3 的数据全部失效，需要重新对两台节点进行取模运算，再分布到其他的节点上去，如果后台逻辑没有处理好，高并发情况下，1/3 的流量可能直接越过缓存，访问数据库，将数据库压垮。</p><h1 id="一致性-hash-算法"><a href="#一致性-hash-算法" class="headerlink" title="一致性 hash 算法"></a>一致性 hash 算法</h1><p>一致性哈希算法实现思路是为系统中每个节点分配一个 token，范围一般在 0~2^32 ，这些 token 构成一个哈希环。数据读写执行节点查找操作时，先根据 key 计算 hash 值，然后顺时针找到第一个大于等于该哈希值的 token 节点，如图所示：</p><p><img src="http://image.leeyom.top/2018042615247231671201.png" title="一致性 hash 算法"></p><p>这种方式相比 hash 算法最大的好处在于加入和删除节点只影响哈希环中相邻的节点，对其他节点无影响。但是也会存在如下的问题：</p><ul><li>加减节点会造成哈希环中部分数据无法命中，需要手动处理或者忽略这部分数据。</li><li>当使用节点比较少时，节点变化将大范围影响哈希环中数据映射，因此这种方式不适合少量数据节点的分布式方案。</li><li>普通的一致性哈希分区在增减节点时需要增加一倍或减去一半节点才能保证数据和负载的均衡。</li><li>任何一个 master 宕机，只有之前的在那个master 上的数据会受到影响，因为照这顺时针走，会去找下一个相邻的 master，如果这样一直下去，都没有找到，那就会直接访问数据库，造成数据库流量暴增。</li></ul><h1 id="hash-slot-算法"><a href="#hash-slot-算法" class="headerlink" title="hash slot 算法"></a>hash slot 算法</h1><p>hash slot 算法巧妙地使用了哈希空间，使用分散度良好的哈希函数把所有数据映射到一个固定范围的整数集合中，整数定义为槽（slot）。Redis Cluster 就是采用此算法， Redis Cluster 有固定的 <strong>16384</strong> 个 hash slot，槽是集群内数据管理和迁移的基本单位，采用大范围槽的主要目的是为了方便数据拆分和集群扩展。每个节点会负责一定数量的槽，比如说当前集群有 5 个节点，每个节点平均大约负责 3276 个槽，如下所示：</p><p><img src="http://image.leeyom.top/20180426152472452118930.png" title="hash slot 与节点分配关系"></p><p>hash slot 的计算公式：<strong>slot = CRC16（key）% 16384</strong> ，对每个 key 计算 CRC16 值，然后对 16384 取模，可以获取 key 对应的hash slot，根据 solt 值就可以该 key 将存放到哪个节点上去。</p><p>hash slot 让 node 的增加和移除很简单，增加一个 master，就将其他 master 的 hash slot 移动部分过去，减少一个 master，就将它的 hash slot 移动到其他 master 上去，移动 hash slot 的成本是非常低的。hash slot 的特点总结如下：</p><ul><li>解耦数据和节点之间的关系，简化了节点扩容和收缩难度。</li><li>节点自身维护槽的映射关系，不需要客户端或者代理服务维护槽分区元数据。</li><li>支持节点、槽、键之间的映射查询，用于数据路由、在线伸缩等场景。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Sentinel 的安装与部署</title>
      <link href="/2018/04/20/redis-sentinel/"/>
      <url>/2018/04/20/redis-sentinel/</url>
      
        <content type="html"><![CDATA[<p>Redis 的主从复制可以支撑住大并发量的读写操作，但是主从复制也会带来如下的的问题，一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预，无论对于 Redis 的应用方还是运维方都带来了很大的不便。Redis Sentinel 正是用于解决这些问题，当主节点出现故障时，Redis Sentinel 能自动完成故障发现和故障转移， 并通知应用方，从而实现真正的高可用。</p><a id="more"></a><h1 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h1><p>Redis Sentinel 是一个分布式架构，其中包含若干个 Sentinel（哨兵） 节点和 Redis 数据节点，每个 Sentinel 节点会对数据节点和其余Sentinel 节点进行监控，当它发现节点不可达时，会对节点做下线标识。如果被标识的是主节点，它还会和其他 Sentinel 节点进行“协商”，当大多数 Sentinel 节点都认为主节点不可达时，它们会选举出一个 Sentinel 节点来完成自动故障转移的工作，同时会将这个变化实时通知给Redis 应用方。整个过程完全是自动的，不需要人工来介入，所以这套方案很有效地解决了 Redis 的高可用问题。</p><p>下面以1个主节点、2个从节点、3个 Sentinel 节点组成的 Redis Sentinel 为例子进行说明，拓扑结构如图所示：<br><img src="http://image.leeyom.top/20180425152462467352740.png" title="Redis Sentinel 拓扑图"></p><p>整个故障转移的处理逻辑有下面4个步骤：</p><ol><li>主节点出现故障，此时两个从节点与主节点失去连接，主从复制失败。</li><li>每个 Sentinel 节点通过定期监控发现主节点出现了故障。</li><li>多个 Sentinel 节点对主节点的故障达成一致，选举出 sentinel-3 节点作为领导者负责故障转移。</li><li><p>Sentinel 领导者节点执行了故障转移，具体的细节如下：</p><ul><li>如果主节点无法正常启动，需要选出一个从节点（slave-1），对其执行 <code>slaveof no one</code> 命令使其成为新的主节点（new-master）。</li><li>另一个从节点（slave-2）去复制新的主节点（new-master），执行 <code>slaveof new-master</code> 命令。</li><li>原来的从节点（slave-1）成为新的主节点后，更新应用方的主节点信息，重新启动应用方（client）。</li><li>待原来的主节点（old-master）恢复后，让它去复制新的主节点（new-master），<code>slaveof new-master</code>。</li></ul><p>故障转移后的拓扑图如下：<br><img src="http://image.leeyom.top/20180425152462854435905.png" title="故障转移后拓扑图"></p></li></ol><p>Sentinel 节点至少三个且奇数个，3个以上是通过增加 Sentinel 节点的个数提高对于故障判定的准确性，因为 Sentinel 领导者选举需要至少一半加 1 （N/2+1）个节点，奇数个节点可以在满足该条件的基础上节省一个节点。多个 Sentinel 节点可以防止误判，即使个别 Sentinel 节点不可用，整个 Sentinel 节点集合依然是健壮的。Sentinel 节点其实是一个独立的 Redis 节点，只是他们并不存放数据，只支持部分命令，这里需要注意一下。</p><h1 id="安装与部署"><a href="#安装与部署" class="headerlink" title="安装与部署"></a>安装与部署</h1><p>下面将以 3 个 Sentinel 节点、1 个主节点、2 个从节点组成一个 Redis Sentinel，并进行安装和部署，拓扑图如下：<br><img src="http://image.leeyom.top/20180425152462948012671.png" title="Redis Sentinel 安装示例拓扑图"></p><h2 id="部署-Redis-节点"><a href="#部署-Redis-节点" class="headerlink" title="部署 Redis 节点"></a>部署 Redis 节点</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-4.0.9.tar.gz</span><br><span class="line">$ tar xzf redis-4.0.9.tar.gz</span><br><span class="line">$ cd redis-4.0.9</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><ul><li>下载 Redis 指定版本的源码压缩包到当前目录，推荐安装目录：<code>/usr/local/</code>。</li><li>进入redis目录。</li><li>编译（编译之前确保操作系统已经安装 gcc）。</li><li>安装。<ul><li>进入 src 目录，将 <code>redis-benchmark</code>、<code>redis-cli</code>、<code>redis-check-aof</code>、<code>redis-check-rdb</code>、<code>redis-sentinel</code>、<code>redis-server</code> 执行文件拷贝到 <code>/usr/local/bin/</code> 目录下。</li><li>借助 chmod 指令修改文件权限：<code>chmod 777 redis-*</code>，否则执行对应的命令会出现 <code>permission denied</code> 权限不足。</li></ul></li></ul><h3 id="主节点"><a href="#主节点" class="headerlink" title="主节点"></a>主节点</h3><ul><li><p>将 <code>redis.conf</code> 配置文件拷贝一份到 <code>/etc/redis/</code> 目录下，并重命名为：<code>redis-6379.conf</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp redis.conf /etc/redis/redis-6379.conf</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>redis-6379.conf</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 端口</span><br><span class="line">port 6379</span><br><span class="line"># 后台运行</span><br><span class="line">daemonize yes</span><br><span class="line"># 日志名称</span><br><span class="line">logfile &quot;6379.log&quot;</span><br><span class="line"># 持久化文件</span><br><span class="line">dbfilename &quot;dump-6379.rdb&quot;</span><br><span class="line"># 工作目录，日志和数据持久化默认存放位置</span><br><span class="line">dir &quot;/opt/soft/redis/data/&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动主节点：<code>redis-server /etc/redis/redis-6379.conf</code>。</p></li><li>确认是否启动，ping 命令检测一下，确认 Redis 节点是否启动了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 127.0.0.1 -p 6379 ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></li></ul><h3 id="从节点"><a href="#从节点" class="headerlink" title="从节点"></a>从节点</h3><p>两个从节点的配置是完全一样的，下面以一个从节点为例子进行说明， 和主节点的配置不一样的是添加了 slaveof 配置，例如 <code>redis-6380.conf</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;6380.log&quot;</span><br><span class="line">dbfilename &quot;dump-6380.rdb&quot;</span><br><span class="line">dir &quot;/opt/soft/redis/data/&quot;</span><br><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>启动两个从节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /etc/redis/redis-6380.conf</span><br><span class="line">$ redis-server /etc/redis/redis-6381.conf</span><br></pre></td></tr></table></figure><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 127.0.0.1 -p 6380 ping</span><br><span class="line">PONG</span><br><span class="line">$ redis-cli -h 127.0.0.1 -p 6381 ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></p><h3 id="确认主从关系"><a href="#确认主从关系" class="headerlink" title="确认主从关系"></a>确认主从关系</h3><p>接下来便是确认主从关系，首先站在主节点的角度，执行 <code>redis-cli -h 127.0.0.1 -p 6379 info replication</code>，返回的信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=8971552,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=8971552,lag=0</span><br><span class="line">master_replid:24598661a0fd73cae32cb59c017b1056c6433272</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:8971818</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:7923243</span><br><span class="line">repl_backlog_histlen:1048576</span><br></pre></td></tr></table></figure><p>意思是，该节点为主节点，他有两个从节点，分别是 127.0.0.1:6380 和 127.0.0.1:6381。</p><p>站在从节点的角度，执行：<code>redis-cli -h 127.0.0.1 -p 6380 info replication</code>，该节点为从节点，它的主节点是 127.0.0.1：6379。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:9356524</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:24598661a0fd73cae32cb59c017b1056c6433272</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:9356524</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8307949</span><br><span class="line">repl_backlog_histlen:1048576</span><br></pre></td></tr></table></figure></p><p>到此我们的一主两从的结构搭建好了，下面就是部署 Sentinel 节点。</p><h2 id="部署-Sentinel-节点"><a href="#部署-Sentinel-节点" class="headerlink" title="部署 Sentinel 节点"></a>部署 Sentinel 节点</h2><p>3 个 Sentinel 节点的部署方法是完全一致的（端口不同），下面以 sentinel-1 节点的部署为例子进行说明。</p><ul><li>将 <code>sentinel.conf</code> 复制一份到 <code>/etc/redis/</code>，并重命名为 <code>redis-sentinel-26379.conf</code>。</li><li><p>配置 Sentinel 节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;26379.log&quot;</span><br><span class="line">dir /opt/soft/redis/data</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure><p>解读下这些配置项：</p><ul><li><code>port 26379</code>：Sentinel 节点的默认端口是 26379。</li><li><code>sentinel monitor mymaster 127.0.0.1 6379 2</code>：代表 sentinel-1 节点监控 127.0.0.1 63792 这个主节点，该主节点的别名为 mymaster，2 代表判断主节点失败至少需要 2 个 Sentinel 节点同意。</li><li><code>sentinel down-after-milliseconds mymaster 30000</code>：每个 Sentinel 节点都要通过定期发送 ping 命令来判断 Redis 数据节点和其余 Sentinel 节点是否可达，如果超过了 down-after-milliseconds 配置的时间且没有有效的回复，则判定节点不可达，30000（单位为毫秒）就是超时时间，这个配置是对节点失败判定的重要依据。down-after-milliseconds 越大，代表 Sentinel 节点对于节点不可达的条件越宽松，反之越严格。</li><li><code>sentinel parallel-syncs mymaster 1</code>：用来限制在一次故障转移之后，每次向新的主节点发起复制操作的从节点个数。如果这个参数配置的比较大，那么多个从节点会向新的主节点同时发起复制操作，尽管复制操作通常不会阻塞主节点，但是同时向主节点发起复制，必然会对主节点所在的机器造成一定的网络和磁盘 IO 开销。例如：parallel- syncs = 3 从节点会同时发起复制（并行），parallel-syncs = 1 时从节点会轮询发起复制（顺序），这个是有区别的。</li><li><code>sentinel failover-timeout mymaster 180000</code>：故障转移超时时间，从节点复制新的主节点超过了 failover-timeout（不包含复制时间）， 则故障转移失败。</li><li><code>sentinel auth-pass</code>：如果 Sentinel 监控的主节点配置了密码，sentinel auth-pass 配置通过添加主节点的密码，防止 Sentinel 节点对主节点无法监控。</li></ul></li><li>启动 Sentinel 节点，一般有两种方式，两种本质上都一样，依次启动3个 Sentinel 节点：<ul><li>使用 redis-sentinel 命令：<code>redis-sentinel /etc/redis/redis-sentinel-26379.conf</code></li><li>使用 redis-server 命令加 –sentinel 参数：<code>redis-server /etc/redis/redis-sentinel-26379.conf --sentinel</code></li></ul></li><li><p>Sentinel 节点本质上是一个特殊的 Redis 节点，所以也可以通过 info 命令来查询它的相关信息，从下面 info 的 Sentinel 片段来看，Sentinel节点找到了主节点 127.0.0.1：6379，发现了它的两个从节点，同时发现 Redis Sentinel一共 有3个 Sentinel 节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 127.0.0.1 -p 26379 info Sentinel</span><br><span class="line"># Sentinel</span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure></li><li><p>这个时候在打开 <code>redis-sentinel-26379.conf</code> 配置文件，发现 Sentinel 节点会在启动后，会给自己分配一个 sentinel myid 值，同时会将他所感知到的一些节点信息保存到他指定的配置文件中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sentinel myid 44e9a5ae2c0e4d1fc7e05aed409c259666fc3243</span><br><span class="line"># Generated by CONFIG REWRITE</span><br><span class="line">sentinel known-slave mymaster 127.0.0.1 6381</span><br><span class="line">sentinel known-slave mymaster 127.0.0.1 6380</span><br><span class="line">sentinel known-sentinel mymaster 127.0.0.1 26381 4d0f2e2d8434d05a785be7ea690e53ef02e76f80</span><br><span class="line">sentinel known-sentinel mymaster 127.0.0.1 26380 9479fc9afe3a7a21da443f858866d58b10d069ee</span><br><span class="line">sentinel current-epoch 0</span><br></pre></td></tr></table></figure><p>那我在执行到这一步的时候，遇到了一个问题，就是我初次启动 sentinel-1、sentinel-2、sentinel-3 这三个 Sentinel 节点，发现他们生成的 sentinel myid 值居然是一样的，然后通过 <code>redis-cli -h 127.0.0.1 -p 26379 info Sentinel</code> 命令查询相关信息的时候，sentinels=1，那肯定是不对的，明明有三个 Sentinel 节点，怎么只有一个呢？难道是因为他们 sentinel myid 的值一样造成的？然后我将 sentinel-2、sentinel-3 两个节点的 sentinel myid 删掉，再重新启动，发现他们两个节点重新生成的 myid 终于不一样了， sentinels=3 显示正常了。关于这个问题，实在有点摸不着头脑。</p></li></ul><p>这样一个简单的 Redis Sentinel 已经搭建起来了，整体上还是比较容易的，最终的整体的拓扑图如下：<br><img src="http://image.leeyom.top/20180425152463904923751.png" title="最终拓扑图"></p><h1 id="部署技巧"><a href="#部署技巧" class="headerlink" title="部署技巧"></a>部署技巧</h1><ul><li><p>Redis Sentinel 可以同时监控多个主节点，配置方法也比较简单，只需要指定多个 masterName 来区分不同的主节点即可，例如下面的配置监控 master-business-1（10.211.55.4:6379）和 master-business-2（10.211.55.5:6379）两个主节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor master-business-1 10.211.55.4 6379 2</span><br><span class="line">sentinel down-after-milliseconds master-business-1 60000</span><br><span class="line">sentinel failover-timeout master-business-1 180000</span><br><span class="line">sentinel parallel-syncs master-business-1 1</span><br><span class="line"></span><br><span class="line">sentinel monitor master-business-2 10.211.55.5 6380 2</span><br><span class="line">sentinel down-after-milliseconds master-business-2 10000</span><br><span class="line">sentinel failover-timeout master-business-2 180000</span><br><span class="line">sentinel parallel-syncs master-business-2 1</span><br></pre></td></tr></table></figure></li><li><p>Sentinel 节点不应该部署在一台物理“机器”上，若干虚拟机虽然有不同的 IP 地址，但实际上它们都是同一台物理机，同一台物理机意味着如果这台机器有什么硬件故障，所有的虚拟机都会受到影响，为了实现 Sentinel 节点集合真正的高可用，请勿将 Sentinel 节点部署在同一台物理机器上。</p></li><li>部署至少三个且奇数个的 Sentinel 节点。</li><li>如果 Sentinel 节点集合监控的是同一个业务的多个主节点集合，那么只需要一套 Sentinel，让他监控多个主节点，否则的话，就为每个主节点配置一套 Sentinel。</li></ul><h1 id="从节点高可用"><a href="#从节点高可用" class="headerlink" title="从节点高可用"></a>从节点高可用</h1><p>从节点一般可以起到两个作用：</p><ul><li>第一，当主节点出现故障时，作为主节点的后备“顶”上来实现故障转移，Redis Sentinel 已经实现了该功能的自动化，实现了真正的高可用。</li><li>第二，扩展主节点的读能力，尤其是在读多写少的场景非常适用。</li></ul><p>模型图如下：<br><img src="http://image.leeyom.top/20180425152464762421022.png" title="一般读写分离模型"><br>但是上述从节点不是高可用的，如果 slave-1 节点出现故障，首先客户端 client-1 将与其失联，其次 Sentinel 节点只会对该节点做主观下线，因为 Redis Sentinel 的故障转移是针对主节点的。所以很多时候，Redis Sentinel 中的从节点仅仅是作为主节点一个热备，不让它参与客户端的读操作，就是为了保证整体高可用性，但实际上这种使用方法还是有一些浪费，尤其是在有很多从节点或者确实需要读写分离的场景，所以如何实现从节点的高可用是非常有必要的。</p><p>所以在设计 Redis Sentinel 的从节点高可用时，只要能够实时掌握所有从节点的状态，把所有从节点看做一个资源池（如图下图所示），无论是上线还是下线从节点，客户端都能及时感知到（将其从资源池中添加或者删除），这样从节点的高可用目标就达到了。<br><img src="http://image.leeyom.top/20180425152464786244796.png" title="高可用的读写分离"></p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>Sentinel 节点是一个特殊的 Redis 节点，它有自己专属的 API，常用的 API 如下：</p><ul><li><code>sentinel masters</code>：展示所有被监控的主节点状态以及相关的统计信息。</li><li><code>sentinel master &lt;master name&gt;</code>：展示指定 master name 的主节点状态以及相关的统计信息。</li><li><code>sentinel slaves &lt;master name&gt;</code>：展示指定 master name 的从节点状态以及相关的统计信息。</li><li><code>sentinel sentinels &lt;master name&gt;</code>：展示指定 master name 的 Sentinel 节点集合（不包含当前 Sentinel 节点）。</li><li><code>sentinel get-master-addr-by-name &lt;master name&gt;</code>：返回指定 master name 主节点的 IP 地址和端口。</li><li><code>sentinel reset &lt;pattern&gt;</code>：当前 Sentinel 节点对符合 pattern（通配符风格）主节点的配置进行重置，包含清除主节点的相关状态（例如故障转移），重新发现从节点和 Sentinel 节点。</li><li><code>sentinel failover &lt;master name&gt;</code>：对指定 master name 主节点进行强制故障转移（没有和其他 Sentinel 节点“协商”），当故障转移完成后，其他 Sentinel 节点按照故障转移的结果更新自身配置，这个命令在 Redis Sentinel 的日常运维中非常有用。</li><li><code>sentinel ckquorum &lt;master name&gt;</code>：检测当前可达的 Sentinel 节点总数是否达到 quorum 的个数，如果 quorum = 2，将无法实现故障转移。</li><li><code>sentinel flushconfig</code>：将 Sentinel 节点的配置强制刷到磁盘上。</li><li><code>sentinel remove &lt;master name&gt;</code>：取消当前 Sentinel 节点对于指定 master name 主节点的监控。</li><li><code>sentinel monitor &lt;master name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;</code>：监控指定的主节点，跟配置文件中的 sentinel monitor mymaster 127.0.0.1 6379 2 一个道理。</li><li><code>sentinel is-master-down-by-addr</code>：Sentinel 节点之间用来交换对主节点是否下线的判断，根据参数的不同，还可以作为 Sentinel 领导者选举的通信方式。</li><li><code>sentinel set &lt;master name&gt;</code>：动态修改 Sentinel 节点配置选项，跟配置文件中那些配置是一个道理。</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://github.com/wangleeyom/code-grocery-shop/tree/master/%E6%90%AD%E5%BB%BA%20Redis%20Sentinel%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">跟示例相关的配置文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo 异常的处理浅析</title>
      <link href="/2018/04/12/dubbo-exception/"/>
      <url>/2018/04/12/dubbo-exception/</url>
      
        <content type="html"><![CDATA[<p>在使用 Dubbo 进行服务治理的时候，如果消费者调用提供者的接口，接口内部出现异常，如果没有做处理的话，提供者会直接把异常抛给消费者，这样会出现的问题是，消费方无法反序列化相应异常，从而无法定位问题。而且关于这个问题，Dubbo 的官方文档也明确表示，应在服务实现中对消费方不关心的异常进行包装。</p><a id="more"></a><p>我们知道 Dubbo 的服务分为消费者和提供者，而消费者和提供者往往都不在一个系统中，所以消费者一般在调用服务端的接口时，通常会返回一个结果实体，来标明这一次请求操作是否成功。那这个实体的设计可以为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResultDTO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否操作成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那消费者调用提供者的接口的时候，就可以从返回的结果中得知此次调用是否成功，以及调用的结果是什么。但是这样会有一个问题，如果服务端抛异常了，这个时候就会将异常抛给消费者，那抛给消费者的时候，这里就出现给消费者一些迷惑性的异常。为什么这么说呢？</p><ul><li>服务端与客户端，很可能不在同一个应用中，所以各自会依赖不同的 jar 包，比方说：服务端抛出了个 spring 的 <code>duplicateKeyException</code> ，但是客户端并没用引用 spring 的相关 jar 包，这样就会导致：抛出异常后，由于客户端没有依赖这个类，最终抛出个 <code>ClassNotDefError</code>，注意是 Error 不是 Exception。如果客户端只对 Exception 进行捕获的话，会导致直接抛到最顶层。可能日志、重试等都没了，这样无法准确通过日志去定位问题。</li></ul><p>那最好的解决方案是，服务端对异常进行捕获，如果出现异常后，把异常信息转换成字符串，然后把异常信息返回到消费者，这个时候，这个实体可以设计为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResultDTO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否操作成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T result;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常堆栈信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorTrace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供者的接口方法内部可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BaseResultDTO <span class="title">getUserById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        BaseResultDTO&lt;User&gt; baseResultDTO = <span class="keyword">new</span> BaseResultDTO&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">            User user = userService.getUserById(userId);</span><br><span class="line">            baseResultDTO.setResult(user);</span><br><span class="line">            baseResultDTO.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">            baseResultDTO.setMsg(<span class="string">"请求成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            baseResultDTO.setErrorTrace(e.getMessage());</span><br><span class="line">            baseResultDTO.setMsg(<span class="string">"请求失败！"</span>);</span><br><span class="line">            baseResultDTO.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> baseResultDTO;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>errorTrace 就是存储异常堆栈信息的属性，这样如果客户端检测到 success 为 false，这样就可以直接把 errorTrace 打到 log 中，方便定位问题。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《JVM调优总结》文章笔记</title>
      <link href="/2018/03/26/jvm-adjust/"/>
      <url>/2018/03/26/jvm-adjust/</url>
      
        <content type="html"><![CDATA[<p>看了下《JVM调优总结》文章，里面有很多很实在的干货，总结的非常的棒。在此文章的基础上，提取出一些核心的知识点，然后加上之前看的《深入理解Java虚拟机》这一书的笔记，所以我就用幕布整理成一个大纲式的笔记，方便日后查阅复习。</p><a id="more"></a><iframe src="https://mubu.com/doc/CfKYLv1hg" width="100%" height="1000px"></iframe><ul><li>幕布地址：<a href="https://mubu.com/doc/CfKYLv1hg" target="_blank" rel="noopener">https://mubu.com/doc/CfKYLv1hg</a></li><li><a href="http://www.leeyom.top/2017/02/10/tech-jvm-summary-note/">《深入理解Java虚拟机》总结笔记</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud 服务注册与发现（Eureka和Consul）</title>
      <link href="/2018/03/15/server-discovery/"/>
      <url>/2018/03/15/server-discovery/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud 是一个基于 Spring Boot 实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。它下面有很多的子项目，比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud Bus、Spring Cloud for Cloud Foundry、Spring Cloud Open Service Broker、Spring Cloud Cluster、Spring Cloud Consul等等，本篇主要简单使用 Spring Cloud 的子项目 Spring Cloud Consul 和 Spring Cloud Netflix 模块 Eureka 实现简单的服务注册与发现。</p><a id="more"></a><h1 id="Spring-Cloud-版本简介"><a href="#Spring-Cloud-版本简介" class="headerlink" title="Spring Cloud 版本简介"></a>Spring Cloud 版本简介</h1><p>去 Spring Cloud 的官网瞅了一眼，Spring Cloud 目前最新的版本是 Finchley.M7 。由于 Spring Cloud 下面的子项目太多，他的命名方式采用：版本名+版本号。另外其中需要注意一点的就是，由于 Spring Cloud 是基于 Spring Boot ，所以不同版本的 Spring Cloud 需要搭配不同版本的 Spring Boot，否则可能会出现不兼容的情况。下面是<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">官网</a>的一些建议：</p><ul><li>Finchley 版本基于 Spring Boot 2.0.x，在 Spring Boot 1.5.x 存在不兼容。</li><li>Dalston and Edgware 版本基于 Spring Boot 1.5.x ，在 Spring Boot 2.0.x 存在不兼容。</li><li>Camden 版本基于 Spring Boot 1.4.x，但是在 Spring Boot 1.5.x 测试通过。</li><li>Brixton 版本基于 Spring Boot 1.3.x，但是在 Spring Boot 1.4.x 测试通过，在 Spring Boot 1.2.x 无法编译通过。</li><li>Angel 版本基于 Spring Boot 1.2.x，在 Spring Boot 1.3.x. 无法编译通过。</li></ul><p>那我实验的 Spring Cloud 版本是 Edgware.SR2，基于 Spring Boot 1.5.9.RELEASE ，所以选择不同版本的 Spring Cloud 一定要注意 Spring Boot 的版本，一般推荐带 SR 的版本，意思是稳定版本。</p><h1 id="Eureka-和-Consul-简介"><a href="#Eureka-和-Consul-简介" class="headerlink" title="Eureka 和 Consul 简介"></a>Eureka 和 Consul 简介</h1><p>Eureka 是 Spring Cloud Netflix 的一个服务治理模块，除了Eureka，Spring Cloud Netflix 还有 Zuul、Ribbon、Feign、Hystrix、Hystrix Dashboard、Turbine等组件，而 Spring Cloud Netflix 是 Spring Cloud 的一个子项目，喜欢看美剧的应该都知道 Netflix 公司吧？它是一家互联网流媒体播放商,是美国视频巨头，像《纸牌屋》、《黑镜》、《毒枭》这些美剧就来自 Netflix 公司。Spring Cloud Consul 同样的也是 Spring Cloud 的一个子项目，Spring Cloud Consul 是一个服务发现与配置工具，二者都可以用于服务发现和注册。</p><h1 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h1><h2 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h2><p>在 Dubbo 服务治理体系中，是将服务注册到 Zookeeper 中，那 Eureka 在 Spring Cloud 的服务治理体系中就可以担任服务注册中心的任务，当然他本身也是可以担任客户端（服务）的角色。</p><ul><li>首先先创建一个 Spring Boot 项目，名称为 <code>eureka-server</code>，用于创建服务注册中心。</li><li><p>在 pom.xml 文件中引入依赖，这里 Spring Boot 的版本是 <code>1.5.9.RELEASE</code>，搭配的 Spring Cloud 的版本是 <code>Edgware.SR2</code>， <code>spring-cloud-starter-eureka-server</code> 是创建服务注册中心的核心依赖，完整的 <a href="https://github.com/wangleeyom/spring-cloud-learning/blob/master/spring-cloud-eureka/eureka-server/pom.xml" target="_blank" rel="noopener">pom.xml</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置服务中心的端口和 IP，由于 Eureka 服务注册中心，默认自己做为客户端来注册自己，需要禁止掉，对应的 application.properties。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=8080</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line"># 禁止注册中心将自己做为客户端来注册自己</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">eureka.client.fetch-registry=false</span><br></pre></td></tr></table></figure></li><li><p>在 Spring Boot 的启动类 <code>EurekaServerApplication.java</code> 开启注解：<code>@EnableEurekaServer</code>，标识该服务为注册中心服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目，访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，就可以看到 Eureka 服务注册中心管理界面：<br><img src="http://image.leeyom.top/blog/180317/I6D34e77Ge.png" alt="mark"></p></li><li>这样基于 Eureka 的一个简单的服务注册中心就搭建好了，下面我们创建一个服务并将其注册到服务注册中心。</li></ul><h2 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h2><ul><li><p>创建一个基于 Spring Boot 的项目 <code>eureka-client</code>，它充当服务提供者，引入核心依赖 <code>spring-cloud-starter-eureka</code>，完整的 <a href="https://github.com/wangleeyom/spring-cloud-learning/blob/master/spring-cloud-eureka/eureka-client/pom.xml" target="_blank" rel="noopener">pom.xml</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.properties</code> 配置该服务端口号，以及要注册的服务中心的 url。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#应用名称</span><br><span class="line">spring.application.name=eureka-client</span><br><span class="line">#应用端口</span><br><span class="line">server.port=9090</span><br><span class="line">#Eureka注册中心的url</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure></li><li><p>编写一个 Controller类，并在 Controller 中注入 <code>DiscoveryClient</code> 实例，用于获取所有服务名称并返回，<code>DiscoveryClient</code> 是 Spring Cloud 在服务发现这一层做的抽象接口，用于获取服务实例和服务清单，另外需要注意一点的就是 <code>DiscoveryClient</code> 的类路径是 <code>org.springframework.cloud.client.discovery.DiscoveryClient</code>，不是 <code>com.netflix.discovery.DiscoveryClient</code>，很容易搞混。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoverServiceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getAllServerInstance"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllServerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discoveryClient.getServices().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目的启动类 <code>EurekaClientApplication</code> 中开启注解 <code>@EnableDiscoveryClient</code>，意味着该服务将会纳入服务治理体系当中，会被注册到服务中心。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动项目，访问 <a href="http://localhost:9090/getAllServerInstance" target="_blank" rel="noopener">http://localhost:9090/getAllServerInstance</a>，将返回我们的刚创建的这个服务名称：<code>[eureka-client]</code>，既然能返回服务实例名称，那就也意味这我们的服务已经在服务注册中心注册成功了，访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，显示服务注册成功。<br><img src="http://image.leeyom.top/blog/180317/DeHEL4KjC9.png" alt="mark"></p></li><li>接下来就将服务治理体系由 Eureka 切换到 Consul。</li></ul><h1 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h1><h2 id="安装-Consul"><a href="#安装-Consul" class="headerlink" title="安装 Consul"></a>安装 Consul</h2><p>Consul 是一个服务发现与配置工具，它可以用于服务发现，健康检查，Key/Value 存储，多数据中心等等。使用 Consul 首先先进行安装，安装 Consul 有<a href="https://www.consul.io/docs/install/index.html" target="_blank" rel="noopener">两种方式</a>：</p><ol><li>使用预编译的二进制文件</li><li>从源代码安装</li></ol><p>那我这里直接就采用第一种方式，安装步骤如下：</p><ul><li>首先<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">下载</a>二进制文件，我使用的平台是 MacOS。</li><li>解压，然后终端执行 <code>sudo scp consul /usr/local/bin/</code>，将该二进制文件拷贝到 <code>/usr/local/bin</code>目录下。</li><li>终端执行 <code>consul</code> 看命令是否生效，若出现如下内容，说明 <code>Consul</code> 安装成功。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">leeyomdeMacBook-Pro:bin lidong$ consul</span><br><span class="line">usage: consul [--version] [--help] &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Available commands are:</span><br><span class="line">    agent          Runs a Consul agent</span><br><span class="line">    configtest     Validate config file</span><br><span class="line">    event          Fire a new event</span><br><span class="line">    exec           Executes a command on Consul nodes</span><br><span class="line">    force-leave    Forces a member of the cluster to enter the &quot;left&quot; state</span><br><span class="line">    info           Provides debugging information for operators</span><br><span class="line">    join           Tell Consul agent to join cluster</span><br><span class="line">    keygen         Generates a new encryption key</span><br><span class="line">    keyring        Manages gossip layer encryption keys</span><br><span class="line">    kv             Interact with the key-value store</span><br><span class="line">    leave          Gracefully leaves the Consul cluster and shuts down</span><br><span class="line">    lock           Execute a command holding a lock</span><br><span class="line">    maint          Controls node or service maintenance mode</span><br><span class="line">    members        Lists the members of a Consul cluster</span><br><span class="line">    monitor        Stream logs from a Consul agent</span><br><span class="line">    operator       Provides cluster-level tools for Consul operators</span><br><span class="line">    reload         Triggers the agent to reload configuration files</span><br><span class="line">    rtt            Estimates network round trip time between nodes</span><br><span class="line">    snapshot       Saves, restores and inspects snapshots of Consul server state</span><br><span class="line">    version        Prints the Consul version</span><br><span class="line">    watch          Watch for changes in Consul</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建服务提供者-1"><a href="#创建服务提供者-1" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h2><p>安装好 <code>Consul</code> 后，接下来我们创建一个服务提供者 <code>consul-client</code>，然后并测试服务的注册情况。</p><ul><li><p>首先，先引入核心依赖：<code>spring-cloud-starter-consul-discovery</code>，完整的 <a href="https://github.com/wangleeyom/spring-cloud-learning/blob/master/spring-cloud-consul/consul-client/pom.xml" target="_blank" rel="noopener">pom.xml</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 application.properties 中配置注册中心端口和IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#应用名称</span><br><span class="line">spring.application.name=consul-client</span><br><span class="line">#Consul注册中心IP</span><br><span class="line">spring.cloud.consul.host=localhost</span><br><span class="line">#Consul注册中心端口</span><br><span class="line">spring.cloud.consul.port=8500</span><br></pre></td></tr></table></figure></li><li><p>测试的 Controller 跟 <code>eureka-clinet</code> 的 Controller 一样，依旧是返回所有的服务清单，这里就不重复了。</p></li><li><p>在 Spring Boot 的启动类 <code>ConsulClientApplication</code> 类中开启注解 <code>@EnableDiscoveryClient</code>，将服务注册到 Consul。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsulClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用命令 <code>consul agent -dev</code> 启动 Consul 的开发模式，会打印如下的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Starting Consul agent...</span><br><span class="line">==&gt; Consul agent running!</span><br><span class="line">           Version: &apos;v1.0.6&apos;</span><br><span class="line">           Node ID: &apos;a2ed19a2-474a-a355-08c0-514162e233b2&apos;</span><br><span class="line">         Node name: &apos;lmpc0039&apos;</span><br><span class="line">        Datacenter: &apos;dc1&apos; (Segment: &apos;&lt;all&gt;&apos;)</span><br><span class="line">            Server: true (Bootstrap: false)</span><br><span class="line">       Client Addr: [127.0.0.1] (HTTP: 8500, HTTPS: -1, DNS: 8600)</span><br><span class="line">      Cluster Addr: 127.0.0.1 (LAN: 8301, WAN: 8302)</span><br><span class="line">           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false</span><br><span class="line"></span><br><span class="line">==&gt; Log data will now stream in as it occurs:</span><br><span class="line"></span><br><span class="line">2018/03/17 16:12:42 [DEBUG] Using random ID &quot;a2ed19a2-474a-a355-08c0-514162e233b2&quot; as node ID</span><br><span class="line">2018/03/17 16:12:42 [INFO] raft: Initial configuration (index=1):</span><br><span class="line">[&#123;Suffrage:Voter ID:a2ed19a2-474a-a355-08c0-514162e233b2 Address:127.0.0.1:8300&#125;]</span><br><span class="line">2018/03/17 16:12:42 [INFO] raft: Node at 127.0.0.1:8300 [Follower] entering Follower state (Leader: &quot;&quot;)</span><br><span class="line">2018/03/17 16:12:42 [INFO] serf: EventMemberJoin: lmpc0039.dc1 127.0.0.1</span><br><span class="line">2018/03/17 16:12:42 [INFO] serf: EventMemberJoin: lmpc0039 127.0.0.1</span><br><span class="line">2018/03/17 16:12:42 [INFO] consul: Adding LAN server lmpc0039 (Addr: tcp/127.0.0.1:8300) (DC: dc1)</span><br><span class="line">2018/03/17 16:12:42 [INFO] consul: Handled member-join event for server &quot;lmpc0039.dc1&quot; in area &quot;wan&quot;</span><br><span class="line">2018/03/17 16:12:42 [INFO] agent: Started DNS server 127.0.0.1:8600 (udp)</span><br><span class="line">2018/03/17 16:12:42 [INFO] agent: Started DNS server 127.0.0.1:8600 (tcp)</span><br><span class="line">2018/03/17 16:12:42 [INFO] agent: Started HTTP server on 127.0.0.1:8500 (tcp)</span><br><span class="line">2018/03/17 16:12:42 [INFO] agent: started state syncer</span><br><span class="line">2018/03/17 16:12:42 [WARN] raft: Heartbeat timeout from &quot;&quot; reached, starting election</span><br><span class="line">2018/03/17 16:12:42 [INFO] raft: Node at 127.0.0.1:8300 [Candidate] entering Candidate state in term 2</span><br><span class="line">2018/03/17 16:12:42 [DEBUG] raft: Votes needed: 1</span><br><span class="line">2018/03/17 16:12:42 [DEBUG] raft: Vote granted from a2ed19a2-474a-a355-08c0-514162e233b2 in term 2. Tally: 1</span><br><span class="line">2018/03/17 16:12:42 [INFO] raft: Election won. Tally: 1</span><br><span class="line">2018/03/17 16:12:42 [INFO] raft: Node at 127.0.0.1:8300 [Leader] entering Leader state</span><br><span class="line">2018/03/17 16:12:42 [INFO] consul: cluster leadership acquired</span><br><span class="line">2018/03/17 16:12:42 [INFO] consul: New leader elected: lmpc0039</span><br><span class="line">2018/03/17 16:12:42 [DEBUG] consul: Skipping self join check for &quot;lmpc0039&quot; since the cluster is too small</span><br><span class="line">2018/03/17 16:12:42 [INFO] consul: member &apos;lmpc0039&apos; joined, marking health alive</span><br><span class="line">2018/03/17 16:12:42 [DEBUG] Skipping remote check &quot;serfHealth&quot; since it is managed automatically</span><br><span class="line">2018/03/17 16:12:42 [INFO] agent: Synced node info</span><br><span class="line">2018/03/17 16:12:42 [DEBUG] agent: Node info in sync</span><br><span class="line">2018/03/17 16:12:43 [DEBUG] Skipping remote check &quot;serfHealth&quot; since it is managed automatically</span><br><span class="line">2018/03/17 16:12:43 [DEBUG] agent: Node info in sync</span><br></pre></td></tr></table></figure></li><li><p>启动项目，访问：<code>http://localhost:8080/getAllServerInstance</code>，返回 <code>[consul, consul-client]</code>，访问 <code>http://localhost:8500/ui/</code>，在 Consul 的控制台就可以看到我们注册的服务。<br><img src="http://image.leeyom.top/blog/180317/li0ddJj0jg.png" alt="mark"></p></li><li>参考：<ul><li><a href="http://blog.csdn.net/u010046908/article/details/61916389" target="_blank" rel="noopener">Consul 简介、安装、常用命令的使用</a></li><li><a href="http://blog.didispace.com/spring-cloud-starter-dalston-1/" target="_blank" rel="noopener">Spring Cloud构建微服务架构：服务注册与发现（Eureka、Consul）【Dalston版】</a></li><li>Spring Cloud 官网：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/</a></li><li>Consul 官网：<a href="https://www.consul.io/" target="_blank" rel="noopener">https://www.consul.io/</a></li><li>Spring Cloud 中文网：<a href="https://springcloud.cc/" target="_blank" rel="noopener">https://springcloud.cc/</a></li><li>Spring Cloud Dalston 版中文文档：<a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="noopener">https://springcloud.cc/spring-cloud-dalston.html</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《硅谷钢铁侠》读后感</title>
      <link href="/2018/03/14/svse-iron-man/"/>
      <url>/2018/03/14/svse-iron-man/</url>
      
        <content type="html"><![CDATA[<p>第一次听说埃隆.马斯克，是在 ZEALER 的一档科技脱口秀《科技相对论》上面听到的，节目中讲述了这位传奇人物的太空传奇。由于节目时间有限，没法深入了解马斯克的具体故事，所以就开始阅读这本关于他的传记。埃隆.马斯克出生在南非，他是一个极其富有冒险精神的人，小时候他便和他的外祖父驾驶飞机到处旅行。后面移民去了美国，他去美国的主要原因，首先美国有硅谷，南非无法承载他的梦想，最重要的是他信仰技术改变世界，技术驱动社会变革。<br><a id="more"></a><br>zip2、PayPal、space X、特斯拉、太阳城、超级高铁，是不是听上去很科幻，没错，这就是埃隆.马斯克现在涉足的行业，从最初的互联网，到现在的航空航天、电动汽车、新能源技术，不经让人感叹，这不就是现实版的钢铁侠吗？尤其是space X的火箭回收技术，到目前为止还没有哪个国家可以做到。</p><p>当然通往成功的路上，少不了质疑，书中一句话让人印象深刻：</p><blockquote><p>尽管全世界仍然在质疑埃隆，但我认为有问题的其实是这个世界，而不是埃隆。</p></blockquote><p>在大家都不看好航空产业，电动汽车的情况下，马斯克一头扎进了这些陌生的领域，虽然几次濒临破产的地步，但是最后都起死回生，成为行业的佼佼者。其中我觉得最NB的还是他每次涉足一个新行业，到最后都能掌握该领域的专业知识。</p><p>书中的他是一个冷酷无情的人，为什么这么说？他可以毫不眨眼开除一个在space X呆了十多年的老员工，员工的任务没有按时完成，他就可能面临被马斯克开除的危险。但我更加确信，马斯克是有情有义之人，他以一种史诗般的方式呈现喜怒哀乐，他感受最深刻的是自己改变人类命运的使命，因而难以意识到他人的强烈情绪，以致他富有人情味的一面被掩盖，令他显得冷酷无情，没有顾及个体的想法和需求。</p><blockquote><p>我希望死在火星上。</p></blockquote><p>埃隆.马斯克的终极目标依然是把人类变成一种跨越行星的物种，他的目标是把人类登上火星，实现星际移民。而space x，特斯拉，太阳城都是帮助他实现他目标的一个途径，而且他现在正直中年，公司业绩也蒸蒸日上，这个伟大的目标说不定是真的可以实现。</p><p>另外老外写的传记感觉有点流水账的味道，不知道是不是因为翻译过来了变了味道，还是老外写的就这样，但是有个好处就是，很少背离事实。像马斯克失败的婚姻，与PayPal董事会之间的恩怨等等，他都能记录在书本中。</p><p>总之，如果对科技行业感兴趣，想了解现实版钢铁侠马斯克是如何一步一步走到今天，还是值得推荐阅读的。在看完这本书的时候，这是我首次利用碎片化的时间完整看完一本书，所谓碎片化时间，无非就是公交车上、上厕所、睡前这些琐碎的时间。但是让我现在比较困惑的是，碎片话的知识，很难形成一套知识体系，也就是，看了很容易忘掉，这个问题，一时半会儿在这也讲不清楚，等哪天找到解决方案，到时候可以分享出来，今天就写到这儿吧。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 埃隆.马斯克 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo 服务启动方式浅析</title>
      <link href="/2018/03/07/dubbo-jar-server/"/>
      <url>/2018/03/07/dubbo-jar-server/</url>
      
        <content type="html"><![CDATA[<p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，可以和Spring框架无缝集成。最近这段时间，参与了公司一个项目的重构，最主要的就是使用Dubbo将其拆分成微服务架构。本篇中不细说如何使用Dubbo进行rpc服务的调用，主要是浅析下基于Dubbo的微服务的打包以及启动方式。</p><a id="more"></a><p>Dubbo服务的打包方式主要有两种，一种是打成jar，另外一种是打成war。但是通常来说，一般是将服务打成jar包，然后controller通过rpc调用服务。</p><p>Dubbo服务的启动方式主要有三种：</p><ul><li>web容器运行，比方说Tomcat、JBoss，那他对应的服务打包方式自然就是war包。</li><li>自建Main方法，初始化spring配置文件，基于spring容器。</li><li>Dubbo自带容器，Spring Container。</li></ul><p>这三种启动方式的区别主要如下：</p><h2 id="web容器"><a href="#web容器" class="headerlink" title="web容器"></a>web容器</h2><p>通过web容器运行Dubbo服务应该是最简单的，只要把服务打成war包，丢到tomcat就完事，但是这样做会有额外的资源开销，比如需要为web容器分配端口，内存等等，这种方式不太推荐。</p><h2 id="自建main方法"><a href="#自建main方法" class="headerlink" title="自建main方法"></a>自建main方法</h2><p>自建main方法，他所对应的打包方式是jar，运行jar包都需要一个入口（main方法），首先看自建main方法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line"><span class="keyword">new</span> String[] &#123; <span class="string">"classpath:spring-context.xml"</span> &#125;);</span><br><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">context.stop();</span><br><span class="line">System.err.println(<span class="string">"===================== service has stop!!!========================"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (Main.class) &#123;</span><br><span class="line">running = <span class="keyword">false</span>;</span><br><span class="line">Main.class.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">context.start();</span><br><span class="line">System.err.println(<span class="string">"===================== service has start!!!========================"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (Main.class) &#123;</span><br><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Main.class.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他的原理是读取spring配置文件，装载spring容器，这种方法虽说也是可行的，但是他有个缺点就是，无法使用Dubbo自带的一些高级特性，比方说Dubbo的优雅停机。此方式适合在开发阶段使用。</p><h2 id="Dubbo自带容器"><a href="#Dubbo自带容器" class="headerlink" title="Dubbo自带容器"></a>Dubbo自带容器</h2><p>其实Dubbo是自带容器的，服务容器是一个 standalone 的启动程序，他不需要tomcat等web容器的支持就可以启动，服务容器只是一个简单的 Main 方法，并加载一个简单的 Spring 容器，用于暴露服务。</p><p>Dubbo 内嵌了三种容器，分别是：</p><ul><li><code>Spring Container</code>：这个就是我们常用的spring容器</li><li><code>Jetty Container</code>：内嵌 Jetty web容器</li><li><code>Log4j Container</code>：自动配置 log4j 容器</li></ul><p>首先先来看下完整的pom文件：<a href="https://gist.github.com/wangleeyom/2e8b96520ee93b7ac52d823475905bed" target="_blank" rel="noopener">pom.xml</a></p><p>因为Dubbo默认加载的是<code>META-INF/spring</code> 目录下的所有 Spring 配置，那所以我们需要在项目打包的时候将spring配置文件复制到<code>/META-INF/spring</code>目录下，我这里的spring的配置文件是<code>spring-context.xml</code>，具体的实现代码块：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>$&#123;project.build.directory&#125;/classes/META-INF/spring<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>spring-context.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其次需要借助maven的插件<code>maven-shade-plugin</code>，将我们所有的依赖打成一个jar包，同时指定该jar包的入口，也就是Dubbo指定的入口：<code>com.alibaba.dubbo.container.Main</code>，所以就有如下的片段：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是否生成缩减的pom文件，默认不配置是true --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>false<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">            <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.</span></span></span><br><span class="line"><span class="tag"><span class="string">            ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 启动类 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.alibaba.dubbo.container.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">            <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.</span></span></span><br><span class="line"><span class="tag"><span class="string">            AppendingTransformer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span>META-INF/spring.handlers<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">            <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.</span></span></span><br><span class="line"><span class="tag"><span class="string">            AppendingTransformer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span>META-INF/spring.schemas<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行 eclipse 右击你要打包的项目，执行 <code>Run as</code> –&gt; <code>maven install</code>，最终target目录下会生成两个jar包，他们的名字是：</p><ul><li><code>xxx.jar</code></li><li><code>original-xxx.jar</code></li></ul><p>带original前缀的是原始的jar，这个jar没有将其他的依赖打进去，而xxx.jar则是完整的jar包，也是我们最终要部署运行的jar包。最后将打包好的项目使用 <code>java -jar xxx.jar &amp;</code>运行服务，若打印<code>Dubbo service server started!</code>意味这服务是启动成功了。</p><p>另外也可以使用<code>maven-dependency-plugin</code>和<code>maven-jar-plugin</code>两个插件来进行打包，这两个插件的应用场景如下：</p><ul><li><code>maven-dependency-plugin</code>：用于复制依赖的jar包到指定的文件夹里，这里我是将所有涉及到的依赖jar复制到lib目录下。</li><li><code>maven-jar-plugin</code>：打成jar时，设定manifest的参数，比如指定运行的Main class，还有依赖的jar包，加入classpath中。</li></ul><p>对应的pom文件：<a href="https://gist.github.com/wangleeyom/ce850ee54123334634345adf0b23cae8" target="_blank" rel="noopener">pom.xml</a><br>编译打包成功后，会生成一个jar包和lib目录，lib目录里面放了该服务涉及到的依赖jar包，jar包部署的时候，要将lib目录以及打包好的jar包放到同级目录，否则jar包服务是无法启动。</p><p>所以综上，我们更推荐使用Dubbo官方推荐的服务容器去运行服务，一个我们不需要自己创建多余的Main方法，其次可实现优雅关机（ShutdownHook），何乐而不为不是吗？</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于阅读</title>
      <link href="/2018/01/29/about-reading/"/>
      <url>/2018/01/29/about-reading/</url>
      
        <content type="html"><![CDATA[<p>最近这几天深圳天气很冷，温度已经在10度以下了，这应该是深圳最冷的时候了，题外话了，人总有会有胡思乱想的时候，最近在思考的问题就是如何去阅读。其实小时候我还是蛮喜欢看书的，那个时候，拿着本我哥的历史教材书，都能看的津津有味，忘乎所以。但是，随着年龄的增长，感觉看书的时间也越来越少了，我觉得，很大一部分的原因，是外界的诱惑太多，比如追剧，聚会等等，还有一个更大的原因，也是我们经常说的：工作太忙，没有时间看书。</p><a id="more"></a><p>之所以想到这个问题，可能是我越发觉得自己的阅读水平以及写作水平一直在下降，就像我现在写的这些，其实全部都是口水话堆叠而成。造成这个问题的主要原因还是自己老喜欢用工作没时间这个理由来给自己开脱，久而久之，就变成理所当然。</p><p>我自己也想迫切的改变这个局面，但是这个也急不来。目前能做的就是培养自己的阅读习惯，比方说每天看一篇短篇文章。毕竟一来就说要看什么什么书，我觉得我多半是会放弃的。当习惯养成之后，我想就可以是时候看些自己喜欢看的书，注意是自己感兴趣的书。其实我最近想看的一本书是村上春树《当我谈跑步时我谈些什么》，其实很大一部分原因是我自己也在坚持跑步，想看看人家的跑步哲学是怎么样的。</p><p>关于阅读介质的问题，无非就是两个，一个电子书，一个是纸质书。于我个人而言，我是比较喜欢看电子书，可能我对于电子产品有着疯狂好奇心的缘故。电子书的好处就是在于轻便，但是相比于纸质书籍，少了点文字笔墨的味道。在选择什么样的设备看电子书，就目前看来主要有以下几种：</p><ul><li>手机</li><li>电脑</li><li>kindle</li><li>ipad</li></ul><p>对于手机而言，我觉得适合利用碎片化的时间阅读，比如在公交车上看看新闻，短篇小说等等，我目前就是这么做的。电脑其实是不太适合阅读的，一个现在大部分的电脑分辨率比较低，再个毕竟对着电脑上了一天的班，已经产生疲惫了，自然效率就不高。</p><p>kindle和ipad我觉得是比较适合深度阅读的设备，kindle是由亚马逊推出的专门用于阅读的墨水屏阅读器，而ipad是由苹果公司发布的一款平板电脑，这两个设备也是知乎上关于哪个更适合阅读争论最多的机器。由于没有使用过两款机器，但是通过网上查找资料，网友大致给出的意见是：kindle对于小说，散文类的书籍有很好的适配，但是对于pdf类的书籍支持的不太好，而ipad则适合阅读pdf类数书籍，并且还可以很方便记笔记等等。那其实我最近也有想法想购入其中的一款用于阅读，但是有时候又转念一想，这是不是伪需求，或许我自己买了后，会不会真的发挥它的价值，否则就真的是沦为泡面神器。秉持着理性消费的原则，我决定还是先观望一段时间吧。</p><p>最近看了作者王小波的一篇文章，叫《工作与生活》，其中有这么一段：</p><blockquote><p>不加检点的生活，属于不能接受的生活之一种。人必须过他可以接受的生活，这恰恰是他改变一切的动力。人有了心胸，就可以用它来改变自己的生活。</p></blockquote><p>我也希望改变自己的生活，但是，我觉得，我还是先从阅读开始吧！乱七八糟的说了许多废话，希望大家好好保暖，不要感冒~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017，跟过去的自己说再见</title>
      <link href="/2017/12/19/life-2017-summary/"/>
      <url>/2017/12/19/life-2017-summary/</url>
      
        <content type="html"><![CDATA[<p>2017年，我的本命年，这一年到底过得怎么样？还请我慢慢的道来~</p><p>在写这篇文章的时候，特意去看了下去年这个时候写的那篇文章，尤其是最后自己给自己定的几个目标，希望脸不要打的太疼：<br><a id="more"></a></p><ul><li style="list-style: none"><input type="checkbox"> <del>看几本自己喜欢看的书。</del><strong>这一年，大多数看的是技术书，其他类型的书一本也没看，唉╮(╯_╰)╭</strong></li><li style="list-style: none"><input type="checkbox" checked> 健身、减肥。 <strong>累计跑步600公里，减重25斤！</strong></li><li style="list-style: none"><input type="checkbox" checked> 买一块超大的显示器。<strong>入手LG 27寸 4k 显示器，型号27UD68，要对自己的眼睛好一点。</strong></li><li style="list-style: none"><input type="checkbox"> <del>考驾照。</del><strong>木有考，木有车，深圳的驾校水太深，没人带，我放弃了(〒︿〒)</strong></li><li style="list-style: none"><input type="checkbox" checked> 多写博客。<strong>累计编写34篇博文，勉强完成。</strong></li><li style="list-style: none"><input type="checkbox" checked> 去丽江旅行一次。<strong>去台湾玩了一周，暂且算完成吧！</strong></li></ul><p>所以完成率是66.7%，也还行，不算很差吧，至少及格了，感觉有点自我安慰的味道。都说在本命年会很不顺，但是命运，运气这种事情，不能当真，随便想想就好了，努力才是最重要的，毕竟我是个不相信玄学的人。那回过头来，这一年到底干了些啥？</p><h1 id="你怎么胖了这么多"><a href="#你怎么胖了这么多" class="headerlink" title="你怎么胖了这么多"></a>你怎么胖了这么多</h1><p>今年年初的时候，我的体重超过了我的身高，达到了历史的最高90kg。当每个人看到你的第一眼的时候，第一句话都是：“你怎么胖了这么多~”，心里异常的难受。当我看到镜子里的这个臃肿的自己，真的心里非常的厌恶自己，那段时间，不想跟朋友和同学联系，就怕他们口中说出这句话。</p><p>过完年，就匆匆的来到了深圳，由于个人的职业规划，最后选择跳槽，于3月初加入了理德铭这个大家庭，由龙岗区搬到了龙华区。2016年那一年，不运动，饮食混乱，胡吃海喝，所以导致了体重暴增。在搬家到龙华那一天路上，自己跟自己说：<strong>新的地方，新的开始，开始减肥吧</strong>。</p><p>所以便开始迈出了第一步，第一个五公里的路程，足足花了40分钟的时间。</p><p align="center"><br>    <img src="http://image.leeyom.top/20171219151369859479151.png" width="50%" height="50%"><br></p><p>之后听从几个喜欢运动的同学的建议，由于体重基数的问题，防止膝盖损失，每隔一天跑一次，一周大概跑三到四次，每次至少5公里，为了督促自己，每天都将自己跑步的里程数截图发到微信群里面，让朋友们监督自己。饮食方面，主要以清淡为主，晚上主要以水果，面包，鸡蛋，粥等低热量食物为主，彻底杜绝了宵夜。就这样，过了三个月，明显的发现，以前的牛仔裤裤头大了好多，这也是初次的意识到确实运动减肥有成效了。</p><p>时间来到现在，现在跑五公里，也不觉得费力了，现在27分20秒可以跑完5公里，用了九个多月的时间，总跑步里程达到了600公里，减重了25斤。</p><p align="center"><br>    <img src="http://image.leeyom.top/20171220151369974791898.png" width="50%" height="50%"><br></p><p>希望一人独处的念头，始终不变地存于心中。所以每天坚持跑步，来确保只属于自己的沉默的时间，对我的精神健康来说，成了具有重要意义的功课。至少在跑步时不需要和任何人交流，不必听任何人说话，只需眺望周围的风光，凝视自己即可。这是任何东西都无法替代的宝贵时刻。到今天，自己内心也迫切的想要跟大家分享内心的喜悦。<strong>跑步于我，除了身体上的变化，更重要的是对生活态度的改变，也许从此刻开始，跑步已经成了生活的一部分。</strong></p><h1 id="一名锤粉的信仰"><a href="#一名锤粉的信仰" class="headerlink" title="一名锤粉的信仰"></a>一名锤粉的信仰</h1><p>5月初，老罗终于在微博宣布，2017年锤子科技春季新品发布会将在深圳深圳湾体育中心举行，对于广大的锤友来说是一个天大的好消息。自己也很幸运，一方面自己就在深圳工作，一方面抢到了一张票。哈哈～</p><p align="center"><br>    <img src="http://image.leeyom.top/20171221151386520632574.jpg" width="50%" height="50%"><br></p><br>发布会当晚，那种现场的气氛，让我真实感受到，这不是一个人座电脑面前看直播的孤单，而是一群来自五湖四海的锤友们大狂欢。那天晚上，有幸见证了坚果pro的诞生，发布会上老罗哽咽了。<br><p align="center"><br>    <img src="http://image.leeyom.top/20171221151386541663251.jpg"><br></p><blockquote><p>“我预感到我们后面会越走越顺，会卖疯了…..如果有一天我们后面卖了几百万台、几千万台……有一天傻X都在用我们的手机，你要知道这个其实……这是给你们做的。”</p></blockquote><p>我一直跟别人说，我最喜欢的两家科技公司是锤子和苹果，因为我觉得这两家公司是为数不多的在认真做产品的公司。作为一名理性的锤粉和果粉，注意是理性，秉承着实用主义，并不会去追求各种新品。老罗那种认真的做产品的态度，不是吹完牛逼抬屁股走人了，而是能够把自己的想法付诸行动，并且用心做到极致，我觉得是一众锤粉支持他的理由。那锤粉到底是怎样的一群人？用老罗自己的回答:</p><p></p><p align="center"><br>    <img src="http://image.leeyom.top/20171221151386545634805.jpg"><br></p><br>我很希望老罗能成功下去，因为如果他成功了，对和他有同样态度，同样信仰，同样价值观的理想主义者来说是莫大的鼓舞和激励。希望下次还在深圳开发布会，期待T3。<p></p><h1 id="宝岛台湾六日之行"><a href="#宝岛台湾六日之行" class="headerlink" title="宝岛台湾六日之行"></a>宝岛台湾六日之行</h1><p>七月份，很幸运，由于公司的旅游的福利，有幸去宝岛台湾游玩了6天。</p><p>第一天去了台湾最南端的小镇-垦丁老街，由于到了垦丁已经是下午了，所以大家觉得去垦丁的南湾海滩游泳。<br><img src="http://image.leeyom.top/20171222151394323314665.png" alt="垦丁"><br><img src="http://image.leeyom.top/20171222151394307457778.png" alt="南湾海滩"><br>到了晚上，那自然就是吃吃喝喝，那必须去垦丁夜市，一品卤味，原住民烤山猪肉，<br>QQ蛋奶，火烤牛肉等等。<br><img src="http://image.leeyom.top/20171222151394326932992.png" alt="QQ蛋奶"></p><p>第二天，进入高雄市，去了猫鼻头，鹅銮鼻灯塔。<br><img src="http://image.leeyom.top/20171222151394331336631.png" alt="鹅銮鼻灯塔"><br><img src="http://image.leeyom.top/20171222151394334737807.png" alt="猫鼻头"><br>晚上逛高雄夜市，一路吃吃吃。<br><img src="http://image.leeyom.top/20171222151394353132981.png" alt="高雄夜市"></p><p>第三天，前往座落于嘉义县阿里山的【达娜伊谷】，是邹族的聚落。达娜伊谷的壮观景色与周边山区形成了股淡雅幽静的气息。园区内设有餐厅，值得推赞的是老板的烤山猪肉，非常美味可口。园内还有原住民的表演秀，展现出原住民的热情欢迎。如果厌倦了忙碌的城市，可以来到充满自然味道的达娜伊谷自然生态公园，吸收一下森林所散发出来的新鲜空气，有助于消除堆积下来的压力哦！<br><img src="http://image.leeyom.top/20171222151394385973756.png" width="50%" height="50%"><br><img src="http://image.leeyom.top/20171222151394390226271.png" width="50%" height="50%"><br><img src="http://image.leeyom.top/20171222151394412495223.png" alt="20171222151394412495223.png"></p><p>第四天，那自然必须去日月潭，日月潭湖中间有座寺庙，叫玄光寺。玄光寺里有个老奶奶在卖茶叶蛋(老奶奶已经老了，都是他的孩子在卖)，就是鼎鼎大名的阿婆茶叶蛋。尝了几个，也就那样吧，毕竟我也是吃的起茶叶蛋的人了。哈哈～<br><img src="http://image.leeyom.top/20171222151394422192940.png" alt="20171222151394422192940.png"><br><img src="http://image.leeyom.top/20171222151394424131813.png" alt="20171222151394424131813.png"><br><img src="http://image.leeyom.top/20171222151394429579669.png" alt="20171222151394429579669.png"></p><p>第五天，来到台湾东部的九份老街，听说千与千寻的部分场景取景于此，所以可以看到很多店里都有千与千寻的手办玩偶，九份老街最出名的小吃那自然是赖阿婆九份芋圆，非常好吃。<br><img src="http://image.leeyom.top/2017122215139443979754.png" alt="2017122215139443979754.png"><br><img src="http://image.leeyom.top/2017122215139444744123.png" alt="2017122215139444744123.png"><br>下午乘车进入台湾最繁华的台北市，其中比较著名的地标就是101大楼了，登上89层观景台，台北市美景一览无余，美不胜收。<br><img src="http://image.leeyom.top/201712221513944603719.png" alt="201712221513944603719.png"><br>第六天，上午前往淡水老街，淡水鱼丸，鱼酥等小吃脍炙人口，下午就乘坐飞机返回深圳，6天的台湾行程就到此结束。<br>这6天中让我印象很深刻：</p><ul><li>台湾夜市的街道非常干净，居然找不到一个垃圾桶，游客自己的垃圾都要随身带走，或者给小吃店的老板们收集。</li><li>台湾的牛肉面和牛肉汤面是有区别的，牛肉汤面里面有实打实的牛肉，而牛肉面里面是没有牛肉的哦，商家在菜单中都会标明，后来听导游说这是台湾这边法律所规定的，反观国内，兰州牛肉拉面，咳咳～自己体会。</li><li>其他的，吃吃吃~</li></ul><p><strong>有机会还是出去走走吧~</strong>~</p><h1 id="首次进入开源世界"><a href="#首次进入开源世界" class="headerlink" title="首次进入开源世界"></a>首次进入开源世界</h1><p>在我还没有接触github之前，对于开源这个概念很笼统，简单一点的理解，就是人家的做好的东西，免费给你使用。当我开始了解git，知道github的存在的时候，才发现，原来github上有这么多的优秀的项目，而且开源项目的维护人都是默默无闻的进行维护。很多的时候，自己一直是拿来主义居多，参与的概率很小，正如玉伯大牛说的：<strong>在开源世界里，参与比主导更重要</strong>，而我却恰好丢失了这一块。所以我开始了在github上进行了分享，虽然现在写的东西没啥技术含量，star数量少的可怜，但是万一能帮到其他在跟我一样采坑的人，那也是不错的嘛。</p><p><img src="http://image.leeyom.top/20171222151394606957418.png" alt="20171222151394606957418.png"></p><h1 id="生活总有点不顺"><a href="#生活总有点不顺" class="headerlink" title="生活总有点不顺"></a>生活总有点不顺</h1><p>9月份中旬的时候，想往常一样接到我妈的电话，我以为又是让我帮她充话费，或者手机又哪里不不会操作了，然后像往常一样接通了电话。</p><p>“妈，有什么事情？”<br>“你爸回老家了。”<br>“回家干嘛，是回家办什么事嘛？”<br>“你爸生病了，需要回家做手术~”</p><p>当时我听到这个消息的时候，整个人都懵掉了，感觉心里很难受，在安慰我妈以后，我赶紧拨通了我爸的电话询问情况，然后打电话让在长沙的表姐带我爸去长沙湘雅医院检查。在经过几天煎熬的等待结果后，最终医生的结论是我爸得了疝气，只需要做一个小手术就行，没有什么大的问题，这样悬着的心落了下来。经过这么次事件，再次让我感受到，家人健康平安比什么都重要。父母年龄已经大了，我们也工作了，与父母相处的时间也越来越少，真的要珍惜和父母相处的时光，不要让他们担心，毕竟父母永远是最爱我们的人。</p><h1 id="跟过去的自己说再见"><a href="#跟过去的自己说再见" class="headerlink" title="跟过去的自己说再见"></a>跟过去的自己说再见</h1><p>新的一年也即将来临，还是跟往年一样，给自己定几个小目标：</p><ul><li>薪资涨涨涨~哈哈，这个够实在。</li><li>跑一次半马或者全马。</li><li>坚持运动，希望年底能看到腹肌。</li><li>亲自DIY一台主机。</li><li>github 开源项目star数量突破100。</li><li>看5本除技术以外的书籍。</li><li>参加一次公益活动。</li><li>入手期待了两年的Smartisan T3。</li></ul><p>最后用一句话总结2017年：</p><blockquote class="blockquote-center"><p> 妈妈说过，要往前走，就得先忘掉过去。我想，这就是跑的用意。<br><strong>《阿甘正传》</strong></p></blockquote><p><img src="http://image.leeyom.top/20171222151394824425317.png" alt="20171222151394824425317.png"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言碎语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker初探</title>
      <link href="/2017/12/14/docker-preliminary-study/"/>
      <url>/2017/12/14/docker-preliminary-study/</url>
      
        <content type="html"><![CDATA[<p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。最近准备着手搭建一套微服务框架，其中准备用Docker进行容器化部署，所以就补习下Docker方面的知识。</p><a id="more"></a><h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><p><a href="https://github.com/moby/moby" target="_blank" rel="noopener">Docker</a>目前在 github 上差不多四万六千多个 star，可见其火爆程度。那 Docker 到底是什么呢？Docker 是由 go 语言编写的，基于 Linux 内核，对进程进行封装隔离，属于属于操作系统层面的虚拟化技术。Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><h1 id="为什么要使用Docker"><a href="#为什么要使用Docker" class="headerlink" title="为什么要使用Docker"></a>为什么要使用Docker</h1><p>当我们使用微服务架构后，我们将原本一个系统，按照业务拆分成多个子系统，而这多个子系统，都是部署在独立的环境中，互相隔离。在没有Docker出现之前，我们是通过虚拟机的方式部署多个子系统，那样是非常的消耗计算机资源。而有了Docker，同样相同配置的计算机，我们可以部署更多的应用。并且Docker启动的速度非常的快，基本是秒级和毫秒级别的，而虚拟机启动的速度，大家想想就知道了。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Docker有三个比较重要的概念，分别是：</p><ol><li>容器（Container）</li><li>镜像（Image）</li><li>仓库（Repository）</li></ol><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><blockquote><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系 统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件 系统。<br>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文 件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 不包含任何动态数据，其内容在构建之后也不会被改变。</p></blockquote><p>我所理解的Docker镜像，就是一个小型的操作系统，只是这个操作系统没有我们日常使用的系统比如Windows这么庞大，他提供了应用运行的最小环境。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><blockquote><p>镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。<br>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p></blockquote><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><blockquote><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。<br>一个 Docker Registry 中可以包含多个仓库（Repository），每个仓库可以包含多个标签，每个标签对应一个镜像。<br>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p></blockquote><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>由于我使用的机器是mac，所以就以mac为例。</p><p>从<a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Docker官网</a>官网下载对应的dmg文件，然后打开将其拖到<code>Application</code>文件夹，中间会输入用户名密码，这样就安装完成了，貌似有点简单噢。</p><p align="center"><br>    <image src="http://image.leeyom.top/20171214151326247025319.jpg"><br></image></p><p>Docker这个LOGO还是蛮可爱的，一个海豚背上驮着一个集装箱。接下来点击Docker，运行Docker。运行终端，查看Docker是否启动，终端分别执行<code>docker --version</code>、<code>docker-compose --version</code>、<code>docker-machine --version</code>命令，若打印如下的内容，代表Docker是安装成功的。</p><p align="center"><br>    <image src="http://image.leeyom.top/20171214151326378432015.jpg"><br></image></p><p>尝试创建一个Nginx服务器，终端输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name webserver nginx</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a>，页面出现<code>Welcome to nginx!</code>，说明Docker在mac上是安装成功的。如果镜像拉取非常非常慢，请先尝试切换镜像源：<a href="#mirrorSpeed">镜像加速</a>。</p><p>要停止 Nginx 服务器并删除执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop webserver</span><br><span class="line">docker rm webserver</span><br></pre></td></tr></table></figure><h1 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h1><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a><span id="mirrorSpeed">镜像加速</span></h2><p>由于国内的网络问题，拉取镜像是非常慢，则需要配置国内的镜像加速，这里使用的是Docker官方提供的中国的镜像地址：<code>https://registry.docker-cn.com/</code>。mac系统，在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。验证是否启用了该镜像地址，终端输入：<code>docker info</code>，若看到如下内容，说明是配置成功的。</p><p align="center"><br>    <image src="http://image.leeyom.top/20171214151326501334897.png"><br></image></p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>获取镜像的命令是：<code>docker pull</code>，其命令格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><ul><li>Docker Registry 地址：地址格式一般是 &lt;域名/IP&gt;:[:端口号]。默认的地址是Docker Hub。</li><li>仓库名：即&lt;用户名&gt;/&lt;软件名&gt;，对于Docker Hub，如果不给出用户名，则默认是<code>library</code>，也就是官方镜像。</li></ul><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull ubuntu:16.04</span><br><span class="line">16.04: Pulling from library/ubuntu</span><br><span class="line">bf5d46315322: Pull complete</span><br><span class="line">9f13e0ac480c: Pull complete</span><br><span class="line">e8988b5b3097: Pull complete</span><br><span class="line">40af181810e7: Pull complete</span><br><span class="line">e6f7c7e5c03e: Pull complete</span><br><span class="line">Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><br><span class="line">Status: Downloaded newer image for ubuntu:16.04</span><br></pre></td></tr></table></figure><p>上面的命令没有给出Docker镜像仓库的地址，因此会从Docker Hub获取镜像。镜像名称为<code>ubuntu:16.04</code>，因此将会获取官方镜像 library/ubuntu 仓库中标签为 16.04 的镜像。</p><p>运行镜像里面的容器的命令是：<code>docker run</code>，比如在上面刚下载的ubuntu:16.04这个镜像里启动bash进行交互操作，执行如下的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm \</span><br><span class="line">ubuntu:16.04 \</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><p>使用命令<code>docker image ls</code>。</p><p align="center"><br>    <image src="http://image.leeyom.top/20171214151326684081409.png"><br></image></p><p>列表包含了仓库名、标签、镜像ID、创建时间、占用空间。</p><p>其他列出镜像的指令：</p><ul><li><code>docker image ls -a</code>：列出所有的镜像，包括中间镜像。</li><li><code>docker image ls nginx</code>：列出部分镜像，这里是列出nginx相关的镜像。</li></ul><h2 id="定制镜像"><a href="#定制镜像" class="headerlink" title="定制镜像"></a>定制镜像</h2><p>定制镜像有个重要的脚本：<code>Dockerfile</code>，这个脚本主要用来构建、定制镜像。下面用<code>Dockerfile</code>脚本来定制一个nginx镜像。</p><ol><li>创建一个目录：<code>mynginx</code></li><li>进入到该目录下面，在该目录下面创建一个文件名为<code>Dockerfile</code>的文件，终端输入命令：<code>touch Dockerfile</code></li><li><p>打开<code>Dockerfile</code>文件，添加如下的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><ul><li><code>FROM</code> 用于指定基础镜像。</li><li><code>RUN</code> 用于执行命令。</li></ul></li><li><p>开始构建镜像，在<code>Dockerfile</code>文件所在目录，也就是文件夹<code>mynginx</code>下面，终端执行：<code>docker build -t nginx:v2 .</code>，后面有个点，代表上下文路径。</p><ul><li>镜像构建命令：<code>docker build [选项] &lt;上下文路径/URL/-&gt;</code></li><li>这里我们指定镜像名称为<code>nginx:v2</code>，通过命令：<code>docker run -d -p 80:80 --name webserver nginx:v2</code>即可运行该镜像，访问<a href="http://localhost/，发现nginx默认启动的页面已经被修改。" target="_blank" rel="noopener">http://localhost/，发现nginx默认启动的页面已经被修改。</a></li></ul></li><li><p>Dockerfile指令</p><ul><li>COPY：复制文件。</li><li>ADD：更高级的复制指令，如果<code>源路径</code>为一个<code>tar</code>压缩文件的话，压缩格式为<code>gzip</code>，<code>bzip2</code>以及<code>xz</code>的情况下，<code>ADD</code>指令将会自动解压缩这个压缩文件到<code>目标路径</code>去。在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD 。</li><li>CMD：容器启动命令，指定容器启动程序及参数。</li><li>ENTRYPOINT：入口点</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac重装系统软件清单</title>
      <link href="/2017/11/30/life-mac-tools-collection/"/>
      <url>/2017/11/30/life-mac-tools-collection/</url>
      
        <content type="html"><![CDATA[<p>由于有严重的强迫症，系统用久了后，总想重装一下，不然总觉得心里少了点什么。自从系统升级到macOS 10.12后，很明显感觉到发热量大了，果然苹果公司老是喜欢修复机器过于流畅的bug，无奈只能重新安装OSX 10.11.6，将自己常用的软件进行总结，方便恢复软件安装。</p><a id="more"></a><h1 id="系统增强"><a href="#系统增强" class="headerlink" title="系统增强"></a>系统增强</h1><ul><li><strong>BetterZip</strong> : 解压工具</li><li><strong>CHM View</strong> : chm文档查看器</li><li><strong>Scroll Reverser</strong> : 控制鼠标滚轮反转</li><li><strong>SmoothScroll</strong> : 使鼠标滚轮变得丝滑顺畅</li><li><strong>Boom</strong> : 音效增强</li><li><strong>Bartender</strong> : 任务栏menu图标整理</li><li><strong>iStat Menus</strong> : 系统网速、cpu、内存监控工具</li><li><strong>Moom</strong> : 窗口分屏工具</li><li><strong>JD-GUI</strong> : Java反编译工具</li><li><strong>PDF Expert</strong> : 查看pdf</li><li><strong>Amphetamine</strong> : 防止mac休眠</li><li><strong>iHosts</strong> : 修改host文件</li><li><strong>WiFiSpoof</strong> : 修改电脑的mac地址</li><li><strong>远程桌面连接</strong> : mac电脑上远程连接windows</li><li><strong>iPic</strong> : 图床软件</li><li><strong>PicU</strong> : 开源图床软件，支持七牛云</li><li><strong>Giffox</strong>: gif录制</li><li><strong>Tooth Fairy</strong>: 快速连接AirPods</li><li><strong>TinyPNG4Mac</strong>: 图片压缩工具</li><li><strong>CleanMyMac</strong> : 清理mac电脑垃圾</li><li><strong>ShadowsocksX</strong> : 影梭，代理工具</li><li><strong>Path Finder</strong> : Finder增强版</li><li><strong>NTFS for mac</strong> : 访问windows格式的硬盘</li></ul><h1 id="影音播放"><a href="#影音播放" class="headerlink" title="影音播放"></a>影音播放</h1><ul><li><strong>网易云音乐</strong>: 音乐</li><li><strong>爱奇艺</strong>: 视频播放</li><li><strong>腾讯视频</strong>: 视频播放</li><li><strong>IINA</strong> : 开源视频播放器</li></ul><h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><ul><li><strong>百度网盘</strong></li><li><strong>搜狗输入法</strong></li><li><strong>迅雷</strong>：下载工具</li><li><strong>QQ</strong>：通讯工具</li><li><strong>微信</strong>：通讯工具</li><li><strong>HanderShaker</strong> : mac连接安卓手机</li><li><strong>TeamView</strong> : 桌面远程软件</li><li><strong>MacDown</strong> : 开源的markdown编辑器</li><li><strong>MWeb</strong>: markdown编辑器</li><li><strong>有道词典</strong>: 词典</li><li><strong>XMind</strong> : 思维导图软件</li><li><strong>Parallels Desktop</strong> : 虚拟机<ul><li>windows7虚拟机镜像备份</li><li>ubuntu虚拟机镜像备份</li></ul></li><li><strong>Foxmail</strong> : 邮箱客户端</li><li><strong>网易邮箱大师</strong>: 邮箱客户端</li><li><strong>office365</strong>: 文档办公<ul><li>Word</li><li>Execl</li><li>PPT</li><li>Onenote</li><li>Outlook</li></ul></li><li><strong>Captuocr</strong>: ocr软件</li></ul><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul><li><strong>FireFox</strong> : 浏览器</li><li><strong>Google Chrome</strong> : 浏览器</li><li><strong>IntelliJ IDEA</strong> : java开发IDE<ul><li>插件<ul><li>Alibaba Java Coding Guidelines</li><li>CamelCase</li><li>CodeGlance</li><li>GsonFormat</li><li>JRebel</li></ul></li></ul></li><li><strong>WebStorm</strong> : web开发工具<ul><li>插件备份<ul><li>CodeGlance</li></ul></li></ul></li><li><strong>DataGrip</strong> : 数据库管理软件<ul><li>插件备份<ul><li>CodeGlance</li></ul></li></ul></li><li><strong>SnailSVN</strong> : svn图形化管理工具</li><li><strong>SecureCRT</strong> : SSH远程连接工具</li><li><strong>SecureFX]</strong> : ftp工具</li><li><strong>Sublime Text</strong> : 文本编辑器<ul><li>插件备份<ul><li>CodeFormatter</li><li>ConvertToUTF8</li><li>SublimeAStyleFormatter</li><li>Codecs33</li></ul></li><li>主题备份<ul><li>soda-theme</li></ul></li></ul></li><li><strong>Beyond Compare</strong> : 文本比较工具</li><li><strong>Atom</strong> : 文本编辑器</li><li><strong>Postman</strong>: 接口测试工具</li><li><strong>SourceTree</strong> : git客户端工具</li><li><strong>rdm</strong> : redis可视化GUI界面</li><li><strong>eclipse</strong> : java开发IDE<ul><li>插件备份<ul><li>Darkest Dark</li><li>Subversion</li></ul></li></ul></li><li><strong>Star Order</strong> : github star项目管理工具</li><li><strong>Navicat Premium</strong> : 数据库连接管理工具</li><li><strong>MySQLWorkbench</strong> : mysql数据库管理工具</li><li><strong>iTerm2</strong> : 终端</li><li><strong>JDK</strong> : java开发工具包</li><li><strong>svn</strong> : 版本控制工具</li><li><strong>Tomcat</strong> : web容器</li><li><strong>maven</strong> : 项目依赖管理</li><li><strong>node.js</strong>: 让js运行在服务器端，稳定版<ul><li>安装cnpm</li><li>安装hexo<ul><li>hexo-deployer-git</li><li>hexo-generator-sitemap</li><li>hexo-git-backup</li></ul></li></ul></li><li><strong>git</strong>: 版本控制</li><li><strong>mysql</strong>: 安装数据库<ul><li>数据库数据备份</li></ul></li></ul><h1 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h1><ul><li><a href="http://xclient.info/" target="_blank" rel="noopener">精品mac应用分享</a></li><li><a href="http://mac-torrent-download.net/" target="_blank" rel="noopener">mac-torrent-download</a></li><li><a href="https://www.macappstore.net/" target="_blank" rel="noopener">macappstore.net</a></li><li><a href="https://www.waitsun.com/" target="_blank" rel="noopener">爱情守望者</a></li><li><a href="https://www.waerfa.com/" target="_blank" rel="noopener">MAC玩法儿</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux折腾笔记</title>
      <link href="/2017/11/12/linux-note/"/>
      <url>/2017/11/12/linux-note/</url>
      
        <content type="html"><![CDATA[<p>由于主要是做服务端开发，总会少不了和linux打交道，鉴于我老容易健忘的习惯，我决定还是专门用一篇文章来记录自己在使用linux的一些笔记，主要是哪天记不起来了，可以再翻出来看看，免得再花时间在网上找教程，主要使用的linux版本为centOS，Ubuntu这两个版本，如果有不对的地方，还希望大家指出。</p><a id="more"></a><h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><ul><li><code>MongoDB</code>是目前比较热门的非关系型数据库，传统的关系型数据库由：数据库（DataBase）、表（Table）、记录（Record）组成，而<code>MongoDB</code>则由：数据库（DataBase）、集合（Collection）、文档对象（Document）三个层次组成，但是这里的集合没有行和列的概念。</li><li>安装环境：<ul><li>CentOS7</li><li>MongoDB版本为：3.6.3</li><li>Version: <code>RHEL 7 Linux 64-bit X64</code></li></ul></li><li><p>下载源码包，并解压，重名为<code>mongodb</code>，我一般喜欢把软件都装在<code>/usr/local/develop-tools/</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下载源码包</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.3.tgz</span><br><span class="line"># 解压</span><br><span class="line">tar zxvf mongodb-linux-x86_64-rhel70-3.6.3.tgz</span><br><span class="line"># 删除解压后的源码包</span><br><span class="line">rm -f mongodb-linux-x86_64-rhel70-3.6.3.tgz</span><br><span class="line"># 重命名文件夹</span><br><span class="line">mv mongodb-linux-x86_64-rhel70-3.6.3 mongodb</span><br></pre></td></tr></table></figure></li><li><p>增加系统变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 编辑环境变量配置文件</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"># 加入如下配置</span><br><span class="line">export MONGODB_HOME=/usr/local/develop-tools/mongodb</span><br><span class="line">export PATH=$MONGODB_HOME/bin:$PATH</span><br><span class="line"># 刷新配置文件，使配置文件生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功，使用命令<code>mongod -v</code>，若出现如下内容，便说明安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2018-03-05T22:01:49.391+0800 D NETWORK  [main] fd limit hard:4096 soft:1024 max conn: 819</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] MongoDB starting : pid=14555 port=27017 dbpath=/data/db 64-bit host=centos-linux.shared</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] db version v3.6.3</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] git version: 9586e557d54ef70f9ca4b43c26892cd55257e1a5</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] allocator: tcmalloc</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] modules: none</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] build environment:</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten]     distmod: rhel70</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] options: &#123; systemLog: &#123; verbosity: 1 &#125; &#125;</span><br><span class="line">2018-03-05T22:01:49.396+0800 D -        [initandlisten] User Assertion: 29:Data directory /data/db not found. src/mongo/db/service_context_d.cpp 98</span><br><span class="line">2018-03-05T22:01:49.396+0800 I STORAGE  [initandlisten] exception in initAndListen: NonExistentPath: Data directory /data/db not found., terminating</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] now exiting</span><br><span class="line">2018-03-05T22:01:49.396+0800 I CONTROL  [initandlisten] shutting down with code:100</span><br></pre></td></tr></table></figure></li><li><p>创建数据库、日志存放目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库目录</span><br><span class="line">mkdir -p /usr/local/develop-tools/mongodb/data</span><br><span class="line"># 创建日志目录</span><br><span class="line">mkdir -p /usr/local/develop-tools/mongodb/log</span><br><span class="line"># 创建日志文件</span><br><span class="line">touch /usr/local/develop-tools/mongodb/log/mongodb.log</span><br></pre></td></tr></table></figure></li><li><p>创建全局配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 编辑配置文件</span><br><span class="line">vim /etc/mongodb.conf</span><br><span class="line"># 写入：数据库目录地址、端口号、日志文件路径等配置信息</span><br><span class="line">dbpath=/usr/local/develop-tools/mongodb/data</span><br><span class="line">logpath=/usr/local/develop-tools/mongodb/log/mongodb.log</span><br><span class="line">logappend=true</span><br><span class="line">port=27017</span><br><span class="line">fork=true</span><br></pre></td></tr></table></figure></li><li><p>先确认是否之前已经启动过<code>mongodb</code>，使用命令：<code>ps -ef | grep mongo</code>，如果已经启动该任务，先kill掉该进程。</p></li><li><p>通过配置文件启动<code>mongodb</code>，执行命令：<code>mongod -f /etc/mongodb.conf</code>，如出现如下信息，说明服务启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 17247</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure></li><li><p>进入MongoDB后台shell：<code>cd /usr/local/develop-tools/mongodb/bin/ &amp;&amp; ./mongo</code></p></li><li><p>创建一个超级管理员账号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 切换到管理员模式</span><br><span class="line">use admin</span><br><span class="line"># 创建超级管理员</span><br><span class="line">db.createUser(</span><br><span class="line">   &#123;</span><br><span class="line">     user: &quot;root&quot;,</span><br><span class="line">     pwd: &quot;root&quot;,</span><br><span class="line">     roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">   &#125;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure></li><li><p>创建一个数据库：<code>use hello_mongodb</code></p></li><li><p>创建普通用户，并指定权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">        user: &quot;leeyom&quot;,</span><br><span class="line">        pwd: &quot;root&quot;,</span><br><span class="line">        roles: [</span><br><span class="line">            &#123; role: &quot;dbAdmin&quot;, db: &quot;hello_mongodb&quot; &#125;,</span><br><span class="line">            &#123; role: &quot;readWrite&quot;, db: &quot;hello_mongodb&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp -m tcp --dport 27017 -j ACCEPT</span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></li><li><p>开启远程访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编辑全局配置文件</span><br><span class="line">vim /etc/mongodb.conf</span><br><span class="line"># 开启远程访问</span><br><span class="line">bind_ip = 0.0.0.0</span><br></pre></td></tr></table></figure></li><li><p>开启用户验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编辑全局配置文件</span><br><span class="line">vim /etc/mongodb.conf</span><br><span class="line"># 新增开启用户验证</span><br><span class="line">auth=true</span><br></pre></td></tr></table></figure><p>以上两个开启后，先重启下电脑，使配置生效，然后重新启动服务，下次进入mongod命令行，如果有授权用户格式为：<code>mongo 127.0.0.1:27017/admin -u 用户名 -p 用户密码</code></p></li><li><p>如何关闭<code>MongoDB</code>服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用超级管理员身份进入mongod命令行</span><br><span class="line">mongo 127.0.0.1:27017/admin -u root -p root</span><br><span class="line"># 切换到管理员模式</span><br><span class="line">use admin</span><br><span class="line"># 关闭mongodb服务</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></li><li><p>重新启动服务：<code>mongod -f /etc/mongodb.conf</code></p></li><li>若客户端GUI连接不到<code>mongodb</code>，首先先查看是否开启防火墙端口，其次看开启远程访问，一般是这两个问题引起的。</li><li>参考文章：<a href="https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/MongoDB-Install-And-Settings.md" target="_blank" rel="noopener">MongoDB 安装和配置</a></li><li>开始使用！</li></ul><h2 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h2><p>参见文章：<a href="http://www.leeyom.top/2016/12/22/tech-centos-fastDFS/">centOS上搭建FastDFS图片服务器教程</a></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>参见文章：<a href="http://www.leeyom.top/2016/12/08/tech-centOS-nginx/">在centOS上安装nginx教程</a></p><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><ul><li>系统环境为cetos7。</li><li>首先先安装<code>EPEL</code>源，执行命令：<ul><li><code>yum -y install epel-release</code></li></ul></li><li>由于<code>RabbitMQ</code>是由<code>erlang</code>语言开发的，所以还需要安装<code>erlang</code>依赖环境，命令如下：<ul><li><code>yum install erlang -y</code></li></ul></li><li>接下来就可以安装<code>RabbitMQ</code>，执行如下命令：<ul><li><code>yum install rabbitmq-server -y</code></li></ul></li><li>安装成功后，启动服务：<ul><li>先看下自己的主机名，执行命令：<code>hostname</code>，我的主机名是：<code>centos-linux.shared</code>。</li><li>先修改一下 host 文件：<code>vim /etc/hosts</code>，添加一行：<code>127.0.0.1 centos-linux.shared</code>。</li><li>启动：<code>service rabbitmq-server start</code>。</li><li>停止：<code>service rabbitmq-server stop</code>。</li><li>状态：<code>service rabbitmq-server status</code>。</li><li>重启：<code>service rabbitmq-server restart</code>。</li><li>自启：<code>chkconfig rabbitmq-server on</code>。</li></ul></li><li>配置：<ul><li>进入指定目录：<code>cd /etc/rabbitmq</code>。</li><li>编辑配置文件，开启用户远程访问：<code>vim rabbitmq.config</code>。<ul><li>将<code>%% {loopback_users, []},</code>（注意后面有一个逗号）更改为：<code>{loopback_users, []}</code>。</li></ul></li><li>开启 Web 界面管理：<code>rabbitmq-plugins enable rabbitmq_management</code>。<ul><li><code>epel</code>源安装的话，则是这样运行：<code>cd /usr/lib/rabbitmq/bin;./rabbitmq-plugins enable rabbitmq_management</code>。</li></ul></li><li>重启 <code>RabbitMQ</code> 服务：<code>service rabbitmq-server restart</code>。</li><li>开放防火墙端口：<ul><li><code>sudo iptables -I INPUT -p tcp -m tcp --dport 15672 -j ACCEPT</code></li><li><code>sudo iptables -I INPUT -p tcp -m tcp --dport 5672 -j ACCEPT</code></li><li><code>sudo service iptables save</code></li><li><code>sudo service iptables restart</code></li></ul></li></ul></li><li>浏览器访问：<code>http://ip地址:15672</code> 默认管理员账号：guest 默认管理员密码：guest，出现如下图，恭喜，安装成功！<ul><li><img src="http://image.leeyom.top/20180209151818165842106.png" alt="20180209151818165842106.png"></li></ul></li></ul><h2 id="卸载CentOS7自带的jdk"><a href="#卸载CentOS7自带的jdk" class="headerlink" title="卸载CentOS7自带的jdk"></a>卸载CentOS7自带的jdk</h2><p>CentOS7自带的是openjdk，而我们平常开发用的jdk是sunjdk，所以需要卸载掉它自带的jdk，整个过程如下：</p><ul><li><p>使用命令：<code>rpm -qa|grep java</code>，查询系统自带的jdk，查询的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos-linux ~]# rpm -qa|grep java</span><br><span class="line">java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br><span class="line">tzdata-java-2015g-1.el7.noarch</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br></pre></td></tr></table></figure></li><li><p>使用命令：<code>rpm -e --nodeps xxx</code>，xxx代表系统自带的jdk名，这个命令删除系统自带的jdk，这里需要注意的就是，卸载的是带<code>java</code>、<code>openjdk</code>关键字的包，其他的比方<code>tzdata-java-2015g-1.el7.noarch</code>是不能删除的，下面是完整的删除命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64  </span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64</span><br></pre></td></tr></table></figure></li><li><p>执行<code>java -version</code>命令，查看是否卸载成功，若找不到这个命令，说明是卸载成功了，否则卸载失败。</p></li></ul><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><ul><li>linux版本为centOS 6.7。</li><li>下载地址：<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a>，下载最新版本。</li><li>利用FTP上传工具，将源码包上传到<code>/usr/local/</code>目录。</li><li><p>将<code>redis-4.0.6.tar.gz</code>源码包解压，解压成功后，删除源码包，如果权限不够，需要加上<code>sudo</code>权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar xzf redis-4.0.6.tar.gz</span><br><span class="line">$ rm -f redis-4.0.6.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入到redis源码解压后的目录，然后开始编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd redis-4.0.6/</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></li><li><p>编译完成后，目录下会出现编译后的redis服务程序 <code>redis-server</code>,还有用于测试的客户端程序 <code>redis-cli</code>,两个程序位于安装目录 src 目录下。</p></li><li><p>进入到src目录下面，启动redis服务，注意此时redis还不能后台运行，按<code>ctrl+c</code>就会结束服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server</span><br></pre></td></tr></table></figure><p><img src="http://image.leeyom.top/blog/180124/cmb3jcC32F.png" alt="启动redis服务"></p></li><li><p>默认情况，Redis不是在后台运行，我们需要把redis放在后台运行，编辑redis的配置文件<code>redis.conf</code>，该配置文件路径在 <code>redis-4.0.6/</code> 目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim redis.conf</span><br><span class="line">将daemonize的值改为yes</span><br></pre></td></tr></table></figure></li><li><p>默认情况下，Redis默认的连接密码为null，但是为了安全我们需要设置一个密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim redis.conf</span><br><span class="line">将requirepass前面的注释去掉，然后设置密码，比如设置为root</span><br></pre></td></tr></table></figure></li><li><p>默认情况下 redis 服务只能本机访问，将 <code>redis.conf</code> 配置文件中的 <code>bind 127.0.0.1</code> 注释掉，不注释掉的话，只能本机访问，其他的IP将无法访问 reids。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line"># bind 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>启动redis后台服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/redis-4.0.6/src/redis-server /usr/local/redis-4.0.6/redis.conf</span><br></pre></td></tr></table></figure><p>打印如下内容，启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">$ Redis version=4.0.6, bits=64, commit=00000000, modified=0, pid=25640, just started</span><br><span class="line">$ Configuration loaded</span><br></pre></td></tr></table></figure><p>最好检测下redis进程是否已经启动，若出现redis-server等关键字，说明服务启动成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep redis</span><br></pre></td></tr></table></figure></li><li><p>设置 redis 开机启动：<br>首先将 <code>redis-4.0.6/utils</code> 目录下的 <code>redis_init_script</code> 脚本拷贝到 <code>/etc/init.d</code> 下修改名字为 redis ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp redis_init_script /etc/init.d/redis</span><br></pre></td></tr></table></figure><p>然后编辑刚刚拷贝的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/init.d/redis</span><br></pre></td></tr></table></figure><p>将一段注释加到文件的头部：<br><img src="http://image.leeyom.top/20180419152412426675410.png" alt="20180419152412426675410.png"><br>同时还要注意 redis 客户端和服务端的路径问题，改成你自己的即可：<br><img src="http://image.leeyom.top/20180419152412482277272.png" alt="20180419152412482277272.png"><br>接着拷贝 <code>redis.conf</code> 文件到 <code>/etc/redis</code> 目录下，并重命名为 <code>6379.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /etc/redis</span><br><span class="line">$ cp redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure><p>设置读写权限并设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /etc/init.d/redis</span><br><span class="line">$ chkconfig redis on</span><br></pre></td></tr></table></figure><p>这样，以后便可以开机自启动 redis 服务了。</p></li><li><p>停止Redis服务。<br>如果有启动过redis客户端，执行如下的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/redis-4.0.6/src/redis-cli shutdown</span><br></pre></td></tr></table></figure><p>或者直接暴力一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pkill redis-server</span><br></pre></td></tr></table></figure></li><li><p>这个就是整个redis安装的过程，以及需要注意的地方。</p></li></ul><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><ul><li>linux版本为Ubuntu 16.04。</li><li>去<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="noopener">http://pinyin.sogou.com/linux/</a>下载安装包。</li><li>添加源：<code>sudo add-apt-repository ppa:fcitx-team/nightly</code></li><li>然后更新：<code>sudo apt-get update</code></li><li>开始安装<code>fcitx</code><ul><li>执行命令：<code>sudo apt-get install fcitx</code></li><li>出现错误，执行：<code>sudo apt-get -f install</code></li><li>然后再次执行：<code>sudo apt-get install fcitx</code></li></ul></li><li>安装fcitx的配置工具：<code>sudo apt-get install fcitx-config-gtk</code></li><li>安装fcitx的table-all包：<code>sudo apt-get install fcitx-table-all</code></li><li>安装im-switch工具：<code>sudo apt-get install im-switch</code></li><li>进入到搜狗输入法安装包所在文件夹，执行：<code>sudo dpkg -i sougoupingyin_2.1.0.deb</code></li><li>最后注销，重启，系统设置–&gt;语言支持，将键盘输入法系统设置为fcitx。</li><li>搜索出fcitx配置，将sogou输入法设为默认即可。</li></ul><h2 id="Tomcat端口占用问题"><a href="#Tomcat端口占用问题" class="headerlink" title="Tomcat端口占用问题"></a>Tomcat端口占用问题</h2><ol><li><p>linux环境下解决tomcat 8080端口被占用的方法：</p><ul><li><p>先查看是否有tomcat在运行，执行命令：<code>ps -ef |grep tomcat</code>，若出现如下的内容，说明tomcat正在运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@1 ocalhost bin] # ps -ef |grep tomcat</span><br><span class="line">root 51379 10 Nov29 pts/0 OO:03: 03</span><br><span class="line">/usr/java/jdk1.8.0_121/bin/java-Djava.uti]; 1 oggi ng. Config. Fi le=/opt/tomcat /conf/ logging.</span><br><span class="line">Properties -Djava. Uti1. Logging. Manager=org. Apache. Ju1 i. Clas sLoaderLogManager-djdk. T1 s.</span><br><span class="line">EphemeralDHKeySi ze=2048-Djava. Protoco1. Handler. Pkgs=org. Apache. Catal in a.</span><br><span class="line">Webresources-classpath /opt/tomcat /bin/bootstrap.jar: /opt/tomcat /bin/tomcat-ju1 i.jar.-Dcata] ina.</span><br><span class="line">base=/opt/tomcat-Dcata lina.home=/opt/tomcat-Djava.iO.tmpdi r=/opt/ton cat/temp org. Apache. Cata</span><br><span class="line">lina. Startup. Bootstrap start root 71250118237 0 11: 39 pts/0 OO: OO:00 grep--color=autotomcat</span><br></pre></td></tr></table></figure></li><li><p>输入命令：<code>netstat -anp|grep 8080</code>，找到这个端口对应的进程(PID)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@loca1 host bin] # netstat -anp|grep 8080</span><br><span class="line">tcp6 0 0:::8080 LISTEN 51379/java</span><br></pre></td></tr></table></figure></li><li><p>杀死该进程：<code>kill -9 51379</code></p></li></ul></li><li><p>windows下解决tomcat 8080端口被占用的方法：</p><ul><li><p>输入命令：<code>netstat -aon|findstr &quot;8080&quot;</code>，找到了这个端口对应的进程(PID)，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C: \Users\lwang&gt; netstat -aon|findstr &quot;8080&quot;</span><br><span class="line"></span><br><span class="line">TCP O. O. O. O:8080 O. O. O. O:0 LISTENING 12956</span><br><span class="line"></span><br><span class="line">TCP  [::]:8080  [::]:0 LISTENING 12956</span><br></pre></td></tr></table></figure></li><li><p>查看什么应用占用了该端口，输入命令：<code>tasklist|findstr &quot;12956&quot;</code>，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C: \Users\lwang&gt; tasklist|findstr &quot;12956&quot;</span><br><span class="line"></span><br><span class="line">javaw. Exe 12956 Console 286,212 K</span><br></pre></td></tr></table></figure></li><li><p>杀死该进程，输入命令：<code>taskkill /pid 12956 /f</code>，如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C: \Users\lwang&gt; taskkill /pid 12956 /f</span><br><span class="line">成功：已终止 PID 为 12956 的进程。</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>ubuntu自带的主题感觉很丑，所以准备换个扁平化的主题-<code>Flatabulous</code>。安装步骤如下：</p><ul><li>安装Unity 图形化管理工具-<code>Unity Tweak Tool</code>，安装命令：<ul><li><code>sudo apt-get install unity-tweak-tool</code>。</li></ul></li><li>安装<code>Flatabulous</code>主题，并按顺序执行如下的命令：<ul><li><code>sudo add-apt-repository ppa:noobslab/themes</code></li><li><code>sudo apt-get update</code></li><li><code>sudo apt-get install flatabulous-theme</code></li></ul></li><li>安装该主题配套的图标，按顺序执行如下的命令：<ul><li><code>sudo add-apt-repository ppa:noobslab/icons</code></li><li><code>sudo apt-get update</code></li><li><code>sudo apt-get install ultra-flat-icons</code></li></ul></li></ul><p>安装完成后，打开<code>unity-tweak-tool</code>，修改主题和图标：</p><ul><li>点击<code>Theme</code>，选择<code>Flatabulous</code>。</li><li>点击<code>Icons</code>，选择<code>Ultra-flat</code>。</li><li>最后重启系统。</li></ul><p>最终效果图如下：</p><p align="center"><img src="http://og1m51u2s.bkt.clouddn.com/20171112151049907266113.png" width="80%" height="80%"></p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>基本步骤如下：</p><ul><li>linux版本为Ubuntu 16.04。</li><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载地址</a>。</li><li>安装版本为：<code>jdk-8u151-linux-x64.tar.gz</code>。</li><li>我习惯将软件安装到<code>/usr/local/develop-tools/</code>目录，方便管理，如果没有<code>develop-tools</code>目录，先创建该目录。</li><li>进入到源码包所在的文件夹，将源码包解压到<code>/usr/local/develop-tools/</code>目录下。<ul><li><code>sudo tar -zxvf jdk-8u151-linux-x64.tar.gz -C /usr/local/develop-tools/</code></li></ul></li><li><p>编辑全局环境变量：</p><ul><li>编辑配置文件：<code>sudo vim /etc/profile</code></li><li><p>在该文件的最尾巴，添加下面内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># JDK</span><br><span class="line">JAVA_HOME=/usr/local/develop-tools/jdk1.8.0_151</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JRE_HOME</span><br><span class="line">export PATH</span><br><span class="line">export CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>执行命令，刷新该配置：<code>source /etc/profile</code></p></li><li>检查JDK是否生效：<code>java -version</code></li></ul></li></ul><h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2><p>详情见：<a href="http://leeyom.top/2017/11/08/zookeeper-install/" target="_blank" rel="noopener">zookeeper安装教程</a>。</p><h2 id="VMware安装ubuntu问题"><a href="#VMware安装ubuntu问题" class="headerlink" title="VMware安装ubuntu问题"></a>VMware安装ubuntu问题</h2><h3 id="VMware-tools-无法安装问题"><a href="#VMware-tools-无法安装问题" class="headerlink" title="VMware tools 无法安装问题"></a>VMware tools 无法安装问题</h3><p>使用VMware Workstation安装Ubuntu 16.04，<code>安装VMware Tools</code>选项按钮为灰色，如果不安装<code>VMware Tools</code>，则会出现以下几个问题：</p><ul><li>物理机无法向直接向虚拟机复制和粘贴。</li><li>虚拟机的分辨率无法进行自动适配。</li></ul><p>解决方法：</p><ol><li>先关闭虚拟机。</li><li>点击<code>编辑虚拟机设置</code>，添加<code>CD/DVD</code>驱动器。</li><li>接下来，驱动器介质，选择<code>使用ISO映像(M)</code>。</li><li>选择ISO映像地址，这个ISO映像就是<code>VMware Workstation</code>安装根目录下面的那个<code>linux.iso</code>，别选错了！</li><li>点击确定后，然后重启Ubuntu虚拟机，这个时候，会在左侧的任务栏看到一个CD/DVD，点击打开，将<code>VMwareTools-9.9.2-2496486.tar.gz</code>源码包拷贝到桌面，并解压。</li><li>进入到解压后的文件夹内，执行<code>sudo ./vmware-install.pl</code>，安装VMware Tools。</li><li>中间会有一些询问项，一路回车即可。</li><li>安装完成后，重启系统即可。</li></ol><h3 id="Ubuntu登陆后花屏"><a href="#Ubuntu登陆后花屏" class="headerlink" title="Ubuntu登陆后花屏"></a>Ubuntu登陆后花屏</h3><p><strong>虚拟机 –&gt; 设置 –&gt; 显示器 –&gt;加速3D图形加速前面的勾去掉就可以了</strong>，降低显卡的的负担。</p><h3 id="显示器分辨率问题"><a href="#显示器分辨率问题" class="headerlink" title="显示器分辨率问题"></a>显示器分辨率问题</h3><p>ubuntu登录后报错：<code>could not apply the stored configuration for monitors</code>，意思是无法将存储的配置应用于当前的显示器。解决办法就是：</p><ul><li>终端执行<code>sudo rm -f ~/.config/monitors.xml</code>，移除掉之前的显示器配置文件即可，之后会自动生成当前分辨率分配置文件。</li></ul><h2 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h2><ul><li>linux版本为Ubuntu 16.04。</li></ul><p>为了在windows平台使用<code>SecureCRT</code>和<code>Xshell</code>等终端工具连接ubuntu等linux服务器，linux服务器需要安装<code>SSH</code>，执行如下的命令：</p><ul><li><code>sudo apt-get install openssh-server</code></li></ul><p>确认ssh server是否启动，执行如下命令：</p><ul><li><code>ps -e | grep ssh</code></li></ul><p>如果只有<code>ssh-agent</code>，那<code>ssh-server</code>还没有启动，需要执行<code>/etc/init.d/ssh start</code>，如果看到<code>sshd</code>那说明<code>ssh-server</code>已经启动了。</p><p><code>ssh-server</code>配置文件位于<code>/etc/ssh/sshd_config</code>，在这里可以定义SSH的服务端口，默认端口是<code>22</code>，你可以自己定义成其他端口号，如222。然后重启SSH服务：</p><ul><li><code>sudo /etc/init.d/ssh resart</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper安装教程</title>
      <link href="/2017/11/08/zookeeper-install/"/>
      <url>/2017/11/08/zookeeper-install/</url>
      
        <content type="html"><![CDATA[<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。本篇记录了在Ubuntu系统上安装ZooKeeper的教程。</p><a id="more"></a><h1 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h1><h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><table><thead><tr><th style="text-align:center">系统</th><th style="text-align:center">开发环境</th><th style="text-align:center">生产环境</th></tr></thead><tbody><tr><td style="text-align:center">Linux</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">Solaris</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">FreeBSD</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">Windows</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">MacOS</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr></tbody></table><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>ZooKeeper运行在java平台，需要<strong>JRE 1.6或者以上</strong>的版本。对于集群模式下的ZooKeeper部署，3个ZooKeeper服务进程是建议的最小进程数量。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li>下载地址：<a href="http://apache.forsale.plus/zookeeper/" target="_blank" rel="noopener">http://apache.forsale.plus/zookeeper/</a>。</li><li>我下载的版本是<code>zookeeper-3.4.10</code>，这个版本比较稳定。</li></ul><h1 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h1><p>ZooKeeper有三种安装方式，分别是单机模式、集群模式、伪集群模式。</p><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><p>将下载的<code>zookeeper-3.4.10.tar.gz</code>压缩包解压到<code>/home/leeyom/develop-tools/</code>，执行命令：</p><ul><li><code>sudo tar -zxvf zookeeper-3.4.10.tar.gz -C /home/leeyom/develop-tools/</code></li></ul><p>在<code>/etc/profile</code>文件中加入ZooKeeper的环境变量设置，具体的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ZooKeeper</span><br><span class="line">export ZOOKEEPER_HOME=/home/leeyom/develop-tools/zookeeper-3.4.10</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin:$ZOOKEEPER_HOME/conf</span><br></pre></td></tr></table></figure><p>ZooKeeper服务器包含在单个的jar文件中，安装此服务需要用户创建一个配置文档，对其进行设置。进入ZooKeeper配置文件目录<code>/home/leeyom/develop-tools/zookeeper-3.4.10/conf</code>，该目录下面有一个参考的配置文件<code>zoo_sample.cfg</code>，可供参考。在conf目录下创建我们自己的配置文件<code>zoo.cfg</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-logs</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><p>目录<code>/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-data/</code>和<code>/home/leeyom/develop-tools/zookeeper-3.4.10/zookeeper-logs/</code>默认是没有创建的，需要我们自己<strong>手动创建此目录</strong>，下面是每个参数的含义：</p><ul><li><strong>tickTime</strong>：基本的时间单元，以毫秒为单位，用他来指示心跳。</li><li><strong>dataDir</strong>：存储内存中数据库快照的位置，如果不设置参数，更新事务日志将被存储到默认位置。</li><li><strong>clientPort</strong>：监听客户端连接的端口。</li><li><strong>dataLogDir</strong> : 保存zookeeper日志路径，当此配置不存在时默认路径与dataDir一致。</li></ul><p>单机模式下需要注意：<strong>在这种配置方式下，是没有ZooKeeper副本，如果zookeeper服务器出现故障，zookeeper服务将会停止</strong>！。</p><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>为了获得可靠的zookeeper服务，我们应该在一个集群上部署zookeeper。只要集群上的大多数zookeeper服务启动了，那么总的zookeeper服务便是可用的。另外，最好使用奇数台服务器。如果zookeeper拥有5台服务器，那么在最多2台服务器出现故障后，整个服务还可以正常使用。</p><p>具体的安装其实跟单机模式下基本上差不多，不同之处在于每台机器上的<code>conf/zoo.cfg</code>配置文件的参数设置不同，可以参考其中一台的机器的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">server.1=zoo1:2888:3888</span><br><span class="line">server.2=zoo2:2888:3888</span><br><span class="line">server.3=zoo3:2888:3888</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure><p>在这个配置文件中，出现几个新的参数，其含义如下：</p><ul><li><strong>initLimit</strong>：此配置表示允许follower连接并同步到leader的初始化时间，它以tickTime的倍数来表示。当超过设置倍数的tickTime时间，则连接失败。</li><li><strong>syncLimit</strong>：Leader服务器与follower服务器之间信息同步允许的最大时间间隔，如果超过次间隔，默认follower服务器与leader服务器之间断开链接。</li><li><strong>maxClientCnxns</strong>：限制连接到zookeeper服务器客户端的数量。</li><li><strong>server.id=host:port:port</strong>：表示了不同的zookeeper服务器的自身标识，作为集群的一部分，每一台服务器应该知道其他服务器的信息。用户可以从<code>server.id=host:port:port</code>中读取到相关信息。在服务器的data(dataDir参数所指定的目录)下创建一个文件名为myid的文件，这个文件的内容只有一行，指定的是自身的id值。比如，服务器“1”应该在myid文件中写入“1”。这个id必须在集群环境中服务器标识中是唯一的，且大小在1～255之间。这一样配置中，zoo1代表第一台服务器的IP地址。第一个端口号（port）是从follower连接到leader机器的端口，第二个端口是用来进行leader选举时所用的端口。所以，在集群配置过程中有三个非常重要的端口：<strong>clientPort：2181、port:2888、port:3888</strong>。</li></ul><h2 id="伪集群模式"><a href="#伪集群模式" class="headerlink" title="伪集群模式"></a>伪集群模式</h2><p>伪集群模式就是在单机环境下模拟集群的Zookeeper服务。</p><p>在zookeeper集群配置文件中，clientPort参数用来设置客户端连接zookeeper服务器的端口。server.1=IP1:2888:3888中，IP1指的是Zookeeper服务器的IP地址，2888为组成zookeeper服务器之间的通信端口，3888为用来选举leader的端口。由于伪集群模式中，我们使用的是同一台服务器，也就是说，需要在单台机器上运行多个zookeeper实例，所以我们必须要保证多个zookeeper实例的配置文件的client端口不能冲突。</p><blockquote><p>server.A=B:C:D：其中A是一个数字，代表第几号服务器，B是服务器的ip地址，C表示服务器与群集中的“领导者”交换信息的端口；当领导者失效后，D表示用来执行选举时服务器相互通信的端口。所以说伪集群的模式下，每个zookeeper实例需要保证clientPort、C、D三个端口都要不同，否则zookeeper服务将启动报错。</p></blockquote><p>首先先将<code>zookeeper-3.4.10.tar.gz</code>分别解压到server1，server2，server3目录下，执行如下的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf zookeeper-3.4.10.tar.gz /home/leeyom/develop-tools/zookeeper_cluster/server1</span><br><span class="line">sudo tar -zxvf zookeeper-3.4.10.tar.gz /home/leeyom/develop-tools/zookeeper_cluster/server2</span><br><span class="line">sudo tar -zxvf zookeeper-3.4.10.tar.gz /home/leeyom/develop-tools/zookeeper_cluster/server3</span><br></pre></td></tr></table></figure><ul><li>在<code>server1</code>、<code>server2</code>、<code>server3</code>目录下先创建<code>data</code>和<code>dataLog</code>目录，然后在<code>server1/data/</code>目录下创建文件myid文件，并写入“1”，同样在<code>server2/data/</code>，目录下创建文件myid，并写入“2”，server3进行同样的操作。</li><li>然后分别在<code>server1/conf/</code>、<code>server2/conf/</code>、<code>server3/conf/</code>目录下创建<code>zoo.cfg</code>配置文件，三个配置文件如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Server 1</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper_cluster/server1/data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper_cluster/server1/dataLog</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1= 127.0.0.1:2888:3888</span><br><span class="line">server.2= 127.0.0.1:2889:3889</span><br><span class="line">server.3= 127.0.0.1:2890:3890</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Server 2</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper_cluster/server2/data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper_cluster/server2/dataLog</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1= 127.0.0.1:2888:3888</span><br><span class="line">server.2= 127.0.0.1:2889:3889</span><br><span class="line">server.3= 127.0.0.1:2890:3890</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Server 3</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/home/leeyom/develop-tools/zookeeper_cluster/server3/data</span><br><span class="line">dataLogDir=/home/leeyom/develop-tools/zookeeper_cluster/server3/dataLog</span><br><span class="line">clientPort=2183</span><br><span class="line">server.1= 127.0.0.1:2888:3888</span><br><span class="line">server.2= 127.0.0.1:2889:3889</span><br><span class="line">server.3= 127.0.0.1:2890:3890</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure><p>以上便是伪集群模式下的配置。</p><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><ol><li><p>单机模式：</p><ul><li>进入到zookeeper的安装目录下的<code>bin</code>目录下。</li><li>执行命令：<code>./zkServer.sh start</code></li><li><p>若出现如下的内容，不要以为就启动成功了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/leeyom/develop-tools/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><p>继续执行：<code>./zkServer.sh status</code>，查看启动状态，若出现如下内容，才说明zookeeper服务才是真的启动成功，否则都是启动失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/leeyom/develop-tools/zookeeper-3.4.10/bin/../conf zoo.cfg</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure></li></ul></li><li><p>集群模式下需要用户在每台 ZooKeeper 机器上运行单机模式下的命令，这里不再赘述。</p></li><li><p>在集群伪分布模式下，按先后顺序依次启动<code>Server1</code>、<code>Server2</code>、<code>Server3</code>。这里拿<code>Server1</code>示例。</p><ul><li>进入到<code>server1/bin</code>目录下。</li><li>执行<code>./zkServer.sh start</code>命令。</li><li>出现<code>Starting zookeeper ...STARTED</code>提示，说明服务启动成功。</li></ul></li><li><p>其他命令，需要进入到<code>zookeeper-3.4.10/bin</code>目录下，然后执行如下命令：</p><ul><li>查看ZK服务状态: <code>./zkServer.sh status</code></li><li>停止ZK服务：<code>./zkServer.sh stop</code></li><li>重启ZK服务：<code>./zkServer.sh restart</code></li><li>客户端连接：<code>./zkCli.sh</code></li><li>客户端退出：<code>quit</code></li></ul></li></ol><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>因为我实验的环境是ubuntu桌面版的linux系统，我是用普通账户登录的，我之前是将zookeeper安装到<code>/usr/local/develop-tools</code>文件夹下，然后执行命令：<code>sudo bash zkServer.sh start</code>启动服务。虽然说终端打印了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/develop-tools/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><p>我便以为服务启动了，其实是错误的，此时服务并没有启动，由于权限的问题，当我启动服务的时候，zookeeper在<code>/usr/local</code>目录下没有读写权限，所以导致服务启动失败。具体的解决办法是：</p><ul><li>方式一：<code>cd /usr/local/</code>目录下，执行chmod命令增加权限，然后再次启动。<ul><li><code>chmod a+xwr zookeeper-3.4.10/</code></li></ul></li><li>方式二：将zookeeper安装到<code>/home/leeyom/</code>目录下面，这样zookeeper不会出现读写权限的问题。</li></ul><p>所以我们在启动zookeeper服务的时候，最好要用<code>./zkServer.sh status</code>命令检查下zookeeper服务状态，确保zookeeper服务启动。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于前后端分离的思考和总结</title>
      <link href="/2017/11/04/fontend-backend-separation/"/>
      <url>/2017/11/04/fontend-backend-separation/</url>
      
        <content type="html"><![CDATA[<p>对目前的web来说，前后端分离已经变得越来越流行了，越来越多的企业/网站都开始往这个方向靠拢。那么，为什么要选择前后端分离呢？前后端分离对实际开发有什么好处呢?我之前一直对前后端分离的思想一直很模糊，最近恰好碰上公司的项目进行重构，也采用前后端分离。所以就根据自己在实际项目中的开发，总结自己对于前后端分离中遇到的一些疑惑。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先在此之前，我跟大多数人一样，心中有如下的疑问？</p><ol><li>什么是前后端分离？</li><li>前后端分离的意义大不大？</li><li>如何进行前后端分离？</li></ol><p>那么文章将围绕这三个疑问进行展开，当然文章的重点还是总结如何进行前后端分离。</p><h1 id="什么是前后端分离？"><a href="#什么是前后端分离？" class="headerlink" title="什么是前后端分离？"></a>什么是前后端分离？</h1><p>前后端分离：就是前后端只通过JSON进行交流，前端通过ajax请求后台，后台返回json格式的数据（当然json只是一种可选的格式，并不是唯一的）。前端可以通过Vue、Angular实现组件化，降低前后端的耦合程度。</p><h1 id="前后端分离的意义大不大？"><a href="#前后端分离的意义大不大？" class="headerlink" title="前后端分离的意义大不大？"></a>前后端分离的意义大不大？</h1><ol><li>如果系统的业务比较复杂，网站前端变化远比后端变化频繁，则意义大。</li><li>该网站尚处于原始开发模式，数据逻辑与表现逻辑混杂不清，则意义大。</li><li>该网站要适配多平台，需要对设备的兼容性有要求，则意义大。</li><li>该网站将业务拆分成微服务，则意义大。</li></ol><h1 id="如何进行前后端分离？"><a href="#如何进行前后端分离？" class="headerlink" title="如何进行前后端分离？"></a>如何进行前后端分离？</h1><p>那如何进行前后端分离，这里我只针对后台来讨论，因为现在主要负责后台的开发，那至于说前端如何请求数据，前端数据的缓存等等这个就不在这里讨论了。要想实现前后端解耦，后端必须遵守RESTful API的设计准则。RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论，至于具体什么是 RESTful API，可以参考阮一峰老师的博文：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，便会对RESTful API 有个大概的了解。那要搭建一个RESTful API的后台项目具体需要考虑哪些东西呢？我根据我自己的实际开发，总结了如下几个点：</p><ol><li><strong>统一响应结构。</strong></li><li><strong>前台请求规范。</strong></li><li><strong>API接口文档。</strong></li><li><strong>统一异常处理。</strong></li><li><strong>后台参数验证。</strong></li><li><strong>跨域请求处理。</strong></li><li><strong>请求鉴权机制。</strong></li></ol><p>接下来将逐一的对每个点进行总结。</p><h1 id="统一响应结构"><a href="#统一响应结构" class="headerlink" title="统一响应结构"></a>统一响应结构</h1><p>我们在开发之前，需要跟前后端约定好，每次ajax请求，后端都需要返回一个统一的数据格式。如果格式不统一，前端请求每次拿到的数据很乱，如果前端页面变化的比较频繁，那么后期维护的成本很大。下面就是一个json格式的响应结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data : &#123; <span class="comment">// 请求数据，对象或数组均可</span></span><br><span class="line">        user_id: <span class="number">123</span>,</span><br><span class="line">        user_name: <span class="string">"tutuge"</span>,</span><br><span class="line">        user_avatar_url: <span class="string">"http://tutuge.me/avatar.jpg"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    msg : <span class="string">"请求成功！"</span>, <span class="comment">// 请求状态描述，调试用</span></span><br><span class="line">    code: <span class="number">500</span>, <span class="comment">// 业务自定义状态码，比如500表示请求失败，200表示请求成功</span></span><br><span class="line">    extra : &#123; <span class="comment">// 全局附加数据，字段、内容不定，可能为null</span></span><br><span class="line">        type: <span class="number">1</span>,</span><br><span class="line">        desc: <span class="string">"签到成功！"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的java的实体类<code>ResultBean.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">"Request Success！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务自定义状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局附加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object etxra = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getEtxra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> etxra;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEtxra</span><span class="params">(Object etxra)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.etxra = etxra;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前台请求规范"><a href="#前台请求规范" class="headerlink" title="前台请求规范"></a>前台请求规范</h1><ul><li><p>后台的响应结构已经确定好，那么前端的请求是不是得规范一下呢，答案肯定是的！因为我们采用的是RESTful API设计原则，我们会严格按照约定来使用 HTTP method：</p><ul><li><code>GET</code>: 查询<ul><li>若查询参数在3个以下（包含3个），采用如下的请求方式：<code>http://localhost:8080/app/getUserList?age=12&amp;name=Jack&amp;sex=1</code>，将参数拼接到url后面，后台采用<code>@RequestParam</code>注解接收。</li><li>若查询参数在三个以上，后台采用domain实体接收封装的参数。</li></ul></li><li><code>POST</code>: 创建<ul><li>请求参数类型为body，也就是json对象，将对应的参数封装成一个类，然后后台使用<code>@RequestBody</code>注解将参数自动解析成该类的一个实例。</li></ul></li><li><code>PUT</code>: 修改<ul><li>第一个主键参数，他的请求url为：<code>http://localhost:8080/app/updateUser/{userId}</code>，采用<code>@PathVariable</code>注解接收。</li><li>第二个请求参数，类型为body，json对象，跟POST创建请求一样，只是该json对象只放修改的属性内容，采用<code>@RequestBody</code>注解接收。</li></ul></li><li><code>DELETE</code>: 删除<ul><li>请求url：<code>http://localhost:8080/app/deleteUser/{userId}</code></li><li>后台采用<code>@PathVariable</code>注解接收参数。</li></ul></li></ul></li><li><p>标准的RESTful API请求示例：<br><img src="http://image.leeyom.top/20180212151840890546246.png" alt="RESTful"></p></li><li><p>对于controller层规范问题，我觉得有如下几点可以考虑：</p><ul><li>controller里面的方法参数，尽量不要使用json，map去接收，因为map，json这种格式灵活，但是可读性差，如果放业务数据，每次阅读起来都比较困难，定义一个bean看着工作量多了，但代码清晰多了。</li><li>controller方法统一返回ResultBean。</li><li>ResultBean是controller专用的，其他层不能用。</li><li>不要把json、map这类数据往service层传。</li></ul></li></ul><h1 id="API接口文档"><a href="#API接口文档" class="headerlink" title="API接口文档"></a>API接口文档</h1><p>写后台的同学有没有这样的烦劳，每次写完相关的接口，都要写相关的接口文档，然后跟前端小伙伴进行联调，过程很是繁琐和费时间。那为了解决这些问题，Swagger2 就是一个很好的解决方案，它与 spring mvc 整合后，我们只需要少量的注解，它便可以自动的帮我们生成一份 RESTful API 文档，大大的减轻了劳动力。因为之前有写过一篇关于这个问题文章：<a href="http://leeyom.top/2017/09/23/tech-spring-mvc-swagger2/" target="_blank" rel="noopener">Spring MVC中使用Swagger2构建Restful API</a>，这里就不在重复叙述了。</p><h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><p>采用spring的AOP（面向切面编程），编写一个全局的异常处理切面类，统一处理所有的异常。定义一个类，然后用<code>@ControllerAdvice</code>注解将其标注即可，同时用<code>@ResponseBody</code>注解表示返回值可序列化为JSON字符串。代码如下(<code>ExceptionAspect.java</code>)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leeyom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(ExceptionAspect.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 400 - Bad Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(HttpMessageNotReadableException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleHttpMessageNotReadableException</span><span class="params">(HttpMessageNotReadableException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">400</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"Could not read json..."</span>);</span><br><span class="line">        log.error(<span class="string">"Could not read json..."</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 400 - Bad Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;MethodArgumentNotValidException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleValidationException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">400</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"参数检验异常！"</span>);</span><br><span class="line">        log.error(<span class="string">"参数检验异常！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 405 - Method Not Allowed。HttpRequestMethodNotSupportedException</span></span><br><span class="line"><span class="comment">     * 是ServletException的子类,需要Servlet API支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.METHOD_NOT_ALLOWED)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(HttpRequestMethodNotSupportedException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleHttpRequestMethodNotSupportedException</span><span class="params">(HttpRequestMethodNotSupportedException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">405</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"请求方法不支持！"</span>);</span><br><span class="line">        log.error(<span class="string">"请求方法不支持！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 415 - Unsupported Media Type。HttpMediaTypeNotSupportedException</span></span><br><span class="line"><span class="comment">     * 是ServletException的子类,需要Servlet API支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.UNSUPPORTED_MEDIA_TYPE)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;HttpMediaTypeNotSupportedException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleHttpMediaTypeNotSupportedException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">415</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"内容类型不支持！"</span>);</span><br><span class="line">        log.error(<span class="string">"内容类型不支持！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 401 - Internal Server Error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(TokenException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleTokenException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">401</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"Token已失效"</span>);</span><br><span class="line">        log.error(<span class="string">"Token已失效"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500 - Internal Server Error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">500</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"内部服务器错误！"</span>);</span><br><span class="line">        log.error(<span class="string">"内部服务器错误！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 400 - Bad Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ValidationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">handleValidationException</span><span class="params">(ValidationException e)</span> </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        resultBean.setCode(<span class="number">400</span>);</span><br><span class="line">        resultBean.setMsg(<span class="string">"参数验证失败！"</span>);</span><br><span class="line">        log.error(<span class="string">"参数验证失败！"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能让<code>@ControllerAdvice</code>注解生效，还需要在spring MVC的配置文件：<code>spring-mvc.xml</code>添加如下一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.artisan.*"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制器增强，使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就完成了全局的异常处理，一旦后台出现异常，就返回给前台指定的异常的JSON数据。前台开发人员看到此异常后，就应该立即反馈给后台开发人员。</p><h1 id="后台参数验证"><a href="#后台参数验证" class="headerlink" title="后台参数验证"></a>后台参数验证</h1><p>前台在请求之前也会进行参数验证，但是为了程序更加严谨，后台也需要进行参数验证，这样做的好处就是，可以防止<code>脏数据</code>的出现，过滤掉一些不符合要求的请求。打个比方吧，就比如新增一个用户，<code>username</code>不能为null，<code>password</code>长度大于6，假如说前端没有做判断，这个时候用户点击保存，后台没做参数验证，就将这个脏数据保存进数据库。</p><p>这里我们将采用<code>Hibernate Validator</code>框架去实现后台的参数校验。别看到这里有<code>hibernate</code>这个单词，其实跟<code>hibernate</code>这个orm框架一毛钱关系都没有，他们之间是没有任何的依赖关系的。在<code>pom.xml</code>中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hibernate Validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在spring的配置文件<code>applicationConext.xml</code>中装配参数验证器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hibernate Validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.MethodValidationPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在对应的controller的请求方法中，对需要验证的请求参数用<code>@Valid</code>进行标注，表示这个实体类的有些属性是需要进行参数验证的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"新增User"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultBean <span class="title">add</span><span class="params">(@ApiParam(value = <span class="string">"新增User实体"</span>, required = <span class="keyword">true</span>)</span> @RequestBody @Valid User user, BindingResult result) </span>&#123;</span><br><span class="line">        ResultBean resultBean = <span class="keyword">new</span> ResultBean();</span><br><span class="line">        StringBuilder errorMsg = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError error : list) &#123;</span><br><span class="line">                errorMsg = errorMsg.append(error.getCode()).append(<span class="string">"-"</span>).append(error.getDefaultMessage()).append(<span class="string">";"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.insert(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            resultBean.setCode(StatusCode.HTTP_FAILURE);</span><br><span class="line">            resultBean.setMsg(errorMsg.toString());</span><br><span class="line">            LOGGER.error(<span class="string">"新增User失败！参数信息：User = "</span> + user.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对应的<code>User.java</code>实体类中，需要使用<code>@NotEmpty</code>、<code>@Length</code>、<code>@Max</code>、<code>@Min</code>等这些注解去校验参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 主键</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"u_id"</span>)</span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">private</span> Integer uId;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"user_name"</span>)</span><br><span class="line">  <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 密码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotEmpty</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">  <span class="meta">@Length</span>(min = <span class="number">6</span>, message = <span class="string">"密码长度不能小于 6 位"</span>)</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生日</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 性别</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 年龄</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Max</span>(value = <span class="number">100</span>, message = <span class="string">"年龄不能大于 100 岁"</span>)</span><br><span class="line">  <span class="meta">@Min</span>(value = <span class="number">18</span>, message = <span class="string">"必须年满 18 岁！"</span>)</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若参数没有通过校验，将返回如下的提示信息：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"NotEmpty-姓名不能为空;Min-必须年满 18 岁！;Length-密码长度不能小于 6 位;"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"etxra"</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那当然是不止上面所说的检验注解，<code>Hibernate Validator</code>框架给我们提供了丰富的校验注解，常用的如下：</p><ul><li>Bean Validation 中内置的 constraint：<ul><li><strong>@Null</strong>：被注释的元素必须为 null</li><li><strong>@NotNull</strong>：被注释的元素必须不为 null</li><li><strong>@AssertTrue</strong>：被注释的元素必须为 true</li><li><strong>@AssertFalse</strong>：被注释的元素必须为 false</li><li><strong>@Min(value)</strong>：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li><strong>@Max(value)</strong>：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li><strong>@DecimalMin(value)</strong>：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li><strong>@DecimalMax(value)</strong>：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li><strong>@Size(max, min)</strong>：被注释的元素的大小必须在指定的范围内</li><li><strong>@Digits (integer, fraction)</strong>：被注释的元素必须是一个数字，其值必须在可接受的范围内</li><li><strong>@Past</strong>：被注释的元素必须是一个过去的日期</li><li><strong>@Future</strong>：被注释的元素必须是一个将来的日期</li><li><strong>@Pattern(value)</strong>：被注释的元素必须符合指定的正则表达式</li></ul></li><li>Hibernate Validator 附加的 constraint：<ul><li><strong>@Email</strong>：被注释的元素必须是电子邮箱地址</li><li><strong>@Length</strong>：被注释的字符串的大小必须在指定的范围内</li><li><strong>@NotEmpty</strong>：被注释的字符串的必须非空</li><li><strong>@Range</strong>：被注释的元素必须在合适的范围内</li></ul></li></ul><p>这样我们的项目就集成了<code>Bean Validation</code>特性，就可以使用这些注解要进行参数校验了。</p><h1 id="跨域请求处理"><a href="#跨域请求处理" class="headerlink" title="跨域请求处理"></a>跨域请求处理</h1><p>前端是纯静态的页面，通过ajax请求后台，但是我们知道，ajax存在一个问题就是不支持跨域访问的。也就是说，前后端两个应用必须在同一个域名下才能访问。那该怎么样才能解决这个问题呢？这里采用的是CORS（Cross Origin Resource Sharing）方案，翻译过来就是：<strong>跨域资源共享</strong>。CORS技术很简单，现在大多数的浏览器都已经支持了，只需后台将CORS相应头写入response对象中即可。</p><p>那后台就需要编写一个过滤器：<code>CorsFilter.java</code>，拦截所有的http请求，然后将CORS响应头写入到response对象中即可，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理跨域的过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leeyom Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(CorsFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String allowOrigin;</span><br><span class="line">    <span class="keyword">private</span> String allowMethods;</span><br><span class="line">    <span class="keyword">private</span> String allowCredentials;</span><br><span class="line">    <span class="keyword">private</span> String allowHeaders;</span><br><span class="line">    <span class="keyword">private</span> String exposeHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        allowOrigin = filterConfig.getInitParameter(<span class="string">"allowOrigin"</span>);</span><br><span class="line">        allowMethods = filterConfig.getInitParameter(<span class="string">"allowMethods"</span>);</span><br><span class="line">        allowCredentials = filterConfig.getInitParameter(<span class="string">"allowCredentials"</span>);</span><br><span class="line">        allowHeaders = filterConfig.getInitParameter(<span class="string">"allowHeaders"</span>);</span><br><span class="line">        exposeHeaders = filterConfig.getInitParameter(<span class="string">"exposeHeaders"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过CORS技术实现AJAX跨域访问, 只要将CORS响应头写入response对象中即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowOrigin)) &#123;</span><br><span class="line">            <span class="comment">//允许访问的客户端域名，例如：http://web.xxx.com，若为*，则表示从任意域都能访问，即不做任何限制；</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, allowOrigin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowMethods)) &#123;</span><br><span class="line">            <span class="comment">//允许访问的请求方式，多个用逗号分割，例如：GET,POST,PUT,DELETE,OPTIONS；</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, allowMethods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowCredentials)) &#123;</span><br><span class="line">            <span class="comment">//是否允许请求带有验证信息，若要获取客户端域下的cookie时，需要将其设置为true；</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, allowCredentials);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(allowHeaders)) &#123;</span><br><span class="line">            <span class="comment">//允许服务端访问的客户端请求头，多个请求头用逗号分割，例如：Content-Type,Access-Token,timestamp</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, allowHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNotEmpty(exposeHeaders)) &#123;</span><br><span class="line">            <span class="comment">//允许客户端访问的服务端响应头，多个响应头用逗号分割。</span></span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Expose-Headers"</span>, exposeHeaders);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>web.xml</code>中配置CorsFilter过滤器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过CORS技术实现AJAX跨域访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.artisan.common.filter.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowOrigin<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowMethods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,PUT,DELETE,OPTIONS<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowCredentials<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,Access-Token<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我们就解决了跨域的问题。</p><h1 id="请求鉴权机制"><a href="#请求鉴权机制" class="headerlink" title="请求鉴权机制"></a>请求鉴权机制</h1><p>由于http请求是无状态的，我们后端写好了API接口，然后发布出去，如果不做安全控制，谁都可以调用，这很明显是非常不安全的，所以我们需要采用JWT（Json web token）鉴权机制去保护我们的API接口安全，整个的思路如下：</p><ol><li>用户登陆后，服务器端使用 jjwt(当然也可以采用其他的方式，比如时间戳，签名url) 生成 Token ，保存在 Redis 中，以用户名作为 Key，同时将此token值返回给前端。</li><li>通过设置 Redis 键的 TTL 来实现 Token 自动过期。</li><li>前端将token值存到localStorage中，后面每次请求，都将次token放到header（请求头）中。</li><li><p>服务端通过在 Filter 中拦截请求判断 Token 是否有效，如果有效，则请求通过，无效，返回401，提示此token已经失效。</p></li><li><p>由于 Redis 是基于 Key-Value 进行存储，因此可以实现新的 Token 将覆盖旧的 Token ，保证一个用户在一个时间段只有一个可用 Token，但是如果有些系统允许当前用户可以多处登陆，则不需要处理这一步。</p></li><li>从头至尾，整个过程没有涉及cookie，所以CSRF或者XXS等相关的攻击 是不可能发生的。</li></ol><p>首先定义一个管理token的接口，<code>TokenManager.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对Token进行操作的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leeyom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年10月19日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TokenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个token关联上指定用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 指定用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TokenModel <span class="title">createToken</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查token是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(TokenModel model)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字符串中解析token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 加密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TokenModel <span class="title">getToken</span><span class="params">(String authentication)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 登录用户的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteToken</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一个用户在一个时间段只有一个可用 Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasToken</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其对应的接口实现类<code>RedisTokenManager.java</code>，对token进行增删改查操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenManager</span> <span class="keyword">implements</span> <span class="title">TokenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Long, String&gt; redis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedis</span><span class="params">(RedisTemplate&lt;Long, String&gt; redis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redis = redis;</span><br><span class="line">        <span class="comment">//泛型设置成Long后必须更改对应的序列化方案</span></span><br><span class="line">        redis.setKeySerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenModel <span class="title">createToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//uuid</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">//时间戳</span></span><br><span class="line">        String timestamp = SDF.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//token =&gt; userId_timestamp_uuid;</span></span><br><span class="line">        String token = userId + <span class="string">"_"</span> + timestamp + <span class="string">"_"</span> + uuid;</span><br><span class="line">        TokenModel model = <span class="keyword">new</span> TokenModel(userId, uuid, timestamp);</span><br><span class="line">        <span class="comment">//存储到redis并设置过期时间(有效期为2个小时)</span></span><br><span class="line">        redis.boundValueOps(userId).set(Base64Util.encodeData(token), Constants.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenModel <span class="title">getToken</span><span class="params">(String authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication == <span class="keyword">null</span> || authentication.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] param = authentication.split(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">if</span> (param.length != <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用userId和源token简单拼接成的token，可以增加加密措施</span></span><br><span class="line">        <span class="keyword">long</span> userId = Long.parseLong(param[<span class="number">0</span>]);</span><br><span class="line">        String timestamp = param[<span class="number">1</span>];</span><br><span class="line">        String uuid = param[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TokenModel(userId, uuid, timestamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkToken</span><span class="params">(TokenModel model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = redis.boundValueOps(model.getUserId()).get();</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> || !(Base64Util.decodeData(token)).equals(model.getToken())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果验证成功，说明此用户进行了一次有效操作，延长token的过期时间(2个小时)</span></span><br><span class="line">        redis.boundValueOps(model.getUserId()).expire(Constants.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (redis.hasKey(userId)) &#123;</span><br><span class="line">            redis.delete(userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        String token = redis.boundValueOps(userId).get();</span><br><span class="line">        <span class="keyword">return</span> StringUtils.notNull(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用spring的APO技术，编写一个切面类<code>SecurityAspect.java</code>，拦截所有Controller类的方法，并从请求头中获取token，最后对token有效性进行判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(SecurityAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TokenManager tokenManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(org.springframework.web.bind.annotation.RequestMapping)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从切点上获取目标方法</span></span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ====放行swagger相关的请求url，开发阶段打开，生产环境注释掉</span></span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = WebContextUtil.getRequest();</span><br><span class="line">        URL requestUrl = <span class="keyword">new</span> URL(request.getRequestURL().toString());</span><br><span class="line">        <span class="keyword">if</span> (requestUrl.getPath().contains(<span class="string">"configuration"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestUrl.getPath().contains(<span class="string">"swagger"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestUrl.getPath().contains(<span class="string">"api"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ====</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若目标方法忽略了安全性检查,则直接调用目标方法</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(IgnoreSecurity.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 request header 中获取当前 token</span></span><br><span class="line">        String authentication = request.getHeader(Constants.DEFAULT_TOKEN_NAME);</span><br><span class="line">        TokenModel tokenModel = tokenManager.getToken(Base64Util.decodeData(authentication));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 token 有效性(检查是否登录)</span></span><br><span class="line">        <span class="keyword">if</span> (!tokenManager.checkToken(tokenModel)) &#123;</span><br><span class="line">            String message = <span class="string">"token "</span> + Base64Util.decodeData(authentication) + <span class="string">" is invalid！！！"</span>;</span><br><span class="line">            LOGGER.debug(<span class="string">"message : "</span> + message);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenException(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用目标方法</span></span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要使SecurityAspect生效，则需要在SpringMVC配置文件中添加如下Spring 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支持Controller的AOP代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>最后还需要在<code>web.xml</code>中添加Access-Token。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>allowHeaders<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,Access-Token<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ok，这样我们的后端的API接口就有安全保障，这个只是鉴权，如果涉及到权限管理的话，还需要进行授权操作，这个以后有时间，再整理下，这里就不阐述了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上便是我自己在实际开发中对于前后端分离的一些思考，可能有些地方考虑的不够周全，但是也算是一个基础的RESTful API接口平台了，文章相关的示例代码我已经整理成了一个基本的项目，托管在github，大家可以自由下载，github地址：<a href="https://github.com/wangleeyom/code-artisan" target="_blank" rel="noopener">https://github.com/wangleeyom/code-artisan</a>，如果对你有帮助的话，就点个star，有疑惑的地方，就在文章下面评论吧，大家一起讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发工程师进阶书单</title>
      <link href="/2017/10/15/tech-java-book-list/"/>
      <url>/2017/10/15/tech-java-book-list/</url>
      
        <content type="html"><![CDATA[<p>在做了一年多的开发后，感觉自己一直在停留在只会用的水平，但是要深究到某项技术的核心原理，自己也答不上个所以然来。每个程序员都是从最简单的CRUD写起，但是简单的业务逻辑代码写多了的时候，就会让人陷入一个麻木的状态，会让人安于现状。如何才能脱离这个怪圈，让自己成为一名合格的程序员呢？书籍是人类最好的精神粮食，程序员除了写代码，也应该静下心来，多阅读些技术相关的书籍。这样可以帮助我们更深层次的理解某个知识点。下面我自己从网上收集到的一些Java开发的进阶书籍，均为高清的pdf文档，重点都是有书签目录的，方便可以定位查阅。文档我都上传到百度云，如果经济允许的话，可以购买纸质实体书支持原作者。</p><a id="more"></a><h1 id="书籍列表"><a href="#书籍列表" class="headerlink" title="书籍列表"></a>书籍列表</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ol><li><a href="https://pan.baidu.com/s/1c1653Ug" target="_blank" rel="noopener">Java多线程编程核心技术.pdf</a> ，提取密码：xxck</li><li><a href="https://pan.baidu.com/s/1dFxWjU5" target="_blank" rel="noopener">Java面试宝典2016版.pdf</a>，提取密码：31hp</li><li><a href="https://pan.baidu.com/s/1pKEW2x1" target="_blank" rel="noopener">Spring源码深度解析.pdf</a>，提取密码：aaa2</li><li><a href="https://pan.baidu.com/s/1bpljacJ" target="_blank" rel="noopener">深入理解Java虚拟机 JVM高级特性与最佳实践.pdf</a>，提取密码：8dwz</li><li><a href="https://pan.baidu.com/s/1c8RAMy" target="_blank" rel="noopener">java编程思想(第4版).pdf</a>，提取密码：rz4e</li><li><a href="https://pan.baidu.com/s/1boGaXll" target="_blank" rel="noopener">Java核心技术 卷1 基础知识.pdf</a>，提取密码：3x6k</li><li><a href="https://pan.baidu.com/s/1kVwyf3L" target="_blank" rel="noopener">Java核心技术 卷II 高级特性.pdf</a>，提取密码：ihhx</li><li><a href="https://pan.baidu.com/s/1bSUjRg" target="_blank" rel="noopener">大型网站系统与Java中间件实践.pdf</a>，提取密码：822j</li><li><a href="https://pan.baidu.com/s/1b47Fdk" target="_blank" rel="noopener">深入分析Java Web技术内幕修订版.pdf</a>，提取密码：cr1p</li><li><a href="https://pan.baidu.com/s/1miHuJl2" target="_blank" rel="noopener">大型网站技术架构：核心原理与案例分析.pdf</a>，提取密码：vsbt</li><li><a href="https://pan.baidu.com/s/1boHwNRh" target="_blank" rel="noopener">阿里巴巴Java开发手册（终极版）.pdf</a>，提取密码：f27n</li></ol><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ol><li><a href="https://pan.baidu.com/s/1jIos8a6" target="_blank" rel="noopener">高性能MySQL第3版.pdf</a>，提取密码：6kk2</li><li><a href="https://pan.baidu.com/s/1mhVrHm4" target="_blank" rel="noopener">MySQL必知必会.pdf</a>，提取密码：nphh</li></ol><h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><ul><li>安卓：<ul><li><a href="https://daimajia.com/" target="_blank" rel="noopener">代码家</a></li></ul></li><li>Java：<ul><li><a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序员DD</a></li><li><a href="https://hacpai.com/member/88250" target="_blank" rel="noopener">D大</a></li><li><a href="http://www.youmeek.com/" target="_blank" rel="noopener">YouMeek</a></li></ul></li><li>前端：<ul><li><a href="https://blog.jimmylv.info/" target="_blank" rel="noopener">吕立青的博客</a></li><li><a href="https://github.com/fouber/blog" target="_blank" rel="noopener">张云龙</a></li><li><a href="https://github.com/lifesinger/blog" target="_blank" rel="noopener">玉伯</a></li></ul></li></ul><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>文档收集于网络，如若侵犯到您的权益，请及时联系我删除。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC权限模型</title>
      <link href="/2017/09/27/tech-rbac-model/"/>
      <url>/2017/09/27/tech-rbac-model/</url>
      
        <content type="html"><![CDATA[<p>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。（如下图）</p><a id="more"></a><p><img src="https://i.imgur.com/BDUYwPp.jpg" alt="RBAC权限模型"></p><p>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。</p><p>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。（下图为用户组、用户与角色三者的关联关系）</p><p><img src="https://i.imgur.com/UPW1hAj.jpg" alt="引入用户组"></p><p>在应用系统中，权限表现成什么？对功能模块的操作，对上传文件的删改，菜单的访问，甚至页面上某个按钮、某个图片的可见性控制，都可属于权限的范畴。有些权限设计，会把功能操作作为一类，而把文件、菜单、页面元素等作为另一类，这样构成“用户-角色-权限-资源”的授权模型。而在做数据表建模时，可把功能操作和资源统一管理，也就是都直接与权限表进行关联，这样可能更具便捷性和易扩展性。（见下图）</p><p><img src="https://i.imgur.com/l951rjd.jpg" alt="权限分类"></p><p>请留意权限表中有一列“权限类型”，我们根据它的取值来区分是哪一类权限，如“MENU”表示菜单的访问权限、“OPERATION”表示功能模块的操作权限、“FILE”表示文件的修改权限、“ELEMENT”表示页面元素的可见性控制等。</p><p>这样设计的好处有二。其一，不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。其二，方便扩展，当系统要对新的东西进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</p><p>这里要注意的是，权限表与权限菜单关联表、权限菜单关联表与菜单表都是一对一的关系。（文件、页面权限点、功能操作等同理）。也就是每添加一个菜单，就得同时往这三个表中各插入一条记录。这样，可以不需要权限菜单关联表，让权限表与菜单表直接关联，此时，须在权限表中新增一列用来保存菜单的ID，权限表通过“权限类型”和这个ID来区分是种类型下的哪条记录。</p><p>到这里，RBAC权限模型的扩展模型的完整设计图如下：</p><p><img src="https://i.imgur.com/NoJhB1e.jpg" alt="RBAC权限模型扩展"></p><p>随着系统的日益庞大，为了方便管理，可引入角色组对角色进行分类管理，跟用户组不同，角色组不参与授权。例如：某电网系统的权限管理模块中，角色就是挂在区局下，而区局在这里可当作角色组，它不参于权限分配。另外，为方便上面各主表自身的管理与查找，可采用树型结构，如菜单树、功能树等，当然这些可不需要参于权限分配。</p><ul><li>原文地址：<a href="http://blog.csdn.net/painsonline/article/details/7183613/" target="_blank" rel="noopener">RBAC权限管理</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger注解总结</title>
      <link href="/2017/09/25/tech-swagger-annotation/"/>
      <url>/2017/09/25/tech-swagger-annotation/</url>
      
        <content type="html"><![CDATA[<p>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了前端渲染、先后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。前端和后端的唯一联系，变成了API接口，API文档变成了前后端开发人员联系的纽带，变得越来越重要，swagger就是一款让你更好的书写API文档的框架，本篇主要总结常用的swagger注解。</p><a id="more"></a><h1 id="快速预览"><a href="#快速预览" class="headerlink" title="快速预览"></a>快速预览</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><a href="#Api">@Api</a></td><td style="text-align:center">将当前注解所在的类作为 Swagger 资源</td></tr><tr><td style="text-align:center"><a href="#ApiImplicitParam">@ApiImplicitParam</a></td><td style="text-align:center">代表某个接口中的一个参数</td></tr><tr><td style="text-align:center"><a href="#ApiImplicitParams">@ApiImplicitParams</a></td><td style="text-align:center">代表某个接口中的多个参数，由多个ApiImplicitParam对象组成</td></tr><tr><td style="text-align:center"><a href="#ApiModel">@ApiModel</a></td><td style="text-align:center">为 Swagger 模型提供额外的信息</td></tr><tr><td style="text-align:center"><a href="#ApiModelProperty">@ApiModelProperty</a></td><td style="text-align:center">添加和使用模型属性数据</td></tr><tr><td style="text-align:center"><a href="#ApiOperation">@ApiOperation</a></td><td style="text-align:center">对特定操作路径的 http 方法进行描述</td></tr><tr><td style="text-align:center"><a href="#ApiParam">@ApiParam</a></td><td style="text-align:center">为操作参数添加其他元数据</td></tr><tr><td style="text-align:center"><a href="#ApiResponse">@ApiResponse</a></td><td style="text-align:center">描述一个操作可能的回应</td></tr><tr><td style="text-align:center"><a href="#ApiResponses">@ApiResponses</a></td><td style="text-align:center">描述一个操作的多个回应，由多个ApiResponse对象组成</td></tr><tr><td style="text-align:center"><a href="#Authorization">@Authorization</a></td><td style="text-align:center">声明要在资源或操作上使用的授权方案。</td></tr><tr><td style="text-align:center"><a href="#AuthorizationScope">@AuthorizationScope</a></td><td style="text-align:center">描述一个OAuth2的授权范围</td></tr><tr><td style="text-align:center"><a href="#ResponseHeader">@ResponseHeader</a></td><td style="text-align:center">表示可以作为响应的部分表头</td></tr></tbody></table><p>最新版本还增加了一些用于 Swagger 定义级别添加扩展和元数据的注释：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><a href="#SwaggerDefinition">@SwaggerDefinition</a></td><td style="text-align:center">定义级别属性将添加到生成的 Swagger定义中</td></tr><tr><td style="text-align:center"><a href="#Info">@Info</a></td><td style="text-align:center">一个 Swagger 定义通用的元数据</td></tr><tr><td style="text-align:center"><a href="#Contact">@Contact</a></td><td style="text-align:center">为一个 Swagger 定义添加联系人相关属性</td></tr><tr><td style="text-align:center"><a href="#License">@License</a></td><td style="text-align:center">为一个Swagger 定义添加许可证</td></tr><tr><td style="text-align:center"><a href="#Extension">@Extension</a></td><td style="text-align:center">添加带有包含属性的扩展</td></tr><tr><td style="text-align:center"><a href="#ExtensionProperty">@ExtensionProperty</a></td><td style="text-align:center">向扩展添加自定义属性</td></tr></tbody></table><h1 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a>注解详解</h1><h2 id="Api"><a href="#Api" class="headerlink" title="@Api"></a><a id="Api">@Api</a></h2><p>用来标记当前Controller类为swagger文档资源，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/CounterfeitSellerPurchaseAccount"</span>, description = <span class="string">"跟卖订单购买账号接口"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterfeitSellerPurchaseAccountHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性配置：</p><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:center">url的路径值</td></tr><tr><td style="text-align:center">tags</td><td style="text-align:center">如果设置这个值、value的值会被覆盖</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">对api资源的描述</td></tr><tr><td style="text-align:center">basePath</td><td style="text-align:center">基本路径可以不配置</td></tr><tr><td style="text-align:center">position</td><td style="text-align:center">如果配置多个Api 想改变显示的顺序位置</td></tr><tr><td style="text-align:center">produces</td><td style="text-align:center">For example, “application/json, application/xml”</td></tr><tr><td style="text-align:center">consumes</td><td style="text-align:center">For example, “application/json, application/xml”</td></tr><tr><td style="text-align:center">protocols</td><td style="text-align:center">Possible values: http, https, ws, wss.</td></tr><tr><td style="text-align:center">authorizations</td><td style="text-align:center">高级特性认证时配置</td></tr><tr><td style="text-align:center">hidden</td><td style="text-align:center">配置为true 将在文档中隐藏</td></tr></tbody></table><h2 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a><a id="ApiOperation">@ApiOperation</a></h2><p>该注解主要作用在方法上，对该方法进行描述，说明方法的作用，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"新增购买账号"</span>, notes = <span class="string">"根据purchaseAccount创建新的购买账户"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/addPurchaseAccount"</span>, method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPurchaseAccount</span><span class="params">(@ApiParam(value = <span class="string">"新增购买账号实体"</span>, required = <span class="keyword">true</span>)</span> @RequestBody CounterfeitSellerPurchaseAccount purchaseAccount, HttpServletRequest request) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性配置：</p><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">value</td><td style="text-align:center">url的路径值</td></tr><tr><td style="text-align:center">tags</td><td style="text-align:center">如果设置这个值、value的值会被覆盖</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">对api资源的描述</td></tr><tr><td style="text-align:center">basePath</td><td style="text-align:center">基本路径可以不配置</td></tr><tr><td style="text-align:center">position</td><td style="text-align:center">如果配置多个Api 想改变显示的顺序位置</td></tr><tr><td style="text-align:center">produces</td><td style="text-align:center">For example, “application/json, application/xml”</td></tr><tr><td style="text-align:center">consumes</td><td style="text-align:center">For example, “application/json, application/xml”</td></tr><tr><td style="text-align:center">protocols</td><td style="text-align:center">Possible values: http, https, ws, wss.</td></tr><tr><td style="text-align:center">authorizations</td><td style="text-align:center">高级特性认证时配置</td></tr><tr><td style="text-align:center">hidden</td><td style="text-align:center">配置为true 将在文档中隐藏</td></tr><tr><td style="text-align:center">response</td><td style="text-align:center">返回的对象</td></tr><tr><td style="text-align:center">responseContainer</td><td style="text-align:center">这些对象是有效的 “List”, “Set” or “Map”.，其他无效</td></tr><tr><td style="text-align:center">httpMethod</td><td style="text-align:center">“GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”</td></tr><tr><td style="text-align:center">code</td><td style="text-align:center">http的状态码 默认 200</td></tr><tr><td style="text-align:center">extensions</td><td style="text-align:center">扩展属性</td></tr></tbody></table><h2 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a><a id="ApiParam">@ApiParam</a></h2><p>该标签的主要作用是描述请求参数的属性，感觉它的作用跟<a href="#ApiImplicitParam">@ApiImplicitParam</a>有点类似，使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"新增购买账号"</span>, notes = <span class="string">"根据purchaseAccount创建新的购买账户"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/addPurchaseAccount"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addPurchaseAccount</span><span class="params">(@ApiParam(value = <span class="string">"新增购买账号实体"</span>, required = <span class="keyword">true</span>)</span> @RequestBody CounterfeitSellerPurchaseAccount purchaseAccount, HttpServletRequest request) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性配置：</p><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">属性名称</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">属性值</td></tr><tr><td style="text-align:center">defaultValue</td><td style="text-align:center">默认属性值</td></tr><tr><td style="text-align:center">allowableValues</td><td style="text-align:center">可以不配置</td></tr><tr><td style="text-align:center">required</td><td style="text-align:center">是否属性必填</td></tr><tr><td style="text-align:center">access</td><td style="text-align:center">不过多描述</td></tr><tr><td style="text-align:center">allowMultiple</td><td style="text-align:center">默认为false</td></tr><tr><td style="text-align:center">hidden</td><td style="text-align:center">隐藏该属性</td></tr><tr><td style="text-align:center">example</td><td style="text-align:center">举例子</td></tr></tbody></table><h2 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a><a id="ApiResponse">@ApiResponse</a></h2><p>响应设置，比如当前请求响应为400，则提示”Invalid Order”，使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/order"</span>, method = POST)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"Place an order for a pet"</span>, response = Order.class)</span><br><span class="line"><span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid Order"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">placeOrder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @ApiParam(value = <span class="string">"order placed for purchasing the pet"</span>, required = <span class="keyword">true</span>)</span> Order order) </span>&#123;</span><br><span class="line">    storeData.add(order);</span><br><span class="line">    <span class="keyword">return</span> ok(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>属性说明：</p><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">code</td><td style="text-align:center">http的状态码</td></tr><tr><td style="text-align:center">message</td><td style="text-align:center">描述</td></tr><tr><td style="text-align:center">response</td><td style="text-align:center">默认响应类 Void</td></tr><tr><td style="text-align:center">reference</td><td style="text-align:center">参考ApiOperation中配置</td></tr><tr><td style="text-align:center">responseHeaders</td><td style="text-align:center">参考 ResponseHeader 属性配置说明</td></tr><tr><td style="text-align:center">responseContainer</td><td style="text-align:center">参考ApiOperation中配置</td></tr></tbody></table><h2 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a><a id="ApiResponses">@ApiResponses</a></h2><p>设置一组响应集，使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/order"</span>, method = POST)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"Place an order for a pet"</span>, response = Order.class)</span><br><span class="line"><span class="meta">@ApiResponses</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid Order"</span>),</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code = <span class="number">500</span>, message = <span class="string">"Server Error"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">placeOrder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @ApiParam(value = <span class="string">"order placed for purchasing the pet"</span>, required = <span class="keyword">true</span>)</span> Order order) </span>&#123;</span><br><span class="line">    storeData.add(order);</span><br><span class="line">    <span class="keyword">return</span> ok(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a><a id="ApiImplicitParam">@ApiImplicitParam</a></h2><p>对方法的请求参数的描述，使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取购买账户详情"</span>, notes = <span class="string">"根据url的accountId来获取购买账户详情信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"accountId"</span>, value = <span class="string">"账户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"long"</span>, paramType = <span class="string">"path"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getPurchaseAccount/&#123;accountId&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CounterfeitSellerPurchaseAccount <span class="title">getPurchaseAccount</span><span class="params">(@PathVariable <span class="keyword">long</span> accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sellerPurchaseAccountService.getPurchaseAccountById(accountId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>属性说明：</p><ul><li>paramType：参数放在哪个地方<ul><li>header：请求参数的获取：@RequestHeader</li><li>query：请求参数的获取：@RequestParam</li><li>path：（用于restful接口）url后面跟着的请求参数的获取：@PathVariable</li><li>body：（不常用）</li><li>form：（不常用）</li></ul></li><li>name：参数名</li><li>dataType：参数类型，long，string，int</li><li>required：参数是否必须传</li><li>value：参数的意思</li><li>defaultValue：参数的默认值</li></ul><h2 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a><a id="ApiImplicitParams">@ApiImplicitParams</a></h2><p>这个注解自然就是说一组参数的使用说明，使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"获取购买账号列表"</span>, notes = <span class="string">"获取购买账号列表"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"limit"</span>, value = <span class="string">"分页参数"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"offset"</span>, value = <span class="string">"分页参数2"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"countryId"</span>, value = <span class="string">"国家id，查询参数，默认为null"</span>, required = <span class="keyword">false</span>, dataType = <span class="string">"int"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"query"</span>, name = <span class="string">"deliveryFullName"</span>, value = <span class="string">"账号名字，查询参数，默认为null"</span>, required = <span class="keyword">false</span>, dataType = <span class="string">"string"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getPurchaseAccountList"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPurchaseAccountList</span><span class="params">(@RequestParam(value = <span class="string">"countryId"</span>, required = <span class="keyword">false</span>)</span> Integer countryId, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"deliveryFullName"</span>, required = <span class="keyword">false</span>)</span> String deliveryFullName, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"limit"</span>)</span> Integer limit, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"offset"</span>)</span> Integer offset, HttpServletRequest request) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="@ResponseHeader"></a><a id="ResponseHeader">@ResponseHeader</a></h2><p>用于描述一个响应的请求头，使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>(value = &#123;</span><br><span class="line">      <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"Invalid ID supplied"</span>,</span><br><span class="line">                   responseHeaders = <span class="meta">@ResponseHeader</span>(name = <span class="string">"X-Rack-Cache"</span>, description = <span class="string">"Explains whether or not a cache was used"</span>, response = Boolean.class)),</span><br><span class="line">      <span class="meta">@ApiResponse</span>(code = <span class="number">404</span>, message = <span class="string">"Pet not found"</span>) &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Response <span class="title">getPetById</span><span class="params">(...)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a><a id="ApiModel">@ApiModel</a></h2><p>如果我么的请求参数是一个比较复杂的对象，比如 User 对象，就需要我们使用该属性对 User 对象进行描述，使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"User"</span>, description = <span class="string">"用户对象"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"姓名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"地址"</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"年龄"</span>,access = <span class="string">"hidden"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"性别"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户-传递复杂对象"</span>, notes=<span class="string">"传递复杂对象DTO，json格式传递数据"</span>,produces = <span class="string">"application/json"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users-3"</span>, method= RequestMethod.POST)</span><br><span class="line"><span class="comment">//json格式传递对象使用RequestBody注解</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">postUser3</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    users.put(user.getId(),user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a><a id="ApiModelProperty">@ApiModelProperty</a></h2><p>该注解用于描述复杂请求对象的属性，参考<a href="#ApiModel">@ApiModel</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC中使用Swagger2构建Restful API</title>
      <link href="/2017/09/23/tech-spring-mvc-swagger2/"/>
      <url>/2017/09/23/tech-spring-mvc-swagger2/</url>
      
        <content type="html"><![CDATA[<p>不知道写后台的同学有没有这样的烦劳，每次写完相关的接口，都要写相关的接口文档，然后跟前端小伙伴进行联调，过程很是繁琐和费时间。那为了解决这些问题，Swagger2 就是一个很好的解决方案，它与 spring mvc 整合后，我们只需要少量的注解，它便可以自动的帮我们生成一份 RESTful API 文档，大大的减轻了劳动力。</p><a id="more"></a><p>现在越来越多的项目开始进行前后端分离，那为了方便前后端进行通信，就需要一套 API 准则，RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论，至于具体什么是 RESTful API，可以参考阮一峰老师的博文：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，便会对RESTful API 有个大概的了解。下面整理下 Spring MVC 中整合 Swagger2，我这里的测试项目架构是 SSM ，如果是 Spring Boot 架构的项目，配置的时候注解稍微有点区别，在文章的代码中有注释。</p><h1 id="添加-maven-依赖"><a href="#添加-maven-依赖" class="headerlink" title="添加 maven 依赖"></a>添加 maven 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="新增Swagger配置类"><a href="#新增Swagger配置类" class="headerlink" title="新增Swagger配置类"></a>新增Swagger配置类</h1><p><strong>SwaggerConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Configuration 这里需要注意，如果项目架构是SSM，那就不要加这个注解，如果是 spring boot 架构类型的项目，就必须加上这个注解，让 spring 加载该配置。</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// spring boot 项目不需要添加此注解，SSM 项目需要加上此注解，否则将会报错。</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">buildDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(buildApiInfo())</span><br><span class="line">                .select().apis(RequestHandlerSelectors.basePackage(<span class="string">"com.leeyom.controller"</span>))<span class="comment">// controller路径。</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 API 文档标题、描述、作者等等相关信息。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">buildApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"XXX系统API接口文档"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://leeyom.top/"</span>)</span><br><span class="line">                .description(<span class="string">"Spring MVC中使用Swagger2构建Restful API"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"leeyom"</span>, <span class="string">"http://leeyom.top/"</span>, <span class="string">"leeyomwang@gmail.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再通过buildDocket函数创建Docket的Bean之后，buildApiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。 </p></blockquote><h1 id="配置spring-mvc-xml"><a href="#配置spring-mvc-xml" class="headerlink" title="配置spring-mvc.xml"></a>配置spring-mvc.xml</h1><p>装配 Swagger 配置文件的 bean，需要在 spring-mvc.xml 配置文件中添加如下一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.leeyom.common.util.SwaggerConfig"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用Swagger注解"><a href="#使用Swagger注解" class="headerlink" title="使用Swagger注解"></a>使用Swagger注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们在 <strong>controller</strong> 中通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p><ul><li><strong>@ApiOperation</strong>：给API增加说明。</li><li><strong>@ApiImplicitParam</strong>：给单个参数添加说明。</li><li><strong>@ApiImplicitParams</strong>：给多个参数添加说明。</li><li>更多swagger 注解参考<a href="http://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a>。</li></ul><h1 id="API文档访问"><a href="#API文档访问" class="headerlink" title="API文档访问"></a>API文档访问</h1><p>启动项目，然后访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/你的项目名/swagger-ui.html</a>，出现如下界面，说明则整合成功。<br><img src="http://s1.wailian.download/2017/10/31/restful-api.png" alt=""><br>那至此，spring mvc 整合 swagger 基本上就完毕了，有什么不懂的可以留言讨论~</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.csdn.net/u014231523/article/details/54411026" target="_blank" rel="noopener">SpringMVC集成springfox-swagger2构建restful API</a></li><li><a href="http://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a></li><li><a href="http://blog.didispace.com/springbootswagger2/" target="_blank" rel="noopener">Spring Boot中使用Swagger2构建强大的RESTful API文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 学习笔记</title>
      <link href="/2017/09/20/tech-spring-boot-note/"/>
      <url>/2017/09/20/tech-spring-boot-note/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域成为领导者。之前有写过spring boot的一些笔记，但是感觉写的很乱，所以重新整理了下，方便他人和自己查看。</p><a id="more"></a><p>由于这篇文章相关的代码和对应的笔记一并的存在github仓库上，懒得同时更新两边了，所以这里就只贴仓库项目地址：<a href="https://github.com/wangleeyom/spring-boot-learning" target="_blank" rel="noopener">spring-boot-learning</a>，那里有更详细的文章以及示例，欢迎大家留言讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 中 Integer 的缓存问题</title>
      <link href="/2017/09/09/tech-java-Integer-cache-problem/"/>
      <url>/2017/09/09/tech-java-Integer-cache-problem/</url>
      
        <content type="html"><![CDATA[<p>曾在微信群里跟同学讨论一道关于 java 包装类 Integer 的面试题, 这个道题目虽然看似很简单, 但是如果没有仔细研读过 jdk 源码的人, 是很容易答错的, 那肯定自然我也是答错了的, 所以才有了今天这篇文章.</p><a id="more"></a> <p>首先来看下这个题目, 问输出的结果是多少?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        Integer i1 = <span class="number">127</span>;    </span><br><span class="line">        Integer i2 = <span class="number">127</span>;    </span><br><span class="line">        System.out.println(i1 == i2);    </span><br><span class="line">            </span><br><span class="line">        Integer i3 = <span class="number">128</span>;    </span><br><span class="line">        Integer i4 = <span class="number">128</span>;    </span><br><span class="line">        System.out.println(i3 == i4);    </span><br><span class="line">        </span><br><span class="line">        Integer i5 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        Integer i6 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i5 == i6);</span><br><span class="line">        </span><br><span class="line">        Integer i7 = <span class="number">100</span>;</span><br><span class="line">        Integer i8 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i7 == i8);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i9 = <span class="number">100</span>;</span><br><span class="line">        Integer i10 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i9 == i10);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面逐条分析结果</p><h2 id="i1-i2-为-true"><a href="#i1-i2-为-true" class="headerlink" title="i1 == i2 为 true"></a>i1 == i2 为 true</h2><p>Integer i1 = 127 这种方式等价于<code>Integer i1 = Integer.valueOf(127).</code> 这里变涉及到Integer 缓存机制的问题, Integer 对于小数据(-128 ~ 127)是有缓存的, 在 jvm 初始化的时候, <strong>-128 ~ 127 之间的数据就已经被缓存到本地的内存当中去了. 这样初始化-128 ~ 127之间的数字, 便会直接从内存中读取, 而不需要再创建对象. 所以 i1 和 i2 实际上引用的是同一个内存地址,</strong> 那自然的结果也就是 true 了.</p><p>我们看 jdk 的源码, 查看<code>Integer.valueOf</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">           <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看到，在执行valueOf的时候，会先去检查内存中是否存在该数字，如果存在的话，就直接从内存中取出返回，如果不存在的话，就新建一个Integer对象.</p><p>其中该缓存数据的初始化代码在:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         <span class="comment">// high value may be configured by property</span></span><br><span class="line">         <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">         String integerCacheHighPropValue =</span><br><span class="line">             sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">         <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                 i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                 <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                 h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                 <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         high = h;</span><br><span class="line"></span><br><span class="line">         cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">         <span class="keyword">int</span> j = low;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">             cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">         <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="i3-i4-为-false"><a href="#i3-i4-为-false" class="headerlink" title="i3 == i4 为 false"></a>i3 == i4 为 false</h2><p>有了以上的解释我们已经知道, 128已经超乎了缓存数据范围, 所以会使用new新建个对象，那么i3和i4的内存地址就不一样了，结果就是false.</p><h2 id="i5-i6-为-false"><a href="#i5-i6-为-false" class="headerlink" title="i5 == i6 为 false"></a>i5 == i6 为 false</h2><p>i5和i6的内存地址不一样，==的左右操作数如果是对象的话，那么比较的是引用的地址，new产生的对象一定是新的内存地址, 两者引用地址不一样,所以为 false.</p><h2 id="i7-i8-为-false"><a href="#i7-i8-为-false" class="headerlink" title="i7 == i8 为 false"></a>i7 == i8 为 false</h2><p>i7是内存中的缓存数据, 有指定的内存地址, 而 i8是 new 出来的, 他指向的是新的内存地址, 二者之间指向的内存地址不一样, 所以结果为 false.</p><h2 id="i9-i10-为-true"><a href="#i9-i10-为-true" class="headerlink" title="i9 == i10 为 true"></a>i9 == i10 为 true</h2><p>Integer 是 int 的包装类, Integer 类型的数据在跟 int 类型的数据做比较的时候, 会自动进行拆箱变成 int, 这样一来就是两个 int 类型的数据比较, 所以自然结果就是 true.</p><h2 id="其他包装类有缓存机制吗"><a href="#其他包装类有缓存机制吗" class="headerlink" title="其他包装类有缓存机制吗?"></a>其他包装类有缓存机制吗?</h2><p>答案肯定是! 以下做个总结:</p><table><thead><tr><th style="text-align:center">包装类</th><th style="text-align:center">缓存范围</th></tr></thead><tbody><tr><td style="text-align:center">Boolean</td><td style="text-align:center">全部缓存</td></tr><tr><td style="text-align:center">Byte</td><td style="text-align:center">全部缓存</td></tr><tr><td style="text-align:center">Character</td><td style="text-align:center">&lt;= 127缓存</td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">-128 ~ 127缓存</td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">-128 ~ 127缓存</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">-128 ~ 127缓存</td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center">没有缓存</td></tr><tr><td style="text-align:center">Doulbe</td><td style="text-align:center">没有缓存</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的多模块 Spring MVC + Spring + Mybatis 项目的搭建</title>
      <link href="/2017/08/01/tech-maven-multi-module-ssm/"/>
      <url>/2017/08/01/tech-maven-multi-module-ssm/</url>
      
        <content type="html"><![CDATA[<p>我想大多数做java开发的同学对SSM框架的搭建已经都轻车熟路了，但是大家搭建的大多数是单模块的，网上也有非常多的例子，但是如何用maven去构建多module的ssm项目呢？下面来手把手的，利用IntelliJ IDEA搭建一次多module的ssm项目，给大家一个参考。</p><a id="more"></a><h1 id="为什么要搭建多模块的maven项目？"><a href="#为什么要搭建多模块的maven项目？" class="headerlink" title="为什么要搭建多模块的maven项目？"></a>为什么要搭建多模块的maven项目？</h1><p>首先抛出这么一个问题，我们为什么要搭建多模块的maven项目呢？以多模块的方式组织项目，其实也是maven一直倡导的。做开发的同学都知道的一个概念就是“低耦合，高内聚”，将项目划分多模块，可以极大的增大代码的重用性，防止随着项目的增大，pom文件越来越臃肿。</p><p>对于一般的java项目我们一般是这么分层的：</p><ul><li>dao层负责数据库的交互。</li><li>service层主要处理业务逻辑。</li><li>web层负责与客户端交互。</li><li>pojo层存放的是实体类。</li><li>common层存放我们常用的一些公用的工具类等。</li></ul><p>对应的，在一个项目中，我们会看到一些包名：</p><ul><li>com.leeyom.ssm.dao</li><li>com.leeyom.ssm.service</li><li>com.leeyom.ssm.web</li><li>com.leeyom.ssm.common</li><li>com.leeyom.ssm.pojo</li></ul><p>这样整个项目的框架就清晰了，但随着项目的进行，你可能会遇到如下问题：</p><ol><li>这个应用可能需要有一个前台和一个后台管理端，你发现大部分dao，一些service，和大部分util是在两个应用中均可用。</li><li>pom.xml中的依赖列表越来越长以重用的，但是，由于目前只有一个项目（WAR），你不得不新建一个项目依赖这个WAR，这变得非常的恶心，因为在Maven中配置对WAR的依赖远不如依赖JAR那样简单明了，而且你根本不需要<code>com.leeyom.ssm.web</code>。有人修改了dao，提交到svn并且不小心导致build失败了，你在编写service的代码，发现编译不过，只能等那人把dao修复了，你才能继续进行，很多人都在修改，到后来你根本就不清楚哪个依赖是谁需要的，渐渐的，很多不必要的依赖被引入。甚至出现了一个依赖有多个版本存在。</li><li>build整个项目的时间越来越长，尽管你只是一直在web层工作，但你不得不build整个项目。</li><li>某个模块，比如util，你只想让一些经验丰富的人来维护，可是，现在这种情况，每个开发者都能修改，这导致关键模块的代码质量不能达到你的要求。</li></ol><p>我们会发现，其实这里实际上没有遵守一个设计模式原则：“高内聚，低耦合”。虽然我们通过包名划分了层次，并且你还会说，这些包的依赖都是单向的，没有包的环依赖。这很好，但还不够，因为就构建层次来说，所有东西都被耦合在一起了。因此我们需要使用Maven划分模块。</p><blockquote><p>以上的讲解是参考：<a href="http://juvenshun.iteye.com/blog/305865" target="_blank" rel="noopener">Maven最佳实践：划分模块</a></p></blockquote><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><h2 id="项目整体目录"><a href="#项目整体目录" class="headerlink" title="项目整体目录"></a>项目整体目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ssm-demo</span><br><span class="line">├── ssm-common -- 公共模块，主要存放一些工具类</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-dao -- 存放mybatis相关的mapper接口</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-pojo -- 存放实体类</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-service -- 存放业务逻辑类</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：jar</span><br><span class="line">├── ssm-web -- 存放前台页面，客户端交互相关的controller</span><br><span class="line">|    ├── src</span><br><span class="line">|    ├── pom.xml -- 打包方式：war</span><br><span class="line">├── pom.xml --打包方式为pom，一些公用的依赖</span><br></pre></td></tr></table></figure><h2 id="各模块的依赖关系"><a href="#各模块的依赖关系" class="headerlink" title="各模块的依赖关系"></a>各模块的依赖关系</h2><p><img src="http://image.leeyom.top/20180211151831567174772.png" alt="20180211151831567174772.png"></p><h1 id="Maven多模块项目创建"><a href="#Maven多模块项目创建" class="headerlink" title="Maven多模块项目创建"></a>Maven多模块项目创建</h1><ul><li>先创建一个空的maven项目(ssm-demo)作为父级项目，创建成功后，<strong>删除掉src目录!</strong>，保留pom文件。<br><img src="http://og1m51u2s.bkt.clouddn.com/15016006142785.jpg" alt=""><br><img src="http://og1m51u2s.bkt.clouddn.com/15016007759468.jpg" alt=""><br><img src="http://og1m51u2s.bkt.clouddn.com/15016009256846.jpg" alt=""><br>在pom文件中添加公有的依赖，公有的依赖主要有：spring核心包、日志包、json包、apache工具包,点击查看完整的父级<a href="https://github.com/wangleeyom/ssm-demo/blob/master/pom.xml" target="_blank" rel="noopener">pom.xml</a>。</li><li><p>右击我们刚刚创建的父级项目<strong>ssm-demo</strong>，选择 <code>new --&gt; Module</code>,创建<code>ssm-common</code>模块。<br><img src="http://og1m51u2s.bkt.clouddn.com/15016011837649.jpg" alt=""><br>填写Artifactld<code>ssm-common</code>：<br><img src="http://og1m51u2s.bkt.clouddn.com/15016013559961.jpg" alt=""><br>点击Finish，就可以建好<code>ssm-common</code>模块。<br><img src="http://og1m51u2s.bkt.clouddn.com/15016014089277.jpg" alt=""><br>打开<code>ssm-common</code>的pom.xml文件，添加该模块的打包方式为jar，不需要依赖其他的模块，也不需要继承父级的依赖，所以需要删掉parent标签段，完整的如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--编译级别--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于该模块是共有的依赖的，也就是说其他的模块可能会用到，所以需要将他添加到父级pom的dependencies中去。</p></li><li>创建<code>ssm-pojo</code>模块，该模块主要存放实体类，不需要依赖其他的模块，处理方式和<code>ssm-common</code>大致相似。</li><li><p>创建<code>ssm-dao</code>模块，由于该模块需要跟数据库打交道，所以跟数据库相关的依赖，应该放到该模块的pom文件中，同时该模块依赖于<code>ssm-pojo</code>模块进行数据库实体映射，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加 ssm-pojo module依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis集成spring包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mysql数据库链接jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis分页插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--阿里巴巴德鲁伊数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>ssm-service</code>模块，该模块主要用于处理业务逻辑，需要依赖<code>ssm-dao</code>模块和数据库打交道，同时还需要在此处继承父级的依赖，实现事务管理，自动装配等等：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--编译级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加 ssm-dao module依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.ssm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>ssm-web</code>，该模块主要的作用是处理http请求，所以servlet、jsp、文件上传组件包相关的依赖写在该模块的pom文件中，该模块主要跟客户端打交道，该模块需要依赖于<code>ssm-service</code>模块，该模块集成了所有的依赖，为什么这么说，可以什么理解：</p><ul><li><code>ssm-web</code>依赖于<code>ssm-service</code>。</li><li><code>ssm-service</code> 继承了父级的pom，同时还依赖<code>ssm-dao</code>模块。</li><li><code>ssm-dao</code>模块依赖于<code>ssm-pojo</code>。</li><li>父级pom依赖<code>ssm-common</code>。</li></ul><p>这样一来，就不会出现循环依赖，而导致jar包非常的臃肿。</p></li></ul><h1 id="SSM框架的整合"><a href="#SSM框架的整合" class="headerlink" title="SSM框架的整合"></a>SSM框架的整合</h1><p>通过上面搭建maven好的maven多模块项目的骨架，现在就可以开始ssm项目的整合了，我的开发环境和所用的三大框架的版本如下：</p><ul><li>开发环境是：<ul><li>IntelliJ IDEA 2017.1</li><li>JDK 1.8.0_45</li><li>Tomcat 7</li><li>Maven 3.3.9</li><li>MySQL 5.7.16  </li></ul></li><li>三大框架版本：<ul><li>Spring 4.1.7.RELEASE</li><li>Spring MVC 4.1.7.RELEASE</li><li>MyBatis 3.3.0</li></ul></li><li>核心配置文件：</li></ul><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">所属目录</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">mybatis-config.xml</td><td style="text-align:center">ssm-web/src/main/resources/spring</td><td style="text-align:center">mybatis分页插件pagehelper配置文件</td></tr><tr><td style="text-align:center">spring-mvc.xml</td><td style="text-align:center">ssm-web/src/main/resources/spring</td><td style="text-align:center">配置spring mvc，比如配置视图解析器、文件上传、spring mvc 注解等等。</td></tr><tr><td style="text-align:center">spring-mybatis.xml</td><td style="text-align:center">ssm-web/src/main/resources/spring</td><td style="text-align:center">spring与mybatis的整合文件，数据源、自动扫描、事务管理等都是在这里配置。</td></tr><tr><td style="text-align:center">xxxMapper.xml</td><td style="text-align:center">ssm-web/src/main/resources/mapper</td><td style="text-align:center">这个就是通过<a href="https://github.com/wangleeyom/mybatis-generator" target="_blank" rel="noopener">mybatis-generator</a>自动生成的mapper数据库映射文件。</td></tr><tr><td style="text-align:center">jdbc.properties</td><td style="text-align:center">ssm-web/src/main/resources/</td><td style="text-align:center">这个不多说，配置数据库连接信息</td></tr><tr><td style="text-align:center">log4j.properties</td><td style="text-align:center">ssm-web/src/main/resources/</td><td style="text-align:center">日志配置文件，方便调试bug，打印日志，需要配置此项</td></tr></tbody></table><h2 id="Spring-与-mybatis-的整合"><a href="#Spring-与-mybatis-的整合" class="headerlink" title="Spring 与 mybatis 的整合"></a>Spring 与 mybatis 的整合</h2><p>所有的ssm整合配置项都是在<code>ssm-web</code>这个子模块下面进行配置，先来看一下<code>ssm-web</code>模块的目录结构：<br><img src="http://og1m51u2s.bkt.clouddn.com/15017651453821.jpg" alt=""></p><ul><li><p><strong>建立<code>jdbc.properties</code>数据库属性文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/ssm-demo?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><p>因为我们这边用的是阿里巴巴的<strong>德鲁伊数据库连接池</strong>，并不需要配置jdbc.driver，如果你用的是c3p0或者dbcp数据库连接池，是要配置jdbc.driver。</p></li><li><p><strong>创建<code>spring-mybatis.xml</code>核心配置文件</strong><br>该配置文件也是spring整合mybatis的核心配置文件，事务管理，数据源，自动扫描都是在这里配置，具体的详情，可以看配置文件里面的注释。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.leeyom"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用阿里巴巴的德鲁伊数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring和MyBatis整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:spring/mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.leeyom.dao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建<code>mybatis-config.xml</code>分页插件配置文件</strong><br>mybatis分页插件<code>PaheHelper</code>是一个非常好用的分页插件，也可以通过配置文件的形式整合到mybatis中，具体怎么使用可以参考我以前写的文章:<a href="http://www.leeyom.top/2016/12/05/tech-mybatis-pagehelper/">mybatis 分页插件PageHelper使用及总结。</a>具体的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建Log4j日志配</strong><br>为了方便查看控制台打印的日志，需要配置log4j日志配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#定义LOG输出级别</span><br><span class="line">log4j.rootLogger=INFO,Console,File  </span><br><span class="line">#定义日志输出目的地为控制台</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender  </span><br><span class="line">log4j.appender.Console.Target=System.out  </span><br><span class="line">#可以灵活地指定日志输出格式，下面一行是指定具体的格式</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n  </span><br><span class="line">#文件大小到达指定尺寸的时候产生一个新的文件</span><br><span class="line">log4j.appender.File=org.apache.log4j.RollingFileAppender  </span><br><span class="line">#指定输出目录</span><br><span class="line">log4j.appender.File.File=$&#123;catalina.home&#125;/logs/ssm.log</span><br><span class="line">#定义文件最大大小</span><br><span class="line">log4j.appender.File.MaxFileSize=<span class="number">10</span>MB  </span><br><span class="line">#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志</span><br><span class="line">log4j.appender.File.Threshold=ALL  </span><br><span class="line">log4j.appender.File.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.File.layout.ConversionPattern=[%p] [%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%c]%m%n</span><br></pre></td></tr></table></figure></li><li><p><strong>测试spring与mybatis的整合情况</strong></p><p>创建测试表<code>t_user</code>，表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`u_id`</span> <span class="built_in">int</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`u_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`u_password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`u_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>再往该表中随便插入两条条数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'leeyom'</span>, <span class="string">'root'</span>), (<span class="string">'2'</span>, <span class="string">'小明'</span>, <span class="string">'admin'</span>);</span><br></pre></td></tr></table></figure><p>利用<a href="https://github.com/wangleeyom/mybatis-generator" target="_blank" rel="noopener">mybatis-generator</a>生成<code>UserMapper.java</code>、<code>User.java</code>、<code>UserMapper.xml</code>等相关的文件。文件是生成了，但是得放到对的位置，<code>UserMapper.java</code>放到<code>ssm-dao</code>模块下面，因为该层主要跟数据库进行交互，所以，dao层的接口文件就是放在该模块下面。<code>User.java</code>放到<code>ssm-pojo</code>模块下面，该模块主要存放实体类的bean，而<code>UserMapper.xml</code>文件<br>则放在<code>ssm-web</code>模块的resources资源目录下面的<code>mapper</code>文件夹下面，放在此模块下面的原因是，该映射文件将打包一起部署到web服务器上面，如果放到<code>ssm-dao</code>模块，<code>ssm-dao</code>的打包方式是jar，到时候会出现引用到不该数据库映射文件。最后我们还需要在<code>ssm-service</code>模块创建接口类<code>UserService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.service.user;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.pojo.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现类<code>UserServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.service.user.impl;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.dao.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个的目录如下:<br><img src="http://og1m51u2s.bkt.clouddn.com/15017702169074.jpg" alt=""></p><p>下面进行测试，在<code>ssm-web</code>模块的的<code>test/java</code>目录下面，新建测试类<code>TestMybatis.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.leeyom.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.leeyom.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/spring-mybatis.xml"</span>);</span><br><span class="line">        userService = (UserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybtis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userService.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.getuName() + <span class="string">"------&gt;"</span> + user.getuPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果打印信息如下，说明是spring与mybatis整合成功</p><p><img src="http://og1m51u2s.bkt.clouddn.com/15017709844151.jpg" alt=""></p><p>那其实现在就有个问题，为什么<code>ssm-service</code>模块可以调用到<code>ssm-dao</code>模块呢？这就是我们之前说的，模块之间的依赖的关系，因为<code>ssm-service</code>的pom文件中有依赖到<code>ssm-dao</code>模块，所以在<code>ssm-service</code>模块可以调用到<code>ssm-dao</code>中的类，这也就验证了我们之前的各模块的依赖关系图。</p></li></ul><h2 id="整合Spring-mvc"><a href="#整合Spring-mvc" class="headerlink" title="整合Spring mvc"></a>整合Spring mvc</h2><p>spring 与 mybatis已经整合完毕，接下来Spring mvc的整合。<br><img src="http://og1m51u2s.bkt.clouddn.com/15017723644703.jpg" alt=""></p><ul><li><p><strong>创建spring-mvc.xml配置文件</strong></p><p>该配置文件的存放路径依旧是<code>ssm-web</code>模块的资源文件夹<code>resources/spring</code>下面，主要的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动装配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.leeyom.controller"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件大小最大值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启用该标签代表 spring mvc 不拦截css、js、jpg等相关的静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用spring mvc 注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置ssm-web模块下面的web.xml文件</strong><br>千万别忘记配置web.xml文件，否则的话，在实际的生产测试环境下，之前的整合都白费了，将不起作用，具体内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring和mybatis的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 防止Spring内存溢出监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在ssm-web模块的java文件夹下面创建<code>UserHandler.java</code>测试handler类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getUserById"</span>, method = &#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        Integer userId = StringUtils.notNull(request.getParameter(<span class="string">"userId"</span>)) ? Integer.parseInt(request.getParameter(<span class="string">"userId"</span>)) : <span class="number">1</span>;</span><br><span class="line">        User user = userService.getUserById(userId);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在ssm-web模块的WEB-INF文件夹下面创建test.jsp页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试spring mvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> hello world! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span> $&#123;user.uName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>经过以上的准备，我们现在就可以编译整个项目，编译的结果如下，就说明编译成功，否则就是编译失败。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/15017725961376.jpg" alt=""><br><img src="http://og1m51u2s.bkt.clouddn.com/15017726289381.jpg" alt=""></p></li><li><p>通过整个项目的编译，ssm-common，ssm-pojo，ssm-dao，ssm-service分别被达成jar，ssm-web被打包成war，最后我们就是要把war通过tomcat容器跑起来。<br><img src="http://og1m51u2s.bkt.clouddn.com/15017730044316.jpg" alt=""><br><img src="http://og1m51u2s.bkt.clouddn.com/15017730986546.jpg" alt=""></p></li><li><p>访问<a href="localhost:8089/ssm-demo/getUserById?userId=1" target="_blank" rel="noopener">localhost:8089/ssm-demo/getUserById?userId=1</a>，如果页面出现如下的熟悉界面，恭喜你，三大框架整合成功！！！<br><img src="http://og1m51u2s.bkt.clouddn.com/15017732128821.jpg" alt=""></p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此为止我们<strong>Maven的多模块 Spring MVC + Spring + Mybatis 项目的搭建</strong>就已经完成，后期就可以在此基础上添加更多的功能。写这篇文章的目的是看到很多的单模块的ssm项目的搭建，却很少看到多模块的ssm项目搭建，所以就在此抛砖迎玉，重新搭建了一番，中间如果有什么不懂的，或者我写的不对的，大家都可以讨论。如果你觉得有用，就帮忙点个star吧！<br>源码地址：<a href="https://github.com/wangleeyom/ssm-demo" target="_blank" rel="noopener">https://github.com/wangleeyom/ssm-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java消息中间件ActiveMQ学习笔记</title>
      <link href="/2017/07/23/tech-java-activemq-note/"/>
      <url>/2017/07/23/tech-java-activemq-note/</url>
      
        <content type="html"><![CDATA[<p>消息队列有两个基本的的用法，一个是作为服务内部的缓冲区，防流量高峰，也能达到异步处理的作用，一个是用于分布式系统，各个不同的进程(同一台机器或者不同机器)通过消息队列进行通信，最近闲着没事，就关于消息中间件ActiveMQ做了个简单的学习。</p><a id="more"></a><h2 id="什么是ActiveMQ？"><a href="#什么是ActiveMQ？" class="headerlink" title="什么是ActiveMQ？"></a>什么是ActiveMQ？</h2><ul><li>术语定义<ul><li>维基百科：<a href="https://zh.wikipedia.org/wiki/Apache_ActiveMQ" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Apache_ActiveMQ</a><blockquote><p>Apache ActiveMQ是Apache软件基金会所研发的开放源代码消息中间件；由于ActiveMQ是一个纯Java程序，因此只需要操作系统支持Java虚拟机，ActiveMQ便可运行。</p></blockquote></li><li>百度百科：<a href="https://baike.baidu.com/item/ActiveMQ/7889688?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/ActiveMQ/7889688?fr=aladdin</a><blockquote><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。</p><!-- more --></blockquote></li></ul></li><li>同类技术对比<ul><li><img src="/img/15007971416993.jpg" alt=""></li></ul></li><li>学习前提<ul><li>要有 Java 基础</li><li>要有 Java Web 基础</li><li>要有 Spring 基础</li></ul></li></ul><h2 id="为什么使用ActiveMQ-消息中间件-？"><a href="#为什么使用ActiveMQ-消息中间件-？" class="headerlink" title="为什么使用ActiveMQ(消息中间件)？"></a>为什么使用ActiveMQ(消息中间件)？</h2><p>我们都知道，应用程序之间的调用都是通过暴露接口形式的相互调用，但是如果业务越来越复杂，接口会越来越多，各个应用程序之间相互耦合，后期管理起来会非常的麻烦，如下图所示：<br><img src="/img/15007985608005.jpg" alt=""><br>这时候如果通过消息中间件的方法的话，只要在需要的时候把消息发送到消息中间件就可以，这时候<code>消息中间件</code>就成了嫁接各个系统之间的桥梁，如下图所示：<br><img src="/img/15007986805155.jpg" alt=""><br>那么从上面两张图片我们可以总结出：<code>通过消息中间件可以解耦服务调用！</code></p><h2 id="了解JMS规范"><a href="#了解JMS规范" class="headerlink" title="了解JMS规范"></a>了解JMS规范</h2><ul><li>术语定义<ul><li>JMS即 Java 消息服务（Java Message Service）应用程序接口，是一个 Java 平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数MOM提供商都对JMS提供支持。</li></ul></li><li>相关概念<ul><li>提供者：实现JMS规范的消息中间件服务器。</li><li>客户端：发送或者接受消息的客户端。</li><li>生产者/发布者：创建并发送消息的客户端。</li><li>消费者/订阅者：接受并处理消息的客户端。</li><li>消息：应用程序之间传递的数据内容。</li><li>消息模式：在客户端之间传递消息的方式，JMS中定义了主题和队列两种模式。</li></ul></li><li>JMS消息模式<ul><li><strong>队列模型</strong>：<ul><li>客户端包括生产者和消费者。</li><li>队列中的消息只能被一个消费者消费。</li><li>消费者可以随时的消费队列中的消息。</li><li>队列模型示意图<img src="/img/15007999134263.jpg" alt="队列模型示意图"></li></ul></li><li><strong>主题模型</strong>：<ul><li>客户端包括发布者和订阅者。</li><li>主题中的消息被所有的订阅者消费。</li><li>消费者不能消费订阅之前就发送到主题中的消息。</li><li>主题模型示意图<img src="/img/15008002971212.jpg" alt=""></li></ul></li></ul></li><li>JMS编码接口<ul><li><code>ConnectionFactory</code>用于创建连接到消息中间件的连接工厂。</li><li><code>Destination</code>指消息发布和接收的地点，包括主题和队列。</li><li><code>Connection</code>代表了应用程序和消息服务器之间的通信链路。</li><li><code>Session</code>代表一个单线程的上下文，用于发送和接收消息。</li><li><code>MessageConsumer</code>由会话创建，用于接收发送到目标的消息。</li><li><code>MessageProducer</code>由会话创建，用于发送消息到目标。</li><li><code>Message</code>是消费者和生产者之间传送的消息对象，消息头，一组消息属性，一个消息体。</li><li>编码接口关系示意图<img src="/img/15008010925844.jpg" alt=""></li></ul></li></ul><h2 id="安装ActiveMQ"><a href="#安装ActiveMQ" class="headerlink" title="安装ActiveMQ"></a>安装ActiveMQ</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>win10/OSX 10.11.6</li><li>JDK 1.8 (<strong>注意一点，ActiveMQ 5.15的版本需要JDK 的最低版本为1.8，否则将安装失败！！！</strong>)</li><li>ActiveMQ 5.15</li></ul><h3 id="win安装ActiveMQ"><a href="#win安装ActiveMQ" class="headerlink" title="win安装ActiveMQ"></a>win安装ActiveMQ</h3><ol><li>下载ActiveMQ安装包，地址：<a href="http://activemq.apache.org/activemq-5150-release.html" target="_blank" rel="noopener">http://activemq.apache.org/activemq-5150-release.html</a><br><img src="/img/15008015863809.jpg" alt=""></li><li>解压到本地目录，进入<code>C:\software\apache-activemq-5.15.0\bin\win64</code>下面，32位系统进入到win32目录下面。<img src="/img/15008025079668.jpg" alt=""></li><li>启动服务，鼠标右击<code>activemq.bat</code>，以管理员权限运行。这时候会弹出一个终端窗口，表示服务已经启动。关闭终端窗口，服务将会被停止。<strong>PS：如果一直无法启动ActiveMQ服务，请检查是否安装了JDK。</strong><img src="/img/15008035551025.jpg" alt=""></li><li>上面这种启动方式，一旦关闭终端窗口，服务讲会被停止，也可以采用注册服务的方式。鼠标右击以管理员权限运行<code>InstallService.bat</code>，然后右击我的电脑，点击管理，进入windows服务列表，启动ActiveMQ服务。这样ActiveMQ服务就会一直在后台运行。<img src="/img/15008039026918.jpg" alt=""></li><li>浏览器访问 <a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a>，如果看到如下页面，表示已经安装成功。<img src="/img/15008041048386.jpg" alt=""></li></ol><h3 id="Linux-mac安装ActiveMQ"><a href="#Linux-mac安装ActiveMQ" class="headerlink" title="Linux/mac安装ActiveMQ"></a>Linux/mac安装ActiveMQ</h3><ol><li>下载ActiveMQ安装包，地址：<a href="http://activemq.apache.org/activemq-5150-release.html" target="_blank" rel="noopener">http://activemq.apache.org/activemq-5150-release.html</a><br><img src="/img/15008044271116.jpg" alt=""></li><li>根据个人习惯，将源码解压到指定的目录，我的解压路径：<code>/usr/local/apache-activemq-5.15.0</code>。</li><li>打开终端，cd 到<code>/usr/local/apache-activemq-5.15.0/bin</code>目录下面，执行<code>./activemq start</code> 命令，启动 ActiveMQ服务。如果要停止服务，执行<code>./activemq stop</code>命令。</li><li>浏览器访问 <a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a>，如果看到如下页面，表示已经安装成功。<img src="/img/15008041048386.jpg" alt=""></li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h3><ol><li><p>创建一个maven项目，项目名为：jms-test，其中pom.xml文件中引入ActiveMQ的核心包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leeyom.jms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jms-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>jms-test Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>jms-test<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>项目结构</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── jms-test</span><br><span class="line">|    ├── java</span><br><span class="line">|    |   ├──com.leeyom.jms.queue <span class="comment">-- 队列模式</span></span><br><span class="line">|    |   |   ├── AppConsumer.java <span class="comment">-- 队列模式消费者</span></span><br><span class="line">|    |   |   ├── AppProducer.java <span class="comment">-- 队列模式生产者</span></span><br><span class="line">|    |   ├──com.leeyom.jms.topic <span class="comment">-- 主题模式</span></span><br><span class="line">|    |   |   ├── AppConsumer.java <span class="comment">-- 主题模式订阅者</span></span><br><span class="line">|    |   |   ├── AppProducer.java <span class="comment">-- 主题模式发布者</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="队列模式的消息演示"><a href="#队列模式的消息演示" class="headerlink" title="队列模式的消息演示"></a>队列模式的消息演示</h3><ol><li><p>创建一个生产者的类，<code>AppProducer.java</code>，用于发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.queue;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 生产者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:42</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String queueName = <span class="string">"queue-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createQueue(queueName);</span><br><span class="line">        <span class="comment">//6. 创建一个生产者</span></span><br><span class="line">        MessageProducer producer = session.createProducer(destination);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7. 创建一个消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"test"</span> + i);</span><br><span class="line">            <span class="comment">//8. 发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送消息："</span> + textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个消费者的类，<code>AppConsumer.java</code>，用于接收生产者发送的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.queue;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 队列模式消费者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:41</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String queueName = <span class="string">"queue-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createQueue(queueName);</span><br><span class="line">        <span class="comment">//6. 创建一个消费者</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7. 消费者接收消息</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收消息："</span> + textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行生产者类<code>AppProducer.java</code>，然后登陆ActiveMQ管理界面，我们会发现我们创建了100条消息。<img src="/img/15008072688122.jpg" alt=""></p></li><li>运行消费者类<code>AppConsumer.java</code>去接收刚刚生产者发送的100条消息。这里我们创建两个消费者实例，通过对比我们可以验证我们之前所说的<code>队列中的消息只能被一个消费者消费。</code>那我们创建两个消费者将平分接收那100条消息，每人各接收50条，并且不会出现重复的消息。<br><img src="/img/15008076847030.jpg" alt=""><br><img src="/img/15008077213162.jpg" alt=""></li></ol><h3 id="主题模式的消息演示"><a href="#主题模式的消息演示" class="headerlink" title="主题模式的消息演示"></a>主题模式的消息演示</h3><ol><li><p>创建一个发布者的类，<code>AppProducer.java</code>，用于发布消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.topic;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 主题模式发布者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:42</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName = <span class="string">"topic-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6. 创建一个发布者</span></span><br><span class="line">        MessageProducer producer = session.createProducer(destination);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7. 创建一个消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"test"</span> + i);</span><br><span class="line">            <span class="comment">//8. 发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送消息："</span> + textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个订阅者的类，<code>AppConsumer.java</code>，用于接收发布者发送的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leeyom.jms.topic;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 主题模式订阅者</span></span><br><span class="line"><span class="comment"> * author: leeyom</span></span><br><span class="line"><span class="comment"> * date: 2017-07-22 05:42</span></span><br><span class="line"><span class="comment"> * Copyright © 2017 by leeyom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">"tcp://192.168.31.190:61616"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName = <span class="string">"topic-test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//3. 启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4. 创建会话</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5. 创建目的</span></span><br><span class="line">        Destination destination = session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6. 创建一个订阅</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7. 订阅者接收消息</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"接收消息："</span> + textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行订阅者类<code>AppConsumer.java</code>去接收刚刚发布者发送的100条消息。这里我们创建两个订阅者实例，通过对比我们可以验证我们之前所说的JMS主题模型图，我们创建两个订阅者都接收到了100条的消息。<br><img src="/img/15008093093543.jpg" alt=""><br><img src="/img/15008093532999.jpg" alt=""></p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.imooc.com/learn/856" target="_blank" rel="noopener">慕课网Java消息中间件教学视频</a></li><li>项目源码地址：<a href="https://github.com/wangleeyom/demo-warehouse" target="_blank" rel="noopener">github</a>，喜欢就点个star吧😁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat关闭报内存溢出异解决方案</title>
      <link href="/2017/06/20/tech-shutdown-tomcat-oom-error/"/>
      <url>/2017/06/20/tech-shutdown-tomcat-oom-error/</url>
      
        <content type="html"><![CDATA[<p>在项目开发的时候，每次关闭Tomcat控制台都会报内存溢出的异常，因为是warning级别的警告，并且开发阶段也并不影响项目的运行，所以呢也就没有去在意。但是当把项目打包部署到Linux服务器上后，启动Tomcat，然后再停止，又出现内存溢出的情况，然后再启动，发现Tomcat启动再也无法启动，只能重启服务器，才意识到这个问题是比较严重的问题。通过查找一系列的资料，终于把这个问题解决了，所以记录一下这个问题解决过程，给以后可能会遇到这个问题的朋友一个解决方案。</p><a id="more"></a><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>JDK 1.8</li><li>Tomcat 8</li><li>MySQL 5.7</li><li>IDEA 2017.1</li></ul><h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><p>首先来看下我遇到的异常信息是什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">1</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">2</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">3</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">4</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">5</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">6</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">7</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">8</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">9</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [DefaultQuartzScheduler_Worker-<span class="number">10</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:<span class="number">519</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [Timer-<span class="number">0</span>] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> java.util.TimerThread.mainLoop(Timer.java:<span class="number">552</span>)</span><br><span class="line"> java.util.TimerThread.run(Timer.java:<span class="number">505</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#0] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:<span class="number">534</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:<span class="number">534</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread-#2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:<span class="number">534</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.catalina.loader.WebappClassLoaderBase clearReferencesThreads</span><br><span class="line">警告: The web application [LeadermentEnterpriseSystemV2] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.lang.Object.wait(Native Method)</span><br><span class="line"> java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class="number">143</span>)</span><br><span class="line"> com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:<span class="number">43</span>)</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol stop</span><br><span class="line">信息: Stopping ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol stop</span><br><span class="line">信息: Stopping ProtocolHandler [<span class="string">"ajp-nio-8009"</span>]</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol destroy</span><br><span class="line">信息: Destroying ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">六月 <span class="number">20</span>, <span class="number">2017</span> <span class="number">2</span>:<span class="number">16</span>:<span class="number">22</span> 下午 org.apache.coyote.AbstractProtocol destroy</span><br><span class="line">信息: Destroying ProtocolHandler [<span class="string">"ajp-nio-8009"</span>]</span><br></pre></td></tr></table></figure></p><h2 id="异常原因分析及解决方案"><a href="#异常原因分析及解决方案" class="headerlink" title="异常原因分析及解决方案"></a>异常原因分析及解决方案</h2><p>我总结了下，出现以上的异常主要有以下几个原因：</p><ol><li>mysql jdbc 未注销</li><li>shiro 权限框架会话验证调度器未关闭</li><li>c3p0连接池链接未关闭</li></ol><p>下面来逐一的分析下为什么会出现上面这样的情况：</p><h3 id="mysql-jdbc-未注销"><a href="#mysql-jdbc-未注销" class="headerlink" title="mysql jdbc 未注销"></a>mysql jdbc 未注销</h3><p>在<code>tomcat 6.0.24</code>版本之后，加入了一个<code>memory leak listener</code>(JreMemoryLeakPreventionListener，有兴趣可详细查去源码), 在tomcat stop、undeployed、reloaded的时候，他会检测当前应用的classloader，查看是否有引用泄露。<br>tomcat定义了一系列的引用泄露规则：</p><ul><li>threadlocal保持引用</li><li>线程池保持引用</li><li>驱动注册</li></ul><p>如有引用泄露，则提示错误，例如<code>his is very likely to create a memory leak</code>类似这样的错误。对于<code>The web application [LeadermentEnterpriseSystemV2] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</code>这种异常其实就是MySQL的JDBC驱动无法注销的原因所造成的。我在网上查找了很多的解决方案，其中比较权威的stackoverflow给出的解决方案邮两种：</p><ol><li><p>将MySQL的驱动放到Tomcat的lib目录下面，同时移除WEB-INF/lib目录下的MySQL 驱动，但是我实验了下，对于我现在这种情况并不生效。</p></li><li><p>创建一个 <code>ServletContextListener</code>,然后在 contextDestroyed 方法中手动注销。</p><p>这个方案中又分为两步：</p><ul><li>2.1 将MySQL JDBC驱动在pom.xml文件中更新成最新的版本(5.1.42)。</li><li>2.2 新建 JdbcDriverListener.java 文件，具体内容如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDriverListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(UserAccountsHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解决Tomcat mysql 驱动内存泄漏，手动注销JDBC</span></span><br><span class="line">        Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();</span><br><span class="line">        Driver d = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (drivers.hasMoreElements()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                d = drivers.nextElement();</span><br><span class="line">                DriverManager.deregisterDriver(d);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AbandonedConnectionCleanupThread.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>不要忘记在web.xml文件中注册该监听器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.leaderment.common.listener.JdbcDriverListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样的话就可以解决MySQL驱动无法注销的问题。</p><h3 id="shiro-权限框架会话验证调度器未关闭"><a href="#shiro-权限框架会话验证调度器未关闭" class="headerlink" title="shiro 权限框架会话验证调度器未关闭"></a>shiro 权限框架会话验证调度器未关闭</h3><p>这个问题是应为shiro权限框架里有用到quartz，所以会出现<code>appears to have started a thread named [DefaultQuartzScheduler_Worker-1]</code>等异常。我的解决办法就是将shiro的配置文件中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionValidationScheduler"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionValidationInterval"</span> <span class="attr">value</span>=<span class="string">"1800000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionManager"</span> <span class="attr">ref</span>=<span class="string">"sessionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码给注释掉，自己重新写了个过滤器，去判定session是否过期，而不采用shiro的会话验证器，所以该问题也就这样被解决。</p><h3 id="c3p0连接池链接未关闭"><a href="#c3p0连接池链接未关闭" class="headerlink" title="c3p0连接池链接未关闭"></a>c3p0连接池链接未关闭</h3><p>修改applicationContext.xml文件，添加属性 <code>destroy-method=&quot;close&quot;</code>，即可解决数据库连接未关闭的问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"60"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckin"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终的原因归根结底就是Tomcat的进程无法释放的问题，那么造成这个问题出现的就是上面三个原因，只有通过一步步的排查才能根本上解决问题。这个问题花费了我一两天的时间，虽然有些地方不算是彻底解决，但是至少Tomcat停止的时候，不在报内存溢出的警告了。我的强迫症总算好受一点了。如果有更好的解决方案，可以在评论区留言一起讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>触发器与存储过程讲义</title>
      <link href="/2017/04/27/tech-trigger-procedure-note/"/>
      <url>/2017/04/27/tech-trigger-procedure-note/</url>
      
        <content type="html"><![CDATA[<p>什么是触发器？什么是存储过程？因为用的少，对这两块的知识有点模糊，趁着公司每周三技术分享，通过网上资料和看书，将这两块的知识点梳理了下，做成了一个讲义，顺便就放到博客上来了，随便看看就好，因为如果不是专业的DBA，平常也很难涉及到触发器和存储过程，而且在阿里巴巴的java开发手册中，明确的表示，尽量避免使用存储过程，所以，看看就好。</p><a id="more"></a><h1 id="TRIGGER-触发器"><a href="#TRIGGER-触发器" class="headerlink" title="TRIGGER(触发器)"></a>TRIGGER(触发器)</h1><h2 id="1-什么是触发器"><a href="#1-什么是触发器" class="headerlink" title="1. 什么是触发器?"></a>1. 什么是触发器?</h2><p>触发器，从字面来理解，一触即发的一个器，简称触发器（哈哈，个人理解），举个例子吧，好比天黑了，你开灯了，你看到东西了。你放炮仗，点燃了，一会就炸了。在MySQL Server里面也就是对某一个表的一定的操作，触发某种条件（Insert,Update,Delete 等），从而自动执行的一段程序，这就是触发器。</p><p>支持触发器的语句有:</p><blockquote><p>DELETE;</p><p>INSERT;</p><p>UPDATE;</p></blockquote><p>其他的mysql语句不支持触发器，像select语句等。</p><h2 id="2-如何创建触发器？"><a href="#2-如何创建触发器？" class="headerlink" title="2. 如何创建触发器？"></a>2. 如何创建触发器？</h2><p>在创建触发器的时候，需要给出4条信息：</p><ol><li>唯一的触发器名；</li><li>触发器关联的表；</li><li>触发器应该响应的活动(DELETE、INSERT、UPDATE);</li><li>触发器何时执行(处理之前还是之后)；</li></ol><blockquote><p>在MySQL5中，触发器名必须在每个表中唯一，但不是在每个数据库中唯一。这表示同一数据库中的两个表可具有相同名字的触发器。</p></blockquote><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> newproduct</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> products</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> message(message) <span class="keyword">VALUES</span>(<span class="string">'Product added'</span>);</span><br></pre></td></tr></table></figure><p>分析:</p><p><code>CREATE TRIGGER</code> 用来创建名为 <code>newproduct</code> 的新触发器。触发器可在一个操作发生之前或之后执行，这里给出了 <code>AFTER INSERT</code>，所以此触发器将在 <code>INSERT</code> 语句成功执行后执行。这个触发器还指定 <code>FOR EACH ROW</code>，因此代码对每个插入行执行。在这个例子中， 将每次products插入一行的时候，同时往message的表中插入文本 <code>Product added</code>。</p><p>注意：</p><ol><li>只有表才支持触发器，视图不支持，临时表也不支持。</li><li>每个表最多支持6个触发器（每条INSERT、UPDATE 和DELETE的之前和之后）</li></ol><h2 id="3-如何删除触发器？"><a href="#3-如何删除触发器？" class="headerlink" title="3 .如何删除触发器？"></a>3 .如何删除触发器？</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> newproduct</span><br></pre></td></tr></table></figure><p>注意：触发器不能更新或者覆盖，为了修改一个触发器，必须先删除它，再重新创建</p><h2 id="4-如何使用触发器？"><a href="#4-如何使用触发器？" class="headerlink" title="4. 如何使用触发器？"></a>4. 如何使用触发器？</h2><h3 id="4-1-NSERT触发器"><a href="#4-1-NSERT触发器" class="headerlink" title="4.1 NSERT触发器"></a>4.1 NSERT触发器</h3><p>INSERT触发器就是当对定义触发器的表执行INSERT语句时，就会调用的触发器，INSERT触发器可以用来修改，甚至拒绝接受正插入的记录。</p><p>下面来看一个实例：</p><p>首先先创建ClassInfo(班级表)、StudentInfo(学生表)</p><p>教室表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`classInfo`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`classInfo`</span> (</span><br><span class="line">  <span class="string">`ClassNo`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ClassName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TotalNum`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TeacherName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ClassNo`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`classInfo`</span> <span class="keyword">VALUES</span> (<span class="string">'002'</span>, <span class="string">'计算机一班'</span>, <span class="string">'4'</span>, <span class="string">'王老师'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>学生表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`StudentInfo`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`StudentInfo`</span> (</span><br><span class="line">  <span class="string">`StuName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`StuNo`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`StuClass`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Sex`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`StuNo`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> T_addStudent</span><br><span class="line"></span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">ON</span> StudentInfo <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">UPDATE</span> classInfo</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> TotalNum = TotalNum + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHERE</span> ClassNo = (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ClassNo</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">FROM</span> StudentInfo);</span><br></pre></td></tr></table></figure><p>上面这段代码就是建立了一个插入触发器</p><p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fex17cloyrj30vm0c2myw.jpg" alt=""></p><p>如上图所示</p><ol><li>写明触发器的名称</li><li>该触发器是在那个表改变的时候发生</li><li>当这个表进行什么操作的时候发生</li><li>发生上述操作之后还要进行怎样的操作。</li></ol><p>这段代码的意思是：当在studentInfo表中添加一条记录的时候，就要更新ClassInfo中的TotalNum这一列，这一列的数据要增加1</p><p>下面我们验证一下：<br>输入下面的代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> totalNum</span><br><span class="line"><span class="keyword">FROM</span> ClassInfo</span><br><span class="line"><span class="keyword">WHERE</span> ClassNo = <span class="string">'002'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInfo <span class="keyword">VALUES</span> (<span class="string">'小明'</span>, <span class="string">'003'</span>, <span class="string">'002'</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInfo <span class="keyword">VALUES</span> (<span class="string">'小花'</span>, <span class="string">'002'</span>, <span class="string">'002'</span>, <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> StudentInfo <span class="keyword">VALUES</span> (<span class="string">'小高'</span>, <span class="string">'004'</span>, <span class="string">'002'</span>, <span class="string">'女'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> totalNum</span><br><span class="line"><span class="keyword">FROM</span> ClassInfo</span><br><span class="line"><span class="keyword">WHERE</span> ClassNo = <span class="string">'002'</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-DELETE触发器"><a href="#4-2-DELETE触发器" class="headerlink" title="4.2 DELETE触发器"></a>4.2 DELETE触发器</h3><p>当数据库运行DELETE语句时，就会激活DELETE触发器，DELETE触发器用于约束用户能够从数据库中删除的数据，因为这些数据中，有些数据是不希望用户轻易删除的。</p><p>接下来我们创建一个TeacherInfoFor(老师信息)表，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`TeacherInfoFor`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`TeacherInfoFor`</span> (</span><br><span class="line">  <span class="string">`TeacherID`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TeacherName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Sex`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Age`</span> <span class="built_in">int</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Telephone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`TeacherID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`TeacherInfoFor`</span> <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'001'</span>, <span class="string">'王芳'</span>, <span class="string">'女'</span>, <span class="string">'23'</span>, <span class="string">'158'</span>),</span><br><span class="line">(<span class="string">'003'</span>, <span class="string">'张丽'</span>, <span class="string">'女'</span>, <span class="string">'28'</span>, <span class="string">'152'</span>),</span><br><span class="line">(<span class="string">'004'</span>, <span class="string">'张明'</span>, <span class="string">'男'</span>, <span class="string">'30'</span>, <span class="string">'138'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>创建Stu_Teacher(学生教师表)，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Stu_Teacher`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Stu_Teacher`</span> (</span><br><span class="line">  <span class="string">`StuNo`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TeacherID`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`StuName`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Stu_Teacher`</span> <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'001'</span>, <span class="string">'004'</span>, <span class="string">'二丫'</span>, <span class="string">'1'</span>),</span><br><span class="line">(<span class="string">'002'</span>, <span class="string">'004'</span>, <span class="string">'王小二'</span>, <span class="string">'2'</span>),</span><br><span class="line">(<span class="string">'003'</span>, <span class="string">'004'</span>, <span class="string">'花花'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>创建触发器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> T_DELETETEACHERon</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> TeacherInfoFor</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> Stu_Teacher</span><br><span class="line"><span class="keyword">WHERE</span> TeacherID = old.TeacherID;</span><br></pre></td></tr></table></figure><p>该触发器的作用是，当删除某个教师的信息的时候，这个老师下面的学生信息也将一并的删除掉。</p><p>测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> TeacherInfoFor <span class="keyword">WHERE</span> TeacherID = <span class="string">'004'</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-UPDATE触发器"><a href="#4-3-UPDATE触发器" class="headerlink" title="4.3 UPDATE触发器"></a>4.3 UPDATE触发器</h3><p>当一个UPDATE语句在目标表上运行的时候，就会调用UPDATE触发器，这种类型的触发器专门用于约束用户能修改的现有的数据。<br>这个时候举个例子，先准备数据环境：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表shop_product</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`shop_product`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`shop_product`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`on_sale_time`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`on_sale`</span> <span class="built_in">int</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`shop_product_id_uindex`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 往表中插入一条数据</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`shop_product`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="literal">null</span>, <span class="string">'java编程思想'</span>, <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>表（shop_product ）中有一状态值–是否上架(on_sale) 若由未上架（0）转为上架（1） 同时设置上架时间（on_sale_time）</p><p>触发器写法如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> update_on_sale_time_of_product;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> update_on_sale_time_of_product <span class="keyword">BEFORE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> shop_product</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> OLD.on_sale = <span class="number">0</span> &amp;&amp; NEW.on_sale = <span class="number">1</span></span><br><span class="line">    <span class="keyword">THEN</span></span><br><span class="line">      <span class="keyword">SET</span> NEW.on_sale_time = <span class="keyword">now</span>();</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> shop_product <span class="keyword">SET</span> on_sale = <span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>最终结果 on_sale_time 字段更新为该商品上架时间!</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol><li><p>明确触发器语法的四要素：</p><ul><li>监视地点(table)</li><li>监视事件(insert/update/delete)</li><li>触发时间(after/before)</li><li>触发事件(insert/update/delete)</li></ul></li><li><p>触发器语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">trigger</span> triggerName  </span><br><span class="line"><span class="keyword">after</span>/<span class="keyword">before</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span> <span class="keyword">on</span> 表名  </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>   </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line">        <span class="keyword">sql</span>语句;  </span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>个人理解</p><p>我的一般理解就是触发器是一个隐藏的存储过程，因为它不需要参数，不需要显示调用，往往在你不知情的情况下已经做了很多操作。</p></li></ol><h1 id="PROCEDURE-存储过程"><a href="#PROCEDURE-存储过程" class="headerlink" title="PROCEDURE(存储过程)"></a>PROCEDURE(存储过程)</h1><h2 id="1-什么是存储过程？"><a href="#1-什么是存储过程？" class="headerlink" title="1. 什么是存储过程？"></a>1. 什么是存储过程？</h2><p>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批件，虽然它们的作用不仅限于批处理。<br>在我看来， <span style="color:red;">存储过程就是有业务逻辑和流程的集合</span>， 可以在存储过程中创建表，更新数据， 删除等等。</p><h2 id="2-为什么要使用存储过程？"><a href="#2-为什么要使用存储过程？" class="headerlink" title="2. 为什么要使用存储过程？"></a>2. 为什么要使用存储过程？</h2><ol><li>通过把处理封装在容易使用的单元中，简化复杂的操作（类似于java里面的封装性）。</li><li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。如果所有开发人员和应用程序都使用同一（试验和测试）存储过程，则所使用的代码都是相同的。这一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</li><li>简化对变动的管理。如果表名、列名或业务逻辑（或别的内容）有变化，只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。</li></ol><h2 id="3-一个简单的存储过程"><a href="#3-一个简单的存储过程" class="headerlink" title="3. 一个简单的存储过程"></a>3. 一个简单的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> porcedureName ()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> StuName <span class="keyword">from</span> Stu_Teacher;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>存储过程用create procedure 创建， 业务逻辑和sql写在begin和end之间。mysql中可用call porcedureName ();来调用过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 调用过程</span><br><span class="line"><span class="keyword">call</span> porcedureName ();</span><br></pre></td></tr></table></figure><p>该存储过程没有参数， 只是在调用的时候查询了Stu_Teacher表的用户名而已。</p><h2 id="4-删除存储过程"><a href="#4-删除存储过程" class="headerlink" title="4. 删除存储过程"></a>4. 删除存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> porcedureName; <span class="comment">-- 没有括号()</span></span><br></pre></td></tr></table></figure><h2 id="5-使用参数的存储过程"><a href="#5-使用参数的存储过程" class="headerlink" title="5. 使用参数的存储过程"></a>5. 使用参数的存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> procedureName(</span><br><span class="line">    <span class="keyword">out</span> <span class="keyword">min</span> <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">out</span> <span class="keyword">avg</span> <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">out</span> <span class="keyword">max</span> <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">MIN</span>(Age) <span class="keyword">INTO</span> <span class="keyword">min</span> <span class="keyword">from</span> TeacherInfoFor;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">AVG</span>(Age) <span class="keyword">into</span> <span class="keyword">avg</span> <span class="keyword">from</span> TeacherInfoFor;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">MAX</span>(Age) <span class="keyword">into</span> <span class="keyword">max</span> <span class="keyword">from</span> TeacherInfoFor;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>此过程接受三个参数， 分别用于获取TeacherInfoFor表的最小、平均、最大年龄。每个参数必须具有指定的类<br>型，这里使用十进制值（decimal(8,2)）， 关键字<span style="color:red;">OUT</span>指出相应的参数用来从存储过程传出<br>一个值（返回给调用者）。</p><blockquote><p>MySQL支持IN（传递给存储过程）、OUT（从存储过程传出，如这里所用）和INOUT（对存储过程传入和传出）类型的参数。存储过程的代码位于BEGIN和END语句内，如前所见，它们是一系列SELECT语句，用来检索值，然后保存到相应的变量（通过指定INTO关键字）</p></blockquote><p>为调用此修改过的存储过程，必须指定3个变量名，如下所示：(所有MySQL变量都必须以@开始。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 由于过程指定三个参数， 故调用必须要参数匹配</span></span><br><span class="line"><span class="keyword">call</span> procedureName(@<span class="keyword">min</span>, @<span class="keyword">avg</span>, @<span class="keyword">max</span>);</span><br></pre></td></tr></table></figure><p>该调用并没有任何输出， 只是把调用的结果赋给了调用时传入的变量（@min, @avg, @max）。然后即可调用显示该变量的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="keyword">min</span>, @<span class="keyword">avg</span>, @<span class="keyword">max</span>;</span><br></pre></td></tr></table></figure><p>使用in参数, 输入一个老师的id， 返回该老师下面的所有学生人数总和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> getTotalById (</span><br><span class="line">    <span class="keyword">in</span> teacher_id <span class="built_in">VARCHAR</span>(<span class="number">45</span>),</span><br><span class="line">    <span class="keyword">out</span> total <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(s.StuNo) <span class="keyword">from</span> Stu_Teacher s</span><br><span class="line">    <span class="keyword">where</span> s.TeacherID = teacher_id</span><br><span class="line">    <span class="keyword">into</span> total;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>调用存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> getTotalById(<span class="string">'004'</span>, @total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br></pre></td></tr></table></figure><h2 id="6-为什么不推荐使用Mysql触发器而用存储过程？"><a href="#6-为什么不推荐使用Mysql触发器而用存储过程？" class="headerlink" title="6. 为什么不推荐使用Mysql触发器而用存储过程？"></a>6. 为什么不推荐使用Mysql触发器而用存储过程？</h2><ol><li>存储过程和触发器二者是有很大的联系的，我的一般理解就是触发器是一个隐藏的存储过程，因为它不需要参数，不需要显示调用，往往在你不知情的情况下已经做了很多操作。从这个角度来说，<strong>由于是隐藏的，无形中增加了系统的复杂性，非DBA人员理解起来数据库就会有困难，因为它不执行根本感觉不到它的存在</strong>。</li><li>再有，涉及到复杂的逻辑的时候，触发器的嵌套是避免不了的，如果再涉及几个存储过程，再加上事务等等，很容易出现死锁现象，再调试的时候也会经常性的从一个触发器转到另外一个，级联关系的不断追溯，很容易使人头大。其实，从性能上，触发器并没有提升多少性能，只是从代码上来说，可能在coding的时候很容易实现业务，所以我的观点是：<strong>摒弃触发器！触发器的功能基本都可以用存储过程来实现。</strong></li><li>在编码中存储过程显示调用很容易阅读代码，触发器隐式调用容易被忽略。<br>存储过程也有他的致命伤↓</li><li>存储过程的致命伤在于移植性，存储过程不能跨库移植，比如事先是在mysql数据库的存储过程，考虑性能要移植到oracle上面那么所有的存储过程都需要被重写一遍。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《MySQL必知必会》: 链接: <a href="http://pan.baidu.com/s/1kVoNfGN" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVoNfGN</a> 密码: 9acp</li><li><a href="https://segmentfault.com/a/1190000006756268" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006756268</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 触发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库三范式</title>
      <link href="/2017/04/04/tech-db-three/"/>
      <url>/2017/04/04/tech-db-three/</url>
      
        <content type="html"><![CDATA[<p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。如何去理解数据库的三范式呢？下面是根据知乎上面的一些解答，总结出来的。</p><a id="more"></a><h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p><strong>属性不可分割</strong>。所谓的属性，就是我们说的字段，就比如学生信息表由姓名、年龄、性别、学号等组成，不可分割的意思按照字面理解就是不能拆分成最小的单位。但是在国外，姓名是要分开的，也就是说姓名这个字段可以在分为 first name 和 last name，那么我们设计的这个表是不符合第一范式的。</p><h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>第二范式就是 <strong>主键依赖</strong>，其他的字段都依赖主键。通过主键，我就可以获取到其他字段的值。如果不依赖主键，我们就找不到他们。就像为什么学生信息表里面姓名不可以做主键，因为姓名存在同名，就违背了第二范式，学号是唯一的，是可以做为主键。</p><h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>第三范式就是要 <strong>消除传递依赖</strong>，通俗一点就是消除冗余。消除冗余应该比较好理解一些，就是各种信息只在一个地方存储，不出现在多张表中。就好比如说一个大学分了很多的系（计算机系、中文系、英语系。。。），这个系别管理表信息有以下字段组成：系编号，系主任，系简介，系架构。学生信息表中已经有姓名、年龄、学号、性别等字段，那能不能把系编号、系主任、系简介等字段一起存在学生信息表中呢？因为我们已经有系别管理表去存放系相关信息，再放到学生信息表中，就出现冗余，也就是传递依赖。这样就不符合第三范式，那么正确的做法是我们只需要添加一个系编号字段就行，根据该系编号字段，就可以获取到具体的系别信息，这就是第三范式。</p><h2 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h2><p>字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：</p><ul><li>不是频繁修改的字段。</li><li>不是 varchar 超长字段，更不能是 text 字段。</li></ul><p>例如：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入理解Java虚拟机》总结笔记</title>
      <link href="/2017/02/10/tech-jvm-summary-note/"/>
      <url>/2017/02/10/tech-jvm-summary-note/</url>
      
        <content type="html"><![CDATA[<p>周志明先生的《深入理解Java虚拟机》一书，乃java进阶必看的书籍，对java内存模型，JVM工作原理，基本JVM调优和内存溢出排查有很大的帮。以前对于JVM运行机制不是很了解，遇到很多问题都无从下手，即便解决了也不懂其原理，读此书上述问题就游刃而解，以下是个人的一个简单笔记，方便日后查阅。<br><a id="more"></a></p><p><img src="/img/QQ20170210-0@2x.png" alt="笔记"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2016</title>
      <link href="/2016/12/31/life-2016-summary/"/>
      <url>/2016/12/31/life-2016-summary/</url>
      
        <content type="html"><![CDATA[<p>今天是2016年的最后一天，心中感慨颇多，趁着年末，记录一下今年这一年的心路历程，写一份年终总结，给自己一份交代。</p><a id="more"></a><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>2016年2月份，过完春节，就早早的来到了学校。因为大四，面临着就业的问题，心里压力还是蛮大的。23号晚上，跟一个朋友在外面吃晚饭，就聊到工作的事情，我跟他说明了我的想法，但他的建议是，在学校自己学跟在企业学，是有很大区别的，企业学进步空间更大，后来自己想想也对，立马就在23晚上买了26号去深圳的火车票。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123168817IMG_20160601_183939R.jpg" alt="2016123168817IMG_20160601_183939R.jpg"></p><p>2月27号早上，大概七点到达深圳北站。因为我的父母都在深圳，他们常年在深圳打工，所以到深圳之前，我就托我妈帮我找好了房子，所以下了火车后至少还有个落脚的地方。因为以前寒暑假的时候，经常来深圳，所以对深圳还算是比较熟悉，一路上比较顺利。</p><p>在休整了两三天后，就开始着手准备找工作的时候，刚开始的时候，有针对性投了几家公司，但是打过来的电话很少，也就一两家的样子。我记忆最深刻的就是面试的第一家，着实被坑了一把。那家公司在南山，而我在龙岗这边，坐地铁和公交得接近两个小时。约的时间是上午十点钟，早上七点就起床直奔那里，好在赶在十点之前赶到那里。到了那里后就傻眼了，居然是一家培训机构，最奇葩的是，我居然遇到了自己同一个学院的同学，两个人真是哭笑不得。所以第一次面试就这么告吹了。</p><p>后来意识到这样不行，机会太少，索性就直接海投，上前程无忧，全选。果然，第二天，就接到了十多个电话，面试满满的排了一周。接下来的一周面试，几乎是把整个深圳都跑遍了，有时候上午在南山区面试，下午一家在福田区面试，为了赶时间，中饭都没得时间吃。在面试过程中，面试官总喜欢拿没有毕业说事，碰了无数壁，遭受无数打击，当然也遇到过人很好的面试官。其中有一家，印象比较深刻，当时跟面试官很谈得来，后来中午饭都是那个面试官请的，他也向我抛出了橄榄枝，但是因为薪资问题，最后还是拒绝了他的好意。时间就这样过了一周，中间也拿了好几个offer，最后经过自己的慎重选择，就决定去我现在就职的公司。</p><h2 id="煎熬"><a href="#煎熬" class="headerlink" title="煎熬"></a>煎熬</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123127657IMG20160628091437.jpg" alt="2016123127657IMG20160628091437.jpg"></p><p>3月10，顺利入职。公司本部在龙岗，在公司本部办理了相关手续后，就去了福田那边，因为那边有个项目，大部分人都在那边，所以我也就去了那边。</p><p>进入开发组，还是跟往常一样，装环境，熟悉项目，认识新的同事。比较庆幸的一点，周围的同事都很合得来，我是做java的，我们java组加上我一共三个人，一个外号叫老王，他也姓王，跟我一个姓，所以大家叫他老王，他人比较随和，技术很好，喜欢唱歌，没事总会哼两句。另外一个叫励志（本名叫立志），带着个眼睛，看上去比较正经，但其实是一个内心非常活跃的人，技术也非常厉害。让我比较惊讶的是，他们本科阶段都不是学计算机的，老王是学教育学的，励志是搞建筑的，半路出家，居然这么厉害，让人钦佩。另外这个项目组还有c#端，安卓端，这些同事人都不错，非常的有个性，也就是在这样的工作环境下，我开始了我的开发历程。</p><p>一周后，基本上对项目的业务也算比较熟悉，接到了老大布置的第一个任务，报表开发。说实话，还是第一次做报表开发，以前没做过，他们这个报表之前是用的微软的reporting service报表服务器，研究了快一两个星期，虽然懂了一点，但是依旧做不出什么实质性的东西，内心是非常煎熬的。那段时间基本上是天天熬夜，但是还好，努力总是有收获的，最后在规定的时间做出来了，心里还是有点满足感的。</p><h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123162690mmexport1483153082049.jpg" alt="2016123162690mmexport1483153082049.jpg"></p><p>6月6号，我终于正式毕业了！那一天，班上一共33位同学，一共32位同学到齐，比较遗憾的是，有一位同学因为工作的原因，没能参见最后的毕业聚会。毕业散伙饭的那天，大家喝酒吃饭唱k，各种回顾自己大学阶段的各种往事。因为今天一过，标志着学生时代的结束，大家各奔东西，很难再聚的齐。我之前就跟班上的同学说过，我一定要第一个收拾东西走，因为看到他们一个个走后，空荡荡的寝室，心里会非常的难受。四年之前不想来，四年之后不想走，亲爱的你们，现在还过的好吗？</p><h2 id="数码"><a href="#数码" class="headerlink" title="数码"></a>数码</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123112580IMG_0905.JPG" alt="2016123112580IMG_0905.JPG"></p><p>8月份，上了几个月班后，也攒了点小钱，这个时候，瞬间忍不住想剁手了。我对数码行业是非常的感兴趣，是个十足的手机发烧友。我非常喜欢的两家科技公司是锤子科技和Apple，因为我觉得这两家公司是实实在在认真做产品的公司。这里不得不说的就是锤子科技，因为老罗做产品的态度，以及他鲜明的个性，使得我成为了老罗的脑残粉。之前在学校的时候，一直想买一部锤子手机支持下老罗，但是那个时候囊中羞涩，所以作罢。现在工作了，也是是时候支持支持下老罗了。接着就在京东购入了第一台锤子手机-T2，拿到手的时候，被它深深吸引了，目前T2还一直在我的手上服役，丝毫没有卡顿的感觉。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123125547IMG_20161103_225459R.jpg" alt="2016123125547IMG_20161103_225459R.jpg"></p><p>10月1号，国庆节，之前一直垂涎苹果 macbook pro ，在积攒了几个月的银子后，我终于入手了人生第一台 macbook pro。我为什么要选择买macbook pro 呢？因为每天要挤地铁，每天背着五六斤重的电脑，让人生不如死，再个它有着超高的颜值，天生的unix血统，程序员的必备神器。唉，不说了。。。我得吃土了。</p><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123121553QQ20161231-111446@2x.png" alt="2016123121553QQ20161231-111446@2x.png"></p><p>9月23号，我自己搭建的个人博客网站终于顺利上线。之所以想搭建一个博客网站，主要是想用它来记录自己的一些技术笔记和生活感想，也顺便练练自己的文笔，程序员也可以很文艺的嘛。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016123146632IMG_20161006_133350R.jpg" alt="2016123146632IMG_20161006_133350R.jpg"></p><p>10月6号，跟友人一起登上了深圳最顶峰，梧桐山，那一天，我想我已经把今年一年的山全爬完了，早上十点钟上山，晚上七点天黑才下山，非常艰辛。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>回首展望这一年，有过心酸，也有过快乐，新的一年也即将来临，我也给自己定了个小目标，比如挣他个。。。，额。。说错了，来点实际的：</p><ul><li>看几本自己喜欢看的书。</li><li>健身、减肥</li><li>买一块超大的显示器</li><li>考驾照</li><li>多写博客</li><li>去丽江旅行一次</li></ul><p>别了，难忘的2016，你好，2017！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centOS上搭建FastDFS图片服务器教程</title>
      <link href="/2016/12/22/tech-centos-fastDFS/"/>
      <url>/2016/12/22/tech-centos-fastDFS/</url>
      
        <content type="html"><![CDATA[<p>FastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><a id="more"></a><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223801021.png" alt="20161223801021.png"></p><h2 id="文件上传流程"><a href="#文件上传流程" class="headerlink" title="文件上传流程"></a>文件上传流程</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223932372.png" alt="20161223932372.png"></p><h2 id="文件下载流程"><a href="#文件下载流程" class="headerlink" title="文件下载流程"></a>文件下载流程</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223635383.png" alt="20161223635383.png"></p><h2 id="上传文件的文件名"><a href="#上传文件的文件名" class="headerlink" title="上传文件的文件名"></a>上传文件的文件名</h2><p>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223506684.png" alt="20161223506684.png"></p><ul><li>组名：文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。</li><li>虚拟磁盘路径：storage配置的虚拟路径，与磁盘选项store_path*对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01，以此类推。</li><li>数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</li><li>文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</li></ul><h2 id="FastDFS搭建"><a href="#FastDFS搭建" class="headerlink" title="FastDFS搭建"></a>FastDFS搭建</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223488205.png" alt="20161223488205.png"></p><p>可以使用一台虚拟机来模拟，只有一个Tracker、一个Storage服务。配置nginx访问图片。</p><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol><li>第一步：把fastDFS源码上传到linux系统。</li><li>第二步：安装FastDFS之前，先安装libevent工具包。命令：<code>yum -y install libevent</code>。</li><li><p>第三步：安装libfastcommonV1.0.7工具包。</p><ul><li>将libfastcommonV1.0.7源码解压缩</li><li><code>./make.sh</code></li><li><code>./make.sh install</code></li><li>把<code>/usr/lib64/libfastcommon.so</code>文件向<code>/usr/lib/</code>下复制一份</li></ul></li><li><p>第四步：安装Tracker服务。</p><ul><li>fastDFS源码解压缩</li><li><code>./make.sh</code></li><li><code>./make.sh install</code></li><li>把<code>/root/FastDFS/conf</code>目录下的所有的配置文件都复制到<code>/etc/fdfs</code>下。</li><li>配置<code>tracker</code>服务。修改<code>/etc/fdfs/tracker.conf</code>文件。配置<code>tracker</code>日志文件路径。</li></ul><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223411366.png" alt="20161223411366.png"></p><ul><li>启动tracker，执行命令：<code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</code>，重启命令：<code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code>。</li></ul></li><li><p>第五步：安装storage服务。</p><ul><li>如果storage是按照在其他的服务器上面，第四步的1~4需要重新执行。</li><li>配置storage服务。修改<code>/etc/fdfs/storage.conf</code>文件。</li></ul><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223669197.png" alt="20161223669197.png"></p><p><img src="http://og1m51u2s.bkt.clouddn.com/201612234318.png" alt="201612234318.png"></p><p><img src="http://og1m51u2s.bkt.clouddn.com/20161223979359.png" alt="20161223979359.png"></p><ul><li>启动storage服务。<code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</code></li></ul></li><li><p>第六步：测试服务。修改客户端配置文件<code>/etc/fdfs/client.conf</code>。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/201612231068010.png" alt="201612231068010.png"></p><p><img src="http://og1m51u2s.bkt.clouddn.com/201612235555411.png" alt="201612235555411.png"></p><p>执行命令：<code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code></p></li><li><p>第七步：搭建nginx提供http服务</p><p>使用官方提供的nginx插件，<code>fastdfs-nginx-module_v1.16.tar.gz</code>，添加该插件后，nginx则需要重新编译。</p><ul><li>将源码包上传到root根目录，然后解压缩。</li><li><p>修改/root/fastdfs-nginx-module/src/config文件，把其中的local去掉。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011282674nginxModule.png" alt="2017011282674nginxModule.png"></p></li><li><p>对nginx重新config，进入到<code>/root/nginx-1.8.0/</code>，在终端执行如下代码：</p></li></ul><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011223778QQ20170112-225927@2x.png" alt="2017011223778QQ20170112-225927@2x.png"></p><blockquote><p>不晓得是markdown格式不对还是怎么，这贴上去老是打乱整个文章格式，无奈只能截图。</p></blockquote><ul><li><code>make</code></li><li><code>make install</code></li><li>把/root/fastdfs-nginx-module/src/mod_fastdfs.conf文件复制到/etc/fdfs目录下。并编辑该文件，修改如下几个地方：</li></ul><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011266710nginxModule1.png" alt="2017011266710nginxModule1.png"></p><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011232614nginxModule2.png" alt="2017011232614nginxModule2.png"></p><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011279200nginxModule3.png" alt="2017011279200nginxModule3.png"></p><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011257498nginxModule4.png" alt="2017011257498nginxModule4.png"></p><ul><li>修改<code>/usr/local/nginx/conf/nginx.conf</code>nginx配置文件，修改server节点，如下所示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location /group1/M00/&#123;</span><br><span class="line">                ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将libfdfsclient.so拷贝至/usr/lib下，执行命令：<code>cp /usr/lib64/libfdfsclient.so /usr/lib/</code></p></li><li><p>启动nginx,启动tracker，启动storage。</p></li></ul></li><li><p>第八步：测试</p></li></ol><p><code>cd /etc/fdfs/</code>,然后执行上传命令：<code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code>，假如出现如下的图，说明是上传成功的。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011214771QQ20170112-225034@2x.png" alt="2017011214771QQ20170112-225034@2x.png"></p><p>然后再浏览器访问生成的链接，假如能访问到我们刚上传的图片，就说明完整搭建好FastDFS。中间我一直上传不了，后来才发现自己没有启动tracker和storage，这里需要注意一下。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2017011235411QQ20170112-225350@2x.png" alt="2017011235411QQ20170112-225350@2x.png"></p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>链接: <a href="https://pan.baidu.com/s/1mipA8QG" target="_blank" rel="noopener">https://pan.baidu.com/s/1mipA8QG</a> 密码: yd6r</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的反向代理与负载均衡总结</title>
      <link href="/2016/12/15/tech-nginx-summary/"/>
      <url>/2016/12/15/tech-nginx-summary/</url>
      
        <content type="html"><![CDATA[<p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。nginx有两个非常重要的功能就是反向代理和负载均衡，今天就这两个重要的功能做个简单总结。</p><a id="more"></a><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121747446nginx.png" alt="2016121747446nginx.png"></p><p>从图中可以看出，当用户发送一个请求后，<code>nginx</code>会把请求随机转发给不同的服务器，<code>nginx</code>在当中担任一个<strong>请求转发</strong>的功能。</p><h3 id="哪些场景要用反向代理"><a href="#哪些场景要用反向代理" class="headerlink" title="哪些场景要用反向代理"></a>哪些场景要用反向代理</h3><p>当用户访问的数据量比较大的时候，一台服务器无法承受如此大的数据量的时候，需要多台服务器去处理，而nginx就负责把这些请求转发给不同的服务器。</p><h3 id="模拟反向代理实例"><a href="#模拟反向代理实例" class="headerlink" title="模拟反向代理实例"></a>模拟反向代理实例</h3><p>在这里我在centOS虚拟机上部署两个tomact来模拟两台服务器，这两台服务器部署了同一套代码。然后我在本机用<code>switchHost</code>来修改hosts，用浏览器访问<code>tomact.taotao.com</code>来模拟用户请求，然后观察相对应的处理结果。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><ol><li>在虚拟机安装jdk。</li><li>在虚拟机安装tomact，修改第一个tomact，主界面欢迎界面加入 <strong>8080</strong> 关键字， 修改第二个tomact，主界面欢迎界面加入 <strong>8081</strong> 关键字，来区别我们访问是不同的服务器（tomact)，然后我们启动两个tomact。</li><li><p>配置<code>nginx.conf</code>配置文件，添加server节点，配置请求转发。然后启动<code>nginx</code>。如下</p><pre><code>upstream tomcats{       server 10.211.55.6:8080;       server 10.211.55.6:8081;   }  server {        listen       80;        server_name  tomact.taotao.com;        #charset koi8-r;        #access_log  logs/host.access.log  main;       location / {           proxy_pass   http://tomcats;           index  index.html index.htm;           }          }</code></pre></li></ol><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><ol><li><p>第一次请求，界面结果，显示<code>8080</code>界面，说明<code>nginx</code>将请求转发给了<code>tomact-1</code>。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121798219QQ20161217-171057@2x.png" alt="2016121798219QQ20161217-171057@2x.png"></p></li><li><p>第二次请求，界面结果，显示<code>8081</code>，说明<code>nginx</code>将请求转发给了<code>tomact-2</code>。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121758263QQ20161217-171319@2x.png" alt="2016121758263QQ20161217-171319@2x.png"></p></li></ol><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p><img src="http://og1m51u2s.bkt.clouddn.com/201612174195QQ20161217-172130@2x.png" alt="201612174195QQ20161217-172130@2x.png"></p><p>从图中可以看出，用户发起请求后，<code>nginx</code>检测到，服务器1出现宕机，立马将请求转移给服务器4，将压力转移到服务器4上面，从而实现负载均衡。</p><h3 id="哪些场景要用到负载均衡"><a href="#哪些场景要用到负载均衡" class="headerlink" title="哪些场景要用到负载均衡"></a>哪些场景要用到负载均衡</h3><p>如果我们的服务器的配置各有不同，那么我们就可以通过<code>nginx</code>为每台服务器设置权重，配置好的服务器可以承受更多请求，配置差一点的承担的压力要少一点，从而实现负载均衡。</p><h3 id="模拟负载均衡实例"><a href="#模拟负载均衡实例" class="headerlink" title="模拟负载均衡实例"></a>模拟负载均衡实例</h3><p>在之前配置的基础上，再次配置<code>nginx.conf</code>配置文件，为每台服务器添加权重<code>weight</code>，<code>weight</code>的值默认为1，<code>weight</code>的值越大，<code>nginx</code>将请求转发到该服务器的概率也就越大，然后启动<code>nginx</code>。如下：</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121714181QQ20161217-180240@2x.png" alt="2016121714181QQ20161217-180240@2x.png">        </p><p>发起请求，发现界面显示的是<code>8080</code>，再次发起请求，界面依旧显示的是<code>8080</code>，第三次刷新的时候，界面才显示<code>8081</code>，由此可见，权重越大，nginx将请求转发给该服务器的概率越大，这就是负载均衡。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome浏览器插件推荐</title>
      <link href="/2016/12/09/life-chrome-plugin/"/>
      <url>/2016/12/09/life-chrome-plugin/</url>
      
        <content type="html"><![CDATA[<p>作为一名java开发者，自然离不开浏览器，要问到我最喜欢用哪个浏览器，我可以毫不犹豫的告诉你，chrome！chrome浏览器简洁，启动速度快，兼容性好，最最最重要的一点，它拥有丰富的插件，有了这些插件，从此上网变成一件愉悦的事情，你再也不用忍受各种烦人的弹窗广告，以及恶心的某度公司的搜索置顶。下面我就我自己使用的一些chrome插件做一个总结。</p><a id="more"></a><hr><center><strong>开始之前，由于某种原因，我在这儿就不说了，请大家自备梯子！</strong></center><hr><h2 id="Adblock-Plus"><a href="#Adblock-Plus" class="headerlink" title="Adblock Plus"></a>Adblock Plus</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>神级插件，这个必须放到第一个，超过5000万人使用，免费的广告拦截器，可阻止所有烦人的广告及恶意软件和跟踪，从此终于可以享受没有恼人广告的网络世界。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN</a></p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>脚本管理器，通过这个插件，我们可以装一些实用的脚本，比如屏蔽百度推广、去掉贴吧中隐藏的广告、突破下载链接等等。非常的强大，像Firefox中的油猴脚本，跟这个类似。下图就是我安装的一些脚本。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120975554QQ20161209-224717@2x.png" alt="2016120975554QQ20161209-224717@2x.png"></p><p>该插件有着丰富的脚本库，比如<a href="https://openuserjs.org/" target="_blank" rel="noopener">OpenUserJS</a>、<a href="https://greasyfork.org/" target="_blank" rel="noopener">GreasyFork</a>、<a href="http://userscripts-mirror.org/" target="_blank" rel="noopener">Userscripts.org</a>，但是需要注意的一点是，Userscripts.org这个网站已经不再更新了，有许多的垃圾和病毒脚本,比如说,它们可能会试图窃取你的 Facebook 账户,还是要小心点哦!</p><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN</a></p><h2 id="Stylish"><a href="#Stylish" class="headerlink" title="Stylish"></a>Stylish</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>有些时候我们看腻一个页面，能不能换点新花样呢？Stylish可以满足你的要求！<code>Stylish</code> 是一个调整网页外观的用户样式管理器。它可让您轻松地为许多热门网站网站安装主题和皮肤。像youtube，没换样式之前，是这样的：</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120958030QQ20161209-225522@2x.png" alt="2016120958030QQ20161209-225522@2x.png"></p><p>当我们更换样式之后，就变成如下这样啦：</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120938438QQ20161209-225738@2x.png" alt="2016120938438QQ20161209-225738@2x.png"></p><p>要对自己的眼睛好一点哦!</p><p>顺带说点题外话，该插件由 <code>Jason Barnabe</code> 创建,<code>Jason Barnabe</code> 同时也是 GreasyFork脚本库的创办者，膜拜下大神！</p><h3 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?hl=zh-CN</a></p><h2 id="Chrono"><a href="#Chrono" class="headerlink" title="Chrono"></a>Chrono</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>原谅我实在不喜欢chrome自带的下载工具，点击下载后，居然显示到屏幕的最下方，有时候屏幕太大的时候，压根就不知道自己有没有下载成功。如果你跟我一样不喜欢chrome自带的下载工具，这个时候需要<code>Chrono</code>来拯救你。就像做<code>Chrono</code>简介，<strong>做Chrome浏览器中最好的下载管理器</strong>，它做到了！点击菜单栏中的<code>Chrono</code>按钮，就可以看到我们最近下载的记录。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120961125QQ20161209-230849@2x.png" alt="2016120961125QQ20161209-230849@2x.png"></p><p>但是就下载这么简单？No！！！，他还有个比较实用的工能，就是资源嗅探器，有些时候，我们想下载一些图片素材，但是因为某些原因，我们拿不到我们想要的，这个时候<code>Chrono</code>的资源嗅探器派上用场了，它可以自动的扫描页面上可以下载的资源图片，这样我们就可以轻轻松松拿到我们想要的素材资源了。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120942958QQ20161209-231303@2x.png" alt="2016120942958QQ20161209-231303@2x.png"></p><h3 id="下载-3"><a href="#下载-3" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN</a></p><h2 id="划词翻译"><a href="#划词翻译" class="headerlink" title="划词翻译"></a>划词翻译</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>对于我们英语学渣来说，有时候要上网查找一些API的时候，发现很多单词不认识，安装这个插件后，选中，翻译，就这么简单！它支持谷歌、百度、有道、必应四大翻译和朗读引擎，可以方便的查看、复制和朗读不同引擎的翻译结果。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120993976QQ20161209-231758@2x.png" alt="2016120993976QQ20161209-231758@2x.png"></p><h3 id="下载-4"><a href="#下载-4" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad?hl=zh-CN</a></p><h2 id="简-Tab"><a href="#简-Tab" class="headerlink" title="简 Tab"></a>简 Tab</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>每天早上打开浏览器的时候，一张优美的风景照引入眼帘，是不是感觉瞬间神清气爽呢？讨厌了chrome默认的新建标签页，一片空白，着实单调。试试这个插件吧，每当我们新建一个标签页的时候，每次都会更换一张风景照片，每次打开都会有好心情哦！</p><h3 id="下载-5"><a href="#下载-5" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/simptab-new-tab/kbgmbmkhepchmmcnbdbclpkpegbgikjc?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/simptab-new-tab/kbgmbmkhepchmmcnbdbclpkpegbgikjc?hl=zh-CN</a></p><h2 id="为知笔记网页剪辑器"><a href="#为知笔记网页剪辑器" class="headerlink" title="为知笔记网页剪辑器"></a>为知笔记网页剪辑器</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>如果你是个比较喜欢作笔记的人，同时你又在用为知笔记来管理你的笔记，那么这款插件很适合你哦！如果你对谋篇文章或者博文很感兴趣，那么我就可以点击该插件，登陆我们的为知笔记账户，我们遍可以剪切该文章，并同步到为知笔记账户，是不是很方便呢？</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120971361QQ20161209-232733@2x.png" alt="2016120971361QQ20161209-232733@2x.png"></p><h3 id="下载-6"><a href="#下载-6" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=zh-CN</a></p><h2 id="网盘助手"><a href="#网盘助手" class="headerlink" title="网盘助手"></a>网盘助手</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>不知道你有没有这样的一个体验，无论你的网速有多快，你在百度云上下载东西到本地的时候，网速慢的像蜗牛！只有你开了他们家的会员，网速才能提高，真的不愧是流氓软件公司！为了突破百度的网速限制，采用网盘助手+Aria2方式，可以大幅度的提高下载速度，再也不用忍受这慢如蜗牛的速度了。因为我是mac电脑，也是在威锋论坛上看到的，win上面貌似也可以这么做，具体可以百度。用mac的同学可以参考<a href="http://bbs.feng.com/forum.php?mod=viewthread&amp;tid=10895696，上面有详细的教程。" target="_blank" rel="noopener">http://bbs.feng.com/forum.php?mod=viewthread&amp;tid=10895696，上面有详细的教程。</a></p><h2 id="SimpleUndoClose"><a href="#SimpleUndoClose" class="headerlink" title="SimpleUndoClose"></a>SimpleUndoClose</h2><h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>这个插件主要作用是查看我们刚刚关闭的网页，或许我们不小心关掉了某个标签页，我们可以在这里找回来，很实用的小插件。</p><h3 id="下载-7"><a href="#下载-7" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj?hl=zh-CN</a></p><h2 id="斗鱼HTML5播放器"><a href="#斗鱼HTML5播放器" class="headerlink" title="斗鱼HTML5播放器"></a>斗鱼HTML5播放器</h2><h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><p>用mac的同学都知道，mac跟flash水火不相容，用flash播放器看视频，半个小时，可以烤鸡蛋，我平常没事儿喜欢看看直播，但是，很多直播网站还是用的flash，并不支持html5，通过该插件，可以将斗鱼直播网站的flash播放器切换成HTML5，这样就可以愉快的看直播了，但是这个插件还有些小bug，比如不能查看和发送弹幕，期待作者后期优化。</p><h3 id="下载-8"><a href="#下载-8" class="headerlink" title="下载"></a>下载</h3><p><a href="https://chrome.google.com/webstore/detail/斗鱼html5播放器/hbocinidadgpnbcamhjgfbgiebhpnmfj?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/斗鱼html5播放器/hbocinidadgpnbcamhjgfbgiebhpnmfj?hl=zh-CN</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本上上面就是我的浏览器就装了上面的插件，有了这些插件，大大提高了我浏览器使用效率，也感谢这些插件的作者无私的奉献精神，最后想说一句，<strong>“同学，换chrome吧！”</strong></p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在centOS上安装nginx教程</title>
      <link href="/2016/12/08/tech-centOS-nginx/"/>
      <url>/2016/12/08/tech-centOS-nginx/</url>
      
        <content type="html"><![CDATA[<p>是一个使用c语言开发的高性能的http服务器及反向代理服务器。Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。最近项目中用到了反向代理服务器 nginx，没用过这玩意儿，自己就尝试着在虚拟机中安装nginx，下面就把整个安装过程中遇到的问题以及安装过程记录一下。</p><a id="more"></a><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</li><li>虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li><li>反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。</li></ol><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>虚拟机安装的是centOS 6.8</li><li>nginx-1.8.0.tar.gz</li><li>本机是mac OSX 10.11</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>进入 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a> 可进行下载</p><h2 id="安装nginx依赖的包"><a href="#安装nginx依赖的包" class="headerlink" title="安装nginx依赖的包"></a>安装nginx依赖的包</h2><h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><p>因为nginx是用c语言开发的，所以我们需要用gcc对我们下载下来的源码进行编译，在安装之前先查看本机是否已经安装了gcc，终端输入<strong>gcc -v</strong>，如果显示gcc版本号，说明本机是已经安装好gcc的，就没必要安装了，如果没有显示gcc对应的版本号，在本机联网的情况下，终端输入指令：<strong>yum install gcc-c++</strong>，即可安装。</p><h3 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h3><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。安装指令：<strong>yum install -y pcre pcre-devel</strong></p><h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h3><p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。安装指令：<strong>yum install -y zlib zlib-devel</strong></p><h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。安装指令：<strong>yum install -y openssl openssl-devel</strong></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>用iTerm2 ssh 远程连接终端，输入 <strong>ssh -p 22 root@10.211.55.6</strong></p></li><li><p>将nginx源码上传到centOS</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120810700QQ20161208-0@2x.png" alt="2016120810700QQ20161208-0@2x.png"></p><blockquote><p>假如我们是root用户登录，那么上传的文件所在的文件夹在“/root“目录下，如果是普通用户的话，上传的文件夹是“/home/用户名/“下面。</p></blockquote></li><li><p>将压缩包解压缩，执行命令：<strong>tar -zxvf nginx-1.8.0.tar.gz</strong></p></li><li><p>进行configure配置，终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure><blockquote><p><span style="color:red">注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录，否则就回报错</span>     </p></blockquote></li><li><p>执行make指令</p></li><li><p>执行make install</p></li></ol><h2 id="nginx启动与停止"><a href="#nginx启动与停止" class="headerlink" title="nginx启动与停止"></a>nginx启动与停止</h2><ol><li><p>启动：进入到/usr/local/nginx/sbin，终端输入 ./nginx 就可以启动。浏览器访问 输入linux 主机 ip出现如下图，说明配置安装成功。</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120852810QQ20161208-1@2x.png" alt="2016120852810QQ20161208-1@2x.png"></p><p>中间有遇到过一个小问题，就是在centOS上本机可以访问，但是我在mac机器上却无法访问，后来上网寻找到解决办法，是centOS防火墙的原因，执行如下的命令，即可解决.</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120855490QQ20161208-2@2x.png" alt="2016120855490QQ20161208-2@2x.png"></p></li><li><p>关闭nginx：在sbin目录下执行命令：<strong>./nginx -s stop</strong></p></li><li><p>刷新配置：在sbin目录下执行命令：<strong>./nginx -s reload</strong></p></li></ol><h2 id="Niginx的配置"><a href="#Niginx的配置" class="headerlink" title="Niginx的配置"></a>Niginx的配置</h2><p>在<code>/usr/local/nginx/conf/</code>的<code>nginx.conf</code>文件便是nginx的配置文件</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121586546nginxConf.png" alt="2016121586546nginxConf.png"></p><h2 id="使用nginx配置虚拟机"><a href="#使用nginx配置虚拟机" class="headerlink" title="使用nginx配置虚拟机"></a>使用nginx配置虚拟机</h2><h3 id="通过端口区分虚拟机"><a href="#通过端口区分虚拟机" class="headerlink" title="通过端口区分虚拟机"></a>通过端口区分虚拟机</h3><p>在<code>nginx.conf</code>添加一个server节点，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">        listen   81;  </span><br><span class="line">        server_name  localhost;  </span><br><span class="line">        #charset koi8-r;  </span><br><span class="line">        #access_log  logs/host.access.log  main;  </span><br><span class="line">        location / &#123;  </span><br><span class="line">        root   html81;  </span><br><span class="line">        index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>添加后刷新配置文件，进入到sbin目录，执行<code>./nginx -s reload</code>，配置文件就会生效。<br>浏览器访问<code>http://ip地址:81</code>，就可以访问到81端口的资源内容。</p><h3 id="通过域名区分虚拟主机"><a href="#通过域名区分虚拟主机" class="headerlink" title="通过域名区分虚拟主机"></a>通过域名区分虚拟主机</h3><h4 id="通过域名如何访问web服务器"><a href="#通过域名如何访问web服务器" class="headerlink" title="通过域名如何访问web服务器"></a>通过域名如何访问web服务器</h4><ol><li><p>原理</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121520476dns.png" alt="2016121520476dns.png"></p><p>借助软件做个测试，修改本机的host，模拟不同的域名指向同一个端口，mac平台修改host软件有<a href="https://h.ihosts.toolinbox.net/cn/" target="_blank" rel="noopener">iHosts</a>，win平台下面有<a href="http://www.appinn.com/switchhosts/" target="_blank" rel="noopener">switchHosts</a></p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121556448QQ20161215-205921@2x.png" alt="2016121556448QQ20161215-205921@2x.png"></p><p>这样在浏览器输入<code>test.taotao.com</code>、<code>test2.taotao.com</code>、<code>test3.taotao.com</code>，都会访问linux 主机80端口。</p></li><li><p>配置基于域名的虚拟主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">listen       80;  </span><br><span class="line">server_name  域名;  </span><br><span class="line"></span><br><span class="line">#charset koi8-r;  </span><br><span class="line"></span><br><span class="line">#access_log  logs/host.access.log  main;  </span><br><span class="line"></span><br><span class="line">location / &#123;  </span><br><span class="line">root   html-test3;  </span><br><span class="line">index  index.html index.htm;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后要重新刷新<code>ngin.conf</code>配置文件。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，教程就结束啦，整个过程还算比较顺利，也没遇到啥棘手的问题，特此记录，方便日后查看。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis 分页插件PageHelper使用及总结</title>
      <link href="/2016/12/05/tech-mybatis-pagehelper/"/>
      <url>/2016/12/05/tech-mybatis-pagehelper/</url>
      
        <content type="html"><![CDATA[<p>今天在看视频教程的时候，遇到了mybatis的分页插件<code>PaheHelper</code>，感觉很好用，它支持主流的数据库，该插件目前支持<code>Oracle</code>,<code>Mysql</code>,<code>MariaDB</code>,<code>SQLite</code>,<code>Hsqldb</code>,<code>PostgreSQL</code>六种数据库分页。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120556503mybatis分页查询原理.png" alt="2016120556503mybatis分页查询原理.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>在SqlMapConfig.xml中配置plugin</li><li>在sql语句查询之前，<span style="color:red;"><strong>PageHelper.startPage(page, rows)</strong></span></li><li>获取分页结果，<span style="color:red;"><strong>PageInfo<tbitem> info = new PageInfo&lt;&gt;(list);</tbitem></strong></span>list参数是查询到的结果集，pageInfo封装了分页信息</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在pom.xml中添加如下的依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改SqlMapConfig-xml"><a href="#修改SqlMapConfig-xml" class="headerlink" title="修改SqlMapConfig.xml"></a>修改SqlMapConfig.xml</h3><p>在mubatis配置文件中添加插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定数据库方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><p>前台采用easyUI的dataGrid组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"easyui-datagrid"</span> <span class="attr">id</span>=<span class="string">"itemList"</span> <span class="attr">title</span>=<span class="string">"商品列表"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">data-options</span>=<span class="string">"singleSelect:false,collapsible:true,pagination:true,url:'/item/list',method:'get',pageSize:30,toolbar:toolbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'ck',checkbox:true"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'id',width:60"</span>&gt;</span>商品ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'title',width:200"</span>&gt;</span>商品标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'cid',width:100"</span>&gt;</span>叶子类目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'sellPoint',width:100"</span>&gt;</span>卖点<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'price',width:70,align:'right',formatter:TAOTAO.formatPrice"</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'num',width:70,align:'right'"</span>&gt;</span>库存数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'barcode',width:100"</span>&gt;</span>条形码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'status',width:60,align:'center',formatter:TAOTAO.formatItemStatus"</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'created',width:130,align:'center',formatter:TAOTAO.formatDateTime"</span>&gt;</span>创建日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'updated',width:130,align:'center',formatter:TAOTAO.formatDateTime"</span>&gt;</span>更新日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><h4 id="pojo实体"><a href="#pojo实体" class="headerlink" title="pojo实体"></a>pojo实体</h4><p>我们需要一个实体去封装我们获取到分页信息，这个实体被解析为json字符串，必须符合dataGrid的数据格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.taotao.pojo;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyUIDataGridResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * easyUI dataGrid 返回结果封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 总的记录数</span></span><br><span class="line">Long total;</span><br><span class="line"><span class="comment">// 数据集</span></span><br><span class="line">List&lt;?&gt; rows;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Long total)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.total = total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;?&gt; getRows() &#123;</span><br><span class="line"><span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;?&gt; rows)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rows = rows;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;TbItem&gt; <span class="title">selectByExample</span><span class="params">(TbItemExample example)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">getItemList</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> rows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分页处理</span></span><br><span class="line">PageHelper.startPage(page, rows);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询结果</span></span><br><span class="line">TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line">List&lt;TbItem&gt; list = itemMapper.selectByExample(example);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取分页信息</span></span><br><span class="line">PageInfo&lt;TbItem&gt; info = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">EasyUIDataGridResult result = <span class="keyword">new</span> EasyUIDataGridResult();</span><br><span class="line"><span class="keyword">long</span> total = info.getTotal();</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装分页信息</span></span><br><span class="line">List&lt;TbItem&gt; row = info.getList();</span><br><span class="line">result.setRows(row);</span><br><span class="line">result.setTotal(total);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品列表，分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/item/list"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> EasyUIDataGridResult <span class="title">getItemList</span><span class="params">(Integer page,Integer rows)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> itemService.getItemList(page, rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016120579015QQ20161205-1@2x.png" alt="2016120579015QQ20161205-1@2x.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>pageHelper会使用ThreadLocal获取到同一线程中的变量信息，<strong>各个线程之间的Threadlocal不会相互干扰</strong>，也就是Thread1中的ThreadLocal1之后获取到Tread1中的变量的信息，不会获取到Thread2中的信息。<br>所以在多线程环境下，各个Threadlocal之间相互隔离，可以实现，不同thread使用不同的数据源或不同的Thread中执行不同的SQL语句。所以，<strong>PageHelper利用这一点通过拦截器获取到同一线程中的预编译好的SQL语句之后将SQL语句包装成具有分页功能的SQL语句，并将其再次赋值给下一步操作，所以实际执行的SQL语句就是有了分页功能的SQL语句</strong></p><blockquote><p>参考：<a href="http://blog.csdn.net/jaryle/article/details/52315565" target="_blank" rel="noopener">http://blog.csdn.net/jaryle/article/details/52315565</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PageHelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyUI datagrid 动态表头的实现</title>
      <link href="/2016/11/26/tech-easyui-datagrid/"/>
      <url>/2016/11/26/tech-easyui-datagrid/</url>
      
        <content type="html"><![CDATA[<p>最近在项目中，需要用easyUI 的datagrid组件去实现一个表报的功能。我们以前用datagrid都是前台约定好字段，然后我们返回的json字符串与前台字段相对应便可以生成数据表格，但是这次却不同，datagrid的表头是动态的，为了实现这个功能，琢磨了些时间，然后在此总结一下。</p><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>点击左侧的配置项名称，右侧生成统计报表，报表可以是一维的，也可能是二维的，表头动态变化的，如下面所示：</p><p><img src="http://og1m51u2s.bkt.clouddn.com/2016112619244QQ20161126-0@2x.png" alt="2016112619244QQ20161126-0@2x.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从后台读取列名称，在<code>$(&quot;#dg2&quot;).datagrid({})</code>时，并不指定url属性，不向服务器端发送请求，在datagrid之后，通过ajax向服务器发送请求，并接收绑定列名称，和内容的json。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><ol><li><p>jsp页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">"表格统计结果"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"dg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JavaScript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryTable</span>(<span class="params">configId,configName</span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#tableHead"</span>).html(configName);</span><br><span class="line"><span class="comment">//加载表格数据和动态表头</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        url:basePath + <span class="string">'statisticAnalysis/loadTableData.action'</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="string">'configId'</span> : configId</span><br><span class="line">&#125;,</span><br><span class="line">cache : <span class="literal">false</span>,</span><br><span class="line">dataType : <span class="string">"text"</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + msg + <span class="string">')'</span>);</span><br><span class="line">        <span class="comment">//统计表格</span></span><br><span class="line">        $(<span class="string">'#dg2'</span>).datagrid(&#123;</span><br><span class="line">        fit : <span class="literal">true</span>,</span><br><span class="line">        fitColumns : <span class="literal">true</span>,</span><br><span class="line">        striped : <span class="literal">true</span>,</span><br><span class="line">        singleSelect: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//填充动态表头</span></span><br><span class="line">        columns:result[<span class="number">0</span>].columns,</span><br><span class="line">        pagination : <span class="literal">false</span>,</span><br><span class="line">        loadMsg : <span class="string">"正在努力加载中......"</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">          <span class="comment">//填充表格数据</span></span><br><span class="line">        $(<span class="string">'#dg2'</span>).datagrid(<span class="string">"loadData"</span>,result[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><p>考虑到我的表报的复杂性，因为有两个维度，其实就是说，他的行(x)和列(z)是变化的，所以，我在通过webservice调取接口获取的数据之前，跟写接口的同事约定好我要的数据的json格式，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"x"</span>:[<span class="string">"2016-01"</span>,<span class="string">"2016-02"</span>,<span class="string">"2016-03"</span>,<span class="string">"2016-04"</span>],</span><br><span class="line">        <span class="attr">"z"</span>:[<span class="string">"重大级别"</span>,<span class="string">"较大级别"</span>,<span class="string">"一般级别"</span>,<span class="string">"未达级别"</span>],</span><br><span class="line">        <span class="attr">"重大级别_2016-01"</span>:<span class="string">"34"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-01"</span>:<span class="string">"56"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-01"</span>:<span class="string">"98"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-01"</span>:<span class="string">"23"</span>,</span><br><span class="line">        <span class="attr">"重大级别_2016-02"</span>:<span class="string">"67"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-02"</span>:<span class="string">"112"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-02"</span>:<span class="string">"234"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-02"</span>:<span class="string">"25"</span>,</span><br><span class="line">        <span class="attr">"重大级别_2016-03"</span>:<span class="string">"67"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-03"</span>:<span class="string">"112"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-03"</span>:<span class="string">"234"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-03"</span>:<span class="string">"25"</span>,</span><br><span class="line">        <span class="attr">"重大级别_2016-04"</span>:<span class="string">"76"</span>,</span><br><span class="line">        <span class="attr">"较大级别_2016-04"</span>:<span class="string">"116"</span>,</span><br><span class="line">        <span class="attr">"一般级别_2016-04"</span>:<span class="string">"115"</span>,</span><br><span class="line">        <span class="attr">"未达级别_2016-04"</span>:<span class="string">"25"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>x ：就是动态的表头数据</li><li>z ：可以理解为列表头</li><li>z以下： 这些就是表格数据，他们的键是根据x和z两两组合而成，值就是统计值，比如”重大级别_2016-01”代表的意思就是2016年1月份重大级别的事件发生的数量。</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loadTableData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line"><span class="comment">//返回的json字符串，这里我就先暂时用假数据</span></span><br><span class="line">String jsonStr2 = <span class="string">"&#123;"</span></span><br><span class="line">+ <span class="string">"\"x\":[\"2016-01\",\"2016-02\",\"2016-03\",\"2016-04\"],"</span></span><br><span class="line">+ <span class="string">"\"z\":[\"重大级别\",\"较大级别\",\"一般级别\",\"未达级别\"],"</span></span><br><span class="line">+ <span class="string">"\"重大级别_2016-01\":\"34\","</span> + <span class="string">"\"较大级别_2016-01\":\"56\","</span></span><br><span class="line">+ <span class="string">"\"一般级别_2016-01\":\"98\","</span> + <span class="string">"\"未达级别_2016-01\":\"23\","</span></span><br><span class="line">+ <span class="string">"\"重大级别_2016-02\":\"67\","</span> + <span class="string">"\"较大级别_2016-02\":\"112\","</span></span><br><span class="line">+ <span class="string">"\"一般级别_2016-02\":\"234\","</span> + <span class="string">"\"未达级别_2016-02\":\"25\","</span></span><br><span class="line">+ <span class="string">"\"重大级别_2016-03\":\"67\","</span> + <span class="string">"\"较大级别_2016-03\":\"112\","</span></span><br><span class="line">+ <span class="string">"\"一般级别_2016-03\":\"234\","</span> + <span class="string">"\"未达级别_2016-03\":\"25\","</span></span><br><span class="line">+ <span class="string">"\"重大级别_2016-04\":\"76\","</span> + <span class="string">"\"较大级别_2016-04\":\"116\","</span></span><br><span class="line">+ <span class="string">"\"一般级别_2016-04\":\"115\","</span> + <span class="string">"\"未达级别_2016-04\":\"25\""</span> + <span class="string">"&#125;"</span>;</span><br><span class="line"><span class="comment">//解析json字符串</span></span><br><span class="line">JSONObject jsonobj = JSONObject.fromObject(jsonStr2);</span><br><span class="line">JSONArray xAxle = jsonobj.getJSONArray(<span class="string">"x"</span>);</span><br><span class="line">JSONArray zAxle = jsonobj.getJSONArray(<span class="string">"z"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态设置表头</span></span><br><span class="line">String columns = <span class="string">"&#123;\"columns\":[["</span>;</span><br><span class="line">columns += (<span class="string">"&#123;\"field\":\"zAxle\",\"title\":\"\",\"align\":\"center\",\"width\":50&#125;,"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xAxle.size(); i++) &#123;</span><br><span class="line">String xString = xAxle.getString(i);</span><br><span class="line">columns += (<span class="string">"&#123;\"field\":\"x_"</span> + i + <span class="string">"\",\"title\":\""</span> + xString + <span class="string">"\",\"align\":\"center\",\"width\":50&#125;,"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (columns.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">columns = columns.substring(<span class="number">0</span>, columns.length() - <span class="number">1</span>);</span><br><span class="line">columns += <span class="string">"]]&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态设置表数据(需要考虑z轴为null的情况)</span></span><br><span class="line">String rows = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (zAxle.size() != <span class="number">0</span>) &#123;</span><br><span class="line">rows = <span class="string">"&#123;\"total\":"</span> + zAxle.size() + <span class="string">",\"rows\":["</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; zAxle.size(); i++) &#123;</span><br><span class="line">String subRows = <span class="string">"&#123;\"zAxle\":\""</span> + zAxle.getString(i) + <span class="string">"\","</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; xAxle.size(); j++) &#123;</span><br><span class="line">subRows += <span class="string">"\"x_"</span></span><br><span class="line">+ j</span><br><span class="line">+ <span class="string">"\":\""</span></span><br><span class="line">+ jsonobj.get(zAxle.getString(i) + <span class="string">"_"</span></span><br><span class="line">+ xAxle.getString(j)) + <span class="string">"\","</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (subRows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">subRows = subRows.substring(<span class="number">0</span>, subRows.length() - <span class="number">1</span>);</span><br><span class="line">subRows += <span class="string">"&#125;,"</span>;</span><br><span class="line">&#125;</span><br><span class="line">rows += subRows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">rows = rows.substring(<span class="number">0</span>, rows.length() - <span class="number">1</span>);</span><br><span class="line">rows += <span class="string">"]&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rows = <span class="string">"&#123;\"total\":"</span> + <span class="number">1</span> + <span class="string">",\"rows\":["</span>;</span><br><span class="line">String subRows = <span class="string">"&#123;\"zAxle\":\""</span> + <span class="string">"数量"</span> + <span class="string">"\","</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; xAxle.size(); j++) &#123;</span><br><span class="line">subRows += <span class="string">"\"x_"</span> + j + <span class="string">"\":\""</span></span><br><span class="line">+ jsonobj.get(xAxle.getString(j)) + <span class="string">"\","</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (subRows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">subRows = subRows.substring(<span class="number">0</span>, subRows.length() - <span class="number">1</span>);</span><br><span class="line">subRows += <span class="string">"&#125;,"</span>;</span><br><span class="line">&#125;</span><br><span class="line">rows += subRows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rows.endsWith(<span class="string">","</span>)) &#123;</span><br><span class="line">rows = rows.substring(<span class="number">0</span>, rows.length() - <span class="number">1</span>);</span><br><span class="line">rows += <span class="string">"]&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String mesg = <span class="string">"["</span> + columns + <span class="string">","</span> + rows + <span class="string">"]"</span>;</span><br><span class="line">System.out.println(mesg);</span><br><span class="line">request.setAttribute(<span class="string">"responseText"</span>, mesg);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后返回前台的json数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"columns"</span>:[</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"zAxle"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">""</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_0"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-01"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_1"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-02"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_2"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-03"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"field"</span>:<span class="string">"x_3"</span>,</span><br><span class="line">                    <span class="attr">"title"</span>:<span class="string">"2016-04"</span>,</span><br><span class="line">                    <span class="attr">"align"</span>:<span class="string">"center"</span>,</span><br><span class="line">                    <span class="attr">"width"</span>:<span class="number">50</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"total"</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="attr">"rows"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"重大级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"34"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"67"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"67"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"76"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"较大级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"56"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"112"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"112"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"116"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"一般级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"98"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"234"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"234"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"115"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"zAxle"</span>:<span class="string">"未达级别"</span>,</span><br><span class="line">                <span class="attr">"x_0"</span>:<span class="string">"23"</span>,</span><br><span class="line">                <span class="attr">"x_1"</span>:<span class="string">"25"</span>,</span><br><span class="line">                <span class="attr">"x_2"</span>:<span class="string">"25"</span>,</span><br><span class="line">                <span class="attr">"x_3"</span>:<span class="string">"25"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实思路很简单，关键在于我们要约定好我们的数据格式，然后将我们拿到的数据，再进一步的封装成前台datagrid需要的数据格式。当初一直卡在数据该如何去约定，我之所以这么约定数据格式，是因为不仅datagrid是动态的，同时在用echarts渲染成柱状图的时候，也是动态的，他也要需要特定的数据格式。为了方便后期遇到同样的问题，特此记录一下。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云+U图床解决编博客插图麻烦事儿</title>
      <link href="/2016/11/05/life-tuchuang-picu/"/>
      <url>/2016/11/05/life-tuchuang-picu/</url>
      
        <content type="html"><![CDATA[<p>喜欢用hexo写博客的同学不知道有没有遇到这么一个情况，每次要插入图片的时候，我们都要先把要插入的图片放到hexo/source/img/目录下，然后再写上markdown格式的图片链接，这样来来回回，会把人整疯掉的！今天就教大家怎么样便捷的在文章中快速的插入图片，这样就可以愉快的写文章啦。</p><a id="more"></a><h2 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h2><p>七牛云是国内领先的企业级云服务商,致力于打造以数据为核心的场景化 PaaS 服务。创建一个<a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>账号，就有免费的10g存储空间，用来存储博客的图片基本上是够用，超过10g后就要收费。之所以用七牛云来存储图片，是应为如果我们全部把图片放到站点目录下的话，网页的加载速度就会变慢。下面就来介绍如何创建七牛云存储。</p><ol><li>创建七牛云账号</li><li><p>添加对象存储</p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110520190Snip20161105_1.png" alt="2016110520190Snip20161105_1.png"></p></li><li><p>创建对象存储</p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110582239Snip20161105_2.png" alt="2016110582239Snip20161105_2.png"></p></li></ol><h2 id="U图床"><a href="#U图床" class="headerlink" title="U图床"></a>U图床</h2><p>通过上面的步骤，我们的七牛云存储已经建立好了，那我们怎么样才能把图片上传到七牛云，并且生成markdown格式呢？这里就要提到<a href="http://lzqup.com/" target="_blank" rel="noopener">U图床</a>，首先感谢这位作者的奉献，做出这么好的软件，真心感谢。目前U图床只支持七牛云，希望后期作者能支持更多的云存储。有了这个小插件，我们可以方便快捷的把我们的图片上传到七牛云上面去，并且能够根据我们自己的要求，生成链接或者markdown格式的链接。下面就如何用U图床如何配置七牛云做一下讲解。</p><ol><li><p>登陆七牛云，点击秘钥管理。</p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110555464Snip20161105_5.png" alt="2016110555464Snip20161105_5.png"></p></li><li><p>记住这两个秘钥</p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110573684Snip20161105_6.png" alt="2016110573684Snip20161105_6.png"></p></li><li><p>打开U图床，点击设置，输入秘钥以及空间名称，点击验证配置，验证成功，说明配置成功，失败就说明配置有问题,这里需要注意的是，如果我们的网站没有备案的话，图片url前缀只能使用七牛云默认的外链域名，备案的话就可以使用自己的网站的作为图片的url前缀，因为我的网站没有备案，所以只能用七牛云的默认外链。</p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110530430Snip20161105_8.png" alt="2016110530430Snip20161105_8.png"></p></li><li><p>登陆七牛云，点击对象存储–&gt;更多操作–&gt;内容管理，就可以看到我们存储的图片</p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110523872Snip20161105_10.png" alt="2016110523872Snip20161105_10.png"></p><p> <img src="http://og1m51u2s.bkt.clouddn.com/2016110562446Snip20161105_11.png" alt="2016110562446Snip20161105_11.png"></p></li></ol><p>具体的U图床操作大家可以去该作者的网站 <a href="http://lzqup.com/" target="_blank" rel="noopener">http://lzqup.com/</a>查看使用教程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，七牛云+U图床很好的解决了博客中插入图片的痛点，本来之前是想用微博图床，但是网上说微博图床不安全，说不定哪天就挂了，大多数人都选择七牛云来做图床，空间大，10g存储，稳定，总的来说，七牛云是个不错的选择。图床插件mac推荐U图床，但是win下面小伙伴们该用啥呢，这里推荐<a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">MPicok</a>，也是支持七牛云的哦。OK，教程到此结束，终于可以开心的写文章了。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate SQL查询addScalar()和addEntity()区别</title>
      <link href="/2016/11/02/tech-Hibernate-addScalar-addEntity/"/>
      <url>/2016/11/02/tech-Hibernate-addScalar-addEntity/</url>
      
        <content type="html"><![CDATA[<p>Hibernate除了支持HQL查询外，还支持原生SQL查询。对原生SQL查询执行的控制是通过SQLQuery接口进行的，通过执行Session.createSQLQuery()获取这个接口。该接口是Query接口的子接口。</p><a id="more"></a><h2 id="SQL查询步骤"><a href="#SQL查询步骤" class="headerlink" title="SQL查询步骤"></a>SQL查询步骤</h2><ol><li>获取Hibernate Session对象</li><li>编写SQL语句</li><li>通过Session的createSQLQuery方法创建查询对象</li><li>调用SQLQuery对象的 <strong>addScalar()</strong> 或 <strong>addEntity()</strong> 方法将选出的结果与标量值或实体进行关联，分别用于进行标量查询或实体查询</li><li>如果SQL语句包含参数，调用Query的setXxxx方法为参数赋值</li><li>调用Query的list方法返回查询的结果集</li></ol><h2 id="标量查询"><a href="#标量查询" class="headerlink" title="标量查询"></a>标量查询</h2><p>最基本的SQL查询就是获得一个标量的列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select * from person_inf"</span>).list();   </span><br><span class="line">session.createSQLQuery(<span class="string">"select id,name,age from person_inf"</span>).list();</span><br></pre></td></tr></table></figure><ul><li><p>它们都将返回一个<strong>Object数组组成的List</strong>，数组每个元素都是person_inf表的一个字段值。Hibernate会使用<strong>ResultSetMetadata</strong>来判定返回的标量值的实际顺序和类型。</p></li><li><p>但是在JDBC中过多的使用ResultSetMetadata会降低程序的性能。所以为了过多的避免使用ResultSetMetadata或者为了指定更加明确的返回值类型，我们可以使用addScalar()方法：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select * from person_inf"</span>)    </span><br><span class="line">.addScalar(<span class="string">"name"</span>,StandardBasicTypes.STRING)  </span><br><span class="line">.addScalar(<span class="string">"age"</span>,StandardBasicTypes.INT)  </span><br><span class="line">.list();</span><br></pre></td></tr></table></figure><p>这个查询指定了：</p><ol><li>SQL查询字符串。</li><li>要返回的字段和类型。</li></ol><p>它仍然会返回Object数组,但是此时不再使用<strong>ResultSetMetdata</strong>,而是明确的将name和age按照String和int类型从resultset中取出。同时，也指明了就算query是使用*来查询的，可能获得超过列出的这三个字段，也仅仅会返回这三个字段。如果仅仅只需要选出某个字段的值，而不需要明确指定该字段的数据类型，则可以使用addScalar(String columnAlias)。</p><p>实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scalarQuery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        Session session = HibernateUtil.getSession();  </span><br><span class="line">        Transaction tx = session.beginTransaction();  </span><br><span class="line">        String sql = <span class="string">"select * from person_inf"</span>;  </span><br><span class="line">        List list = session.createSQLQuery(sql).  </span><br><span class="line">                    addScalar(<span class="string">"person_id"</span>,StandardBasicTypes.INTEGER).  </span><br><span class="line">                    addScalar(<span class="string">"name"</span>, StandardBasicTypes.STRING).  </span><br><span class="line">                    addScalar(<span class="string">"age"</span>,StandardBasicTypes.INTEGER).list();  </span><br><span class="line">        <span class="keyword">for</span>(Iterator iterator = list.iterator();iterator.hasNext();)&#123;  </span><br><span class="line">            <span class="comment">//每个集合元素都是一个数组，数组元素师person_id,person_name,person_age三列值  </span></span><br><span class="line">            Object[] objects = (Object[]) iterator.next();  </span><br><span class="line">            System.out.println(<span class="string">"id="</span>+objects[<span class="number">0</span>]);  </span><br><span class="line">            System.out.println(<span class="string">"name="</span>+objects[<span class="number">1</span>]);  </span><br><span class="line">            System.out.println(<span class="string">"age="</span>+objects[<span class="number">2</span>]);  </span><br><span class="line">            System.out.println(<span class="string">"----------------------------"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        tx.commit();  </span><br><span class="line">        session.close();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出。标量查询中addScalar()方法有两个作用：</p><ol><li>指定查询结果包含哪些数据列—没有被addScalar选出的列将不会包含在查询结果中。</li><li>指定查询结果中数据列的数据类型。</li></ol><h2 id="实体查询"><a href="#实体查询" class="headerlink" title="实体查询"></a>实体查询</h2><p>上面的标量查询返回的标量结果集，也就是从resultset中返回的“裸”数据。如果我们想要的结果是某个对象的实体，这是就可以通过addEntity()方法来实现。addEntity()方法可以讲结果转换为实体。但是在转换的过程中要注意几个问题：</p><ol><li>查询返回的是某个数据表的全部数据列</li><li>该数据表有对应的持久化类映射</li></ol><p>这时才可以通过addEntity()方法将查询结果转换成实体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select * from perons_inf"</span>).addEntity(Person.class).list;    </span><br><span class="line">session.createSQLQuery(<span class="string">"select id,name,age from person_inf"</span>).addEntity(Person.class).list();</span><br></pre></td></tr></table></figure><p>这个查询指定：</p><ol><li>SQL查询字符串</li><li>要返回的实体</li></ol><p>假设Person被映射为拥有id,name和age三个字段的类，以上的两个查询都返回一个List，每个元素都是一个Person实体。</p><p>假若实体在映射时有一个many-to-one的关联指向另外一个实体，在查询时必须也返回那个实体（获取映射的外键列），否则会导致发生一个”column not found”的数据库错误。这些附加的字段可以使用*标注来自动返回，但我们希望还是明确指明，看下面这个具有指向teacher的many-to-one的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.createSQLQuery(<span class="string">"select id, name, age, teacherID from person_inf"</span>).addEntity(Person.class).list();</span><br></pre></td></tr></table></figure><p>这样就可以通过person.getTeacher()获得teacher了。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entityQuery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    Session session = HibernateUtil.getSession();  </span><br><span class="line">    Transaction tx = session.beginTransaction();  </span><br><span class="line">    String sql = <span class="string">"select * from person_inf"</span>;  </span><br><span class="line">    List list = session.createSQLQuery(sql).  </span><br><span class="line">    addEntity(Person.class).    <span class="comment">//指定将查询的记录行转换成Person实体  </span></span><br><span class="line">     list();       </span><br><span class="line">    <span class="keyword">for</span> (Iterator iterator = list.iterator();iterator.hasNext();) &#123;  </span><br><span class="line">        Person person = (Person) iterator.next();<span class="comment">//集合的每个元素都是一个Person对象  </span></span><br><span class="line">        System.out.println(<span class="string">"name="</span>+person.getName());  </span><br><span class="line">       System.out.println(<span class="string">"age="</span>+person.getAge());  </span><br><span class="line">  &#125;  </span><br><span class="line">    tx.commit();  </span><br><span class="line">    session.close();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的都是单表查询，如果我们在SQL语句中使用了多表连接，则SQL语句可以选出多个数据表的数据。Hibernate支持将查询结果转换成多个实体。如果要将查询结果转换成多个实体，则SQL字符串中应该为不同数据表指定不同别名，并且调用addEntity()方法将不同数据表转换成不同实体。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiEntityQuery</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    Session session = HibernateUtil.getSession();  </span><br><span class="line">    Transaction tx = session.beginTransaction();  </span><br><span class="line">    String sql = <span class="string">"select p.*,e.* from person_inf as p inner join event_inf as e"</span> +  </span><br><span class="line">                 <span class="string">" on p.person_id=e.person_id"</span>;  </span><br><span class="line">    List list = session.createSQLQuery(sql)  </span><br><span class="line">                .addEntity(<span class="string">"p"</span>,Person.class)  </span><br><span class="line">                .addEntity(<span class="string">"e"</span>, MyEvent.class)  </span><br><span class="line">                .list();  </span><br><span class="line">    <span class="keyword">for</span>(Iterator iterator = list.iterator();iterator.hasNext();)&#123;  </span><br><span class="line">        <span class="comment">//每个集合元素都是Person、MyEvent所组成的数组  </span></span><br><span class="line">        Object[] objects = (Object[]) iterator.next();  </span><br><span class="line">        Person person = (Person) objects[<span class="number">0</span>];  </span><br><span class="line">        MyEvent event = (MyEvent) objects[<span class="number">1</span>];  </span><br><span class="line">        System.out.println(<span class="string">"person_id="</span>+person.getId()+<span class="string">" person_name="</span>+person.getName()+<span class="string">" title="</span>+event.getTitle());        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="http://blog.csdn.net/vacblog/article/details/7769976" target="_blank" rel="noopener">http://blog.csdn.net/vacblog/article/details/7769976</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlserver、oracle、MySQL 递归查询的区别</title>
      <link href="/2016/11/01/tech-sqlserver-oracle-recursion-diff/"/>
      <url>/2016/11/01/tech-sqlserver-oracle-recursion-diff/</url>
      
        <content type="html"><![CDATA[<p>程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</p><a id="more"></a><p>以上是摘自百度百科对于递归的定义，由于经常在项目中遇到递归查询，但是因为数据库方言的不同，三种数据库的递归查询语句都不相同，所以就做个简单的总结。</p><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><p><img src="http://og1m51u2s.bkt.clouddn.com/2016121052968QQ20161210-095910@2x.png" alt="2016121052968QQ20161210-095910@2x.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id --主键</span><br><span class="line">name --区域名称</span><br><span class="line">topgrid_id --上级区域id</span><br></pre></td></tr></table></figure><h2 id="oracle-写法"><a href="#oracle-写法" class="headerlink" title="oracle 写法"></a>oracle 写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>,<span class="keyword">NAME</span>,TOPGRID_ID</span><br><span class="line"><span class="keyword">FROM</span> GRID <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="keyword">id</span> = <span class="number">1715</span> <span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">PRIOR</span> <span class="keyword">ID</span> = TOPGRID_ID;</span><br></pre></td></tr></table></figure><ul><li>关键字：<strong>start with 。。。 connect by prior 。。。</strong></li><li>含义：查询节点为1715下面所有的子节点，包括本身。</li></ul><h2 id="sqlserver-写法"><a href="#sqlserver-写法" class="headerlink" title="sqlserver 写法"></a>sqlserver 写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">WITH cte AS</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">ID</span>,</span><br><span class="line">    <span class="keyword">NAME</span>,</span><br><span class="line">    TOPGRID_ID</span><br><span class="line">  <span class="keyword">FROM</span> GRID</span><br><span class="line">  <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1715</span></span><br><span class="line">  <span class="keyword">UNION</span> ALL</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    g.ID,</span><br><span class="line">    g.NAME,</span><br><span class="line">    g.TOPGRID_ID</span><br><span class="line">  <span class="keyword">FROM</span> cte c <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Grid g</span><br><span class="line">      <span class="keyword">ON</span> c.id = g.TOPGRID_ID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> cte;</span><br></pre></td></tr></table></figure><ul><li>关键字：<strong>WITH 。。。 AS 。。。</strong></li></ul><h2 id="MySQL-写法"><a href="#MySQL-写法" class="headerlink" title="MySQL 写法"></a>MySQL 写法</h2><p>因为MySQL中没有connect by 这种写法，也没有with子句，需要定义一个函数去帮我们实现我们的功能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> queryChildren;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="string">'queryChildren'</span> (areaId <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">4000</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> sTemp <span class="built_in">VARCHAR</span>(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sTempChd <span class="built_in">VARCHAR</span>(<span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> sTemp = <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">SET</span> sTempChd = <span class="keyword">cast</span>(areaId <span class="keyword">as</span> <span class="built_in">char</span>);</span><br><span class="line"></span><br><span class="line">WHILE sTempChd is not NULL <span class="keyword">DO</span></span><br><span class="line"><span class="keyword">SET</span> sTemp = <span class="keyword">CONCAT</span>(sTemp,<span class="string">','</span>,sTempChd);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">group_concat</span>(<span class="keyword">id</span>) <span class="keyword">INTO</span> sTempChd <span class="keyword">FROM</span> grid <span class="keyword">WHERE</span> FIND_IN_SET(parentId,sTempChd)&gt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span></span><br><span class="line"><span class="keyword">return</span> sTemp;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在sql语句使用该函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> GRID <span class="keyword">where</span> find_in_set(<span class="keyword">id</span>,queryChildrenAreaInfo(<span class="number">1715</span>));</span><br></pre></td></tr></table></figure><p>可以将id为1715的所有下级全部查询出来</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一台机子上面启动多个tomact的问题</title>
      <link href="/2016/10/27/tech-pc-multi-tomact/"/>
      <url>/2016/10/27/tech-pc-multi-tomact/</url>
      
        <content type="html"><![CDATA[<p>之前一直在myeclipse上进行开发，但是myeclipse10非常的卡顿，实在受不了，就换IDEA 进行开发。但是换到IDEA后，把项目部署后，也能够跑起来，但是却发现无论如何都无法调取到接口。后来在终端用命令行启动tomact，只要把其中一个项目启动的时候，再启动第二个tomact的时候，总是启动后，又马上关闭了，有人说是在mac系统下权限的问题，但是改了后依旧无果。后来冷静的想了下，http端口改了，会不会两个tomact有其他的端口冲突呢？果不其然，上网查了下，确实有这个问题，所以特意记录下。</p><a id="more"></a><p>如果需要在一台机子上启动多个Tomcat服务器，在默认设置下肯定会发生端口冲突。为解决这个问题，只需修改conf子目录中的server.xml文件即可。共需修改三处：</p><ul><li><p>修改http访问端口（默认为8080端口）:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8080”</span> <span class="attr">protocol</span>=<span class="string">”HTTP/1.1″</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">”20000″</span></span></span><br><span class="line"><span class="tag"><span class="attr">redirectPort</span>=<span class="string">”8443″</span> <span class="attr">URIEncoding</span>=<span class="string">”gb2312″/</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改Shutdown端口（默认为8005端口）:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">”8005”</span> <span class="attr">shutdown</span>=<span class="string">”SHUTDOWN”</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改JVM启动端口（默认为8009端口）:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8009”</span> <span class="attr">protocol</span>=<span class="string">”AJP/1.3″</span> <span class="attr">redirectPort</span>=<span class="string">”8443″</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomact </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyUI tree组件的构建以及异步加载</title>
      <link href="/2016/10/21/tech-easyui-tree/"/>
      <url>/2016/10/21/tech-easyui-tree/</url>
      
        <content type="html"><![CDATA[<p>在我们平常的编写的web的应用中，很多时候都会用到 tree，比如一些功能树，一些有层级关系的树等等，之前一直搞不明白这种树结构是如何编写出来的，通过在项目中的实际操作，总算有了些初步的认识，下面来好好总结下 easyUI tree 的构成。</p><a id="more"></a><h2 id="相关表"><a href="#相关表" class="headerlink" title="相关表"></a>相关表</h2><p>我要构建的这颗树所相关的表BookOrg结构如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BOOKORGID     NUMBER           <span class="comment">--主键                       </span></span><br><span class="line">ORGID         NUMBER        Y                         </span><br><span class="line">BOO_BOOKORGID NUMBER        Y  <span class="comment">--上级机构的id                       </span></span><br><span class="line">ORGCODE       VARCHAR2(500) Y                         </span><br><span class="line">ORGCNNAME     VARCHAR2(200) Y  <span class="comment">--机构中文名称                       </span></span><br><span class="line">ORGENNAME     VARCHAR2(100) Y                         </span><br><span class="line">ORGCNSHORT    VARCHAR2(50)  Y                         </span><br><span class="line">ORGCNSPELL    VARCHAR2(500) Y                         </span><br><span class="line">ORGENSHORT    VARCHAR2(20)  Y                         </span><br><span class="line">ORGENSPELL    VARCHAR2(500) Y                         </span><br><span class="line">ORGLEVEL      INTEGER       Y                         </span><br><span class="line">ORGCHARGER    VARCHAR2(50)  Y                         </span><br><span class="line">ORGEMAIL      VARCHAR2(100) Y                         </span><br><span class="line">ORGADDRESS    VARCHAR2(200) Y  <span class="comment">--地址                       </span></span><br><span class="line">ORGREMARK     VARCHAR2(200) Y  <span class="comment">--备注                       </span></span><br><span class="line">ORGSORTID     INTEGER       Y  <span class="comment">--机构排序id                       </span></span><br><span class="line">ORGCANCELFLAG CHAR(1)       Y  <span class="comment">--用于逻辑删除的字段</span></span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>其实easyUI 树构建最主要的部分就是tree 的json字符串的拼接，这需要我们根据自己的业务需求在后台处理。先来看看看easyUI树的json字符串长什么样.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[&#123;   </span><br><span class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,   </span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"Folder1"</span>,   </span><br><span class="line">    <span class="attr">"iconCls"</span>:<span class="string">"icon-save"</span>,   </span><br><span class="line">    <span class="attr">"children"</span>:[&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"File1"</span>,   </span><br><span class="line">        <span class="attr">"checked"</span>:<span class="literal">true</span>  </span><br><span class="line">    &#125;,&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"Books"</span>,   </span><br><span class="line">        <span class="attr">"state"</span>:<span class="string">"open"</span>,   </span><br><span class="line">        <span class="attr">"attributes"</span>:&#123;   </span><br><span class="line">            <span class="attr">"url"</span>:<span class="string">"/demo/book/abc"</span>,   </span><br><span class="line">            <span class="attr">"price"</span>:<span class="number">100</span>   </span><br><span class="line">        &#125;,   </span><br><span class="line">        <span class="attr">"children"</span>:[&#123;   </span><br><span class="line">            <span class="attr">"text"</span>:<span class="string">"PhotoShop"</span>,   </span><br><span class="line">            <span class="attr">"checked"</span>:<span class="literal">true</span>  </span><br><span class="line">        &#125;,&#123;   </span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">8</span>,   </span><br><span class="line">            <span class="attr">"text"</span>:<span class="string">"Sub Bookds"</span>,   </span><br><span class="line">            <span class="attr">"state"</span>:<span class="string">"closed"</span>  </span><br><span class="line">        &#125;]   </span><br><span class="line">    &#125;]   </span><br><span class="line">&#125;,&#123;   </span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"Languages"</span>,   </span><br><span class="line">    <span class="attr">"state"</span>:<span class="string">"closed"</span>,   </span><br><span class="line">    <span class="attr">"children"</span>:[&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"Java"</span>  </span><br><span class="line">    &#125;,&#123;   </span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"C#"</span>  </span><br><span class="line">    &#125;]   </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>从中可以看出树控件每个节点都具备以下属性：</p><ul><li>id：节点ID，对加载远程数据很重要。</li><li>text：显示节点文本。</li><li>state：节点状态，’open’ 或 ‘closed’，默认：’open’。如果为’closed’的时候，将不自动展开该节点。</li><li>checked：表示该节点是否被选中。</li><li>attributes: 被添加到节点的自定义属性。</li><li>children: 一个节点数组声明了若干节点。</li></ul><p>ok，明白了树节点的相关属性，我们便可以来构建树节点信息相关的实体类</p><p><strong>TreeNode.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="comment">//显示节点的id  </span></span><br><span class="line">    <span class="keyword">private</span> Object id;  </span><br><span class="line">    <span class="comment">//节点状态</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="comment">//显示节点的名称</span></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="comment">//显示节点的图标</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="comment">//额外的需要用名</span></span><br><span class="line">    <span class="keyword">private</span> String externName;</span><br><span class="line">    <span class="comment">//显示节点的父节点</span></span><br><span class="line">    <span class="keyword">private</span> Object parentId;</span><br><span class="line">    <span class="comment">//显示节点的子节点集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children;</span><br><span class="line">    <span class="comment">//添加子节点的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.children==<span class="keyword">null</span>)&#123;</span><br><span class="line">            children=<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">            children.add(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            children.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set、get方法省略。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是跟我们的业务相关的实体类</p><p><strong>Bookorg.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bookorg</span>  <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">     <span class="keyword">private</span> BigDecimal bookorgid;</span><br><span class="line">     <span class="keyword">private</span> Orgcandidate orgcandidate;</span><br><span class="line">     <span class="keyword">private</span> Bookorg bookorg;</span><br><span class="line">     <span class="keyword">private</span> String orgcode;</span><br><span class="line">     <span class="keyword">private</span> String orgcnname;</span><br><span class="line">     <span class="keyword">private</span> String orgenname;</span><br><span class="line">     <span class="keyword">private</span> String orgcnshort;</span><br><span class="line">     <span class="keyword">private</span> String orgcnspell;</span><br><span class="line">     <span class="keyword">private</span> String orgenshort;</span><br><span class="line">     <span class="keyword">private</span> String orgenspell;</span><br><span class="line">     <span class="keyword">private</span> BigDecimal orglevel;</span><br><span class="line">     <span class="keyword">private</span> String orgcharger;</span><br><span class="line">     <span class="keyword">private</span> String orgemail;</span><br><span class="line">     <span class="keyword">private</span> String orgaddress;</span><br><span class="line">     <span class="keyword">private</span> String orgremark;</span><br><span class="line">     <span class="keyword">private</span> BigDecimal orgsortid;</span><br><span class="line">     <span class="keyword">private</span> String orgcancelflag;</span><br><span class="line">     <span class="keyword">private</span> Set bookorgs = <span class="keyword">new</span> HashSet(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">private</span> Set bookpersons = <span class="keyword">new</span> HashSet(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">private</span> Set addressbooks = <span class="keyword">new</span> HashSet(<span class="number">0</span>);</span><br><span class="line">     <span class="comment">//get、set方法省略。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h2><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"parentEnterprise"</span> <span class="attr">name</span>=<span class="string">"parentEnterprise"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 30px;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#parentEnterprise"</span>).combotree(</span><br><span class="line">&#123;</span><br><span class="line">url : basePath + <span class="string">'getDeptTree'</span>,</span><br><span class="line">panelWidth : <span class="number">200</span>,</span><br><span class="line">panelHeight : <span class="number">250</span>,</span><br><span class="line">lines:<span class="literal">true</span>,</span><br><span class="line">animate : <span class="literal">false</span>,</span><br><span class="line">multiple : <span class="literal">false</span>,</span><br><span class="line">required : <span class="literal">true</span>,</span><br><span class="line">missingMessage : <span class="string">'请选择上级机构!'</span>,</span><br><span class="line">onlyLeafCheck : <span class="literal">true</span>,</span><br><span class="line">cascadeCheck : <span class="literal">false</span>,</span><br><span class="line">onLoadSuccess : <span class="function"><span class="keyword">function</span>(<span class="params">node, data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//设置父节点为展开状态</span></span><br><span class="line">$(<span class="string">'#parentEnterprise'</span>).combotree(<span class="string">'tree'</span>).tree(<span class="string">'expand'</span>,node.target);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">onSelect : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">$(<span class="string">'#parentEnterprise'</span>).val(node.id);<span class="comment">// 赋值</span></span><br><span class="line">&#125;,</span><br><span class="line">onBeforeExpand : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line"><span class="comment">//将当前所点击的节点id传递到后台</span></span><br><span class="line">$(<span class="string">'#parentEnterprise'</span>).combotree(<span class="string">'tree'</span>).tree(<span class="string">'options'</span>).url = basePath + <span class="string">'getDeptTree?pid='</span>+node.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h2><p>如果我们的所要构建的树的数据量不是很大，就可以进行同步加载，也就是一次性把树加载出来，但是如果数据量很大的话，一次性加载就会出现页面卡死的现象，这里就要采用异步加载的方式，也就是说，我们每次将我们要展开的节点的id传递到后台，查询他的下级机构，然后拼接成json字符串，传递到前台。</p><p>action层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line"><span class="comment">//前台父节点id，为null加载根节点</span></span><br><span class="line">String pid = request.getParameter(<span class="string">"pid"</span>);</span><br><span class="line"><span class="comment">//获取当前机构下面的子机构的集合</span></span><br><span class="line">List&lt;Bookorg&gt; departmentList = departmentService.getTreeNode(pid);</span><br><span class="line"><span class="comment">//定义构成tree json字符串</span></span><br><span class="line">String jsonStr = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 定义一个树形结构实体</span></span><br><span class="line">List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//循环遍历子机构</span></span><br><span class="line"><span class="keyword">for</span> (Bookorg department : departmentList) &#123;</span><br><span class="line"><span class="comment">// 构建树节点信息</span></span><br><span class="line">TreeNode node = <span class="keyword">new</span> TreeNode();</span><br><span class="line"><span class="comment">//设置节点id</span></span><br><span class="line">node.setId(department.getBookorgid().longValue());</span><br><span class="line"><span class="comment">//设置节点名称</span></span><br><span class="line">node.setText(department.getOrgcnname());</span><br><span class="line"><span class="comment">//设置该节点父级节点id</span></span><br><span class="line"><span class="keyword">if</span> (department.getBookorg() == <span class="keyword">null</span>) &#123;</span><br><span class="line">node.setParentId(<span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.setParentId(department.getBookorg().getBookorgid()</span><br><span class="line">.longValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断当前节点是否有子节点，node 的 state 为close 则节点设置为文件夹，为open 则为文件</span></span><br><span class="line">List&lt;Bookorg&gt; bookorgs = departmentService</span><br><span class="line">.getTreeNode(department.getBookorgid().toString());</span><br><span class="line"><span class="keyword">if</span> (bookorgs != <span class="keyword">null</span> &amp;&amp; !bookorgs.isEmpty()) &#123;</span><br><span class="line">node.setState(<span class="string">"closed"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.setState(<span class="string">"open"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将node节点添加到集合中</span></span><br><span class="line">list.add(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将集合转换成json字符串</span></span><br><span class="line">jsonStr = JsonUtil.listToJson(list);</span><br><span class="line"><span class="comment">//返回到前台页面</span></span><br><span class="line">request.setAttribute(<span class="string">"responseText"</span>, jsonStr);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Bookorg&gt; <span class="title">getTreeNode</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">StringBuffer hql=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">hql=hql.append(<span class="string">"from Bookorg b where  "</span>);</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="keyword">null</span> || <span class="string">""</span>.equals(pid)) &#123;</span><br><span class="line"><span class="comment">//返回跟节点</span></span><br><span class="line">hql=hql.append(<span class="string">" b.bookorg is null and b.orgcancelflag = 1 order by b.orgsortid asc "</span>);</span><br><span class="line"><span class="keyword">return</span> departmentDao.getTreeNode(hql,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//异步加载当前id下的子节点</span></span><br><span class="line">hql=hql.append(<span class="string">" b.bookorg.bookorgid= ? and b.orgcancelflag = 1  order by b.orgsortid asc "</span>);</span><br><span class="line"><span class="keyword">return</span> departmentDao.getTreeNode(hql,<span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> BigDecimal(pid)&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getTreeNode</span><span class="params">(String hql, Object[] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hql != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().find(hql, values);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/img/20161021/2.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此为止树的构建基本上就结束了，其实树的构建本质上就是字符串的拼接，只要我们理解了树节点的相关属性，根据自己的业务需求就可以很快的构建一颗树出来，ok，今天就到此为止了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客进阶教程</title>
      <link href="/2016/09/29/tech-hexo-advance/"/>
      <url>/2016/09/29/tech-hexo-advance/</url>
      
        <content type="html"><![CDATA[<p>前几天写了一篇关于如何用hexo+github来搭建个人的博客网站，最近项目验收完成了，终于可以有时间把接下来的教程完成，ok，废话不多说，咱们直接开始吧！</p><a id="more"></a><h2 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h2><p>标签页需要我们自己去新建，默认是不显示的</p><ul><li><p>在终端窗口下，进入到 <strong>hexo站点</strong> 文件夹下，输入如下命令：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></li><li><p>进入到<code>hexo/source/tags/</code>目录下，用markdown编辑器打开index.md文件，主题将自动为这个页面显示标签云，显示如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件，添加tags到menu中，显示如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line"> home: /</span><br><span class="line"> archives: /archives</span><br><span class="line"> tags: /tags</span><br></pre></td></tr></table></figure></li></ul><h2 id="添加分类页"><a href="#添加分类页" class="headerlink" title="添加分类页"></a>添加分类页</h2><p>大致的过程是跟添加标签页是一个意思，这里就不在阐述，<a href="http://theme-next.iissnan.com/theme-settings.html#categories-page" target="_blank" rel="noopener">点我</a></p><blockquote><p>如果有启用 多说 或者 Disqus 评论，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false</p></blockquote><h2 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h2><ul><li><p>打开主题配置文件，即 <code>Hexo/themes/next/_config.yml</code> 在 menu 下添加字段，名称任意，只要自己能区分出来就行，比如我添加的是 board 字段，下面全部是以 board 为例。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  commonweal: /404.html</span><br><span class="line">  board: /board</span><br></pre></td></tr></table></figure><p>  在 menu_icons 下为留言板设定一个图标，我用的是 book 这个图标，如果想要设定为其他图标，请访问：<a href="https://link.zhihu.com/?target=http%3A//fontawesome.io/icons/" target="_blank" rel="noopener">Font Awesome Icons</a>， 然后把自己喜欢的图标后的关键字填写到 board后面。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br><span class="line">  board: book</span><br></pre></td></tr></table></figure></li><li><p>进入 <code>Hexo/source</code> ，创建一个 board 文件夹</p></li><li><p>打开刚才创建的文件夹，新建一个 index.md 文件</p></li><li><p>打开创建的 index.md，在开头添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: board</span><br><span class="line">date: 2016-07-07 21:43:11</span><br><span class="line">comments: ture</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>打开 <code>Hexo\themes\next\languages</code> 文件夹，找到当前使用的语言<br>在 menu 下添加 borad 字段</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line"> home: 首页</span><br><span class="line"> archives: 归档</span><br><span class="line"> categories: 分类</span><br><span class="line"> tags: 标签</span><br><span class="line"> about: 关于</span><br><span class="line"> search: Search</span><br><span class="line"> commonweal: 公益404</span><br><span class="line"> board: 留言</span><br></pre></td></tr></table></figure></li><li><p>大双引号效果，只需要在<code>Hexo/source/border/</code>下编辑<code>index.md</code>，添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;你想写的东西&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>hexo 默认的主题显得有些单调，那该如何才能更换hexo的主题呢？在这里推荐一款比较简约的主题<strong>next</strong></p><ul><li>首先下载<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">next</a>主题安装包,下载好以后，解压该压缩文件，重命名为next。</li><li>然后将解压后的整个文件夹复制到<code>F:\Hexo\themes</code>目录下。</li><li>打开站点配置文件(hexo 根目录下的<code>_config.yml</code>文件，后面都统一称为 <strong>站点配置文件</strong> )，找到theme字段，将其值改为next。</li><li><p>执行命令<code>hexo -g</code> , <code>hexo -s</code>,在浏览器输入：<code>http://localhost:4000</code> 校验主题是否更改成功,如果显示如下的图所示，说明安装成功。</p><p>  <img src="/img/20160929/hexoTheme.png" alt="主题更换成功"></p></li><li><p>主题更换成功以后，就可以更改主题的标题、头像、菜单、侧边栏，具体参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题官方文档</a>，写的很详细，在这里就不详细叙述了。</p></li></ul><h2 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h2><p>hexo 博客本身是不带有评论系统的，但是为了方便博主与读者之间交流，我就需要接入第三方服务—-<strong>多说评论</strong></p><ul><li>登录<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>后在首页选择 “我要安装”。</li><li>创建站点，填写表单。多说域名 这一栏填写的即是你的 <code>duoshuo_shortname</code>，如图：<br>  <img src="/img/20160929/duoshuo.png" alt="多说"></li><li>创建站点完成后在 站点配置文件 中新增 <code>duoshuo_shortname</code> 字段，值设置成上一步中的值。</li><li>在多说的设置界面，可以自定义文本，默认头像，外观主题，下面我贴出自己的评论框的自定义的css样式，给大家一个参考。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">54px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">54px</span>;     <span class="comment">/*设置图像的长和宽，这里要根据自己的评论框情况更改*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">27px</span>;     <span class="comment">/*设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了*/</span></span><br><span class="line"><span class="attribute">-webkit-border-radius</span>: <span class="number">27px</span>;     <span class="comment">/*圆角效果：兼容webkit浏览器*/</span></span><br><span class="line"><span class="attribute">-moz-border-radius</span>: <span class="number">27px</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#3333</span>sf;     <span class="comment">/*设置图像阴影效果*/</span></span><br><span class="line"><span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#3333</span>sf;</span><br><span class="line"><span class="attribute">-webkit-transition</span>: <span class="number">0.4s</span>;</span><br><span class="line"><span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">0.4s</span> ease-out;</span><br><span class="line"><span class="attribute">transition</span>: transform <span class="number">0.4s</span> ease-out;     <span class="comment">/*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*/</span></span><br><span class="line"><span class="attribute">-moz-transition</span>: -moz-transform <span class="number">0.4s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置鼠标悬浮在头像时的CSS样式*/</span>    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span>;</span><br><span class="line">rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);</span><br><span class="line"><span class="selector-tag">-webkit-box-shadow</span>: 0 0 10<span class="selector-tag">px</span> <span class="selector-id">#fff</span>;</span><br><span class="line"><span class="selector-tag">rgba</span>(255, 255, 255, <span class="selector-class">.6</span>), <span class="selector-tag">inset</span> 0 0 20<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(255, 255, 255, 1);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateZ</span>(360<span class="selector-tag">deg</span>);     <span class="comment">/*图像旋转360度*/</span></span><br><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">rotateZ</span>(360<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">-moz-transform</span>: <span class="selector-tag">rotateZ</span>(360<span class="selector-tag">deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#ds-recent-visitors</span> <span class="selector-class">.ds-avatar</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*隐藏多说底部版权*/</span></span><br><span class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-powered-by</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="文章统计与站点统计"><a href="#文章统计与站点统计" class="headerlink" title="文章统计与站点统计"></a>文章统计与站点统计</h2><ul><li><p>站点统计用的是<a href="http://service.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>，传送门（<a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="noopener">点我</a>），next主题官网写的比较详细，我这里就不在阐述了哦</p><p>  <img src="/img/20160929/不蒜子统计.png" alt=""></p></li><li><p>文章统计，再次召唤传送门(<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#" target="_blank" rel="noopener">点我</a>)</p></li></ul><h2 id="背景效果"><a href="#背景效果" class="headerlink" title="背景效果"></a>背景效果</h2><ul><li>把 js 文件 <a href="https://github.com/ehlxr/ehlxr.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 放在<code>\themes\next\source\js\src</code>文件目录下</li><li>更新<code>\themes\next\layout\_layout.swig</code>文件，在末尾（在前面引用会出现找不到的bug）添加以下 js 引入代码：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/particle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="站点搜索"><a href="#站点搜索" class="headerlink" title="站点搜索"></a>站点搜索</h2><ul><li><p>安装 <code>hexo-generator-search</code>，在站点的根目录下执行以下命令：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件中，新增以下内容到任意位置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line"> path: search.xml</span><br><span class="line"> field: post</span><br></pre></td></tr></table></figure></li></ul><h2 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h2><p>主要是修改 Hexo 目录下 <code>\themes\next\source\css\\_common\components\sidebar\sidebar-author.styl</code> 文件，以下是我的配置文件，大家可以参考一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束</span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line">  <span class="attribute">-webkit-animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-moz-animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转</span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: $site-author-name-margin;</span><br><span class="line">  <span class="attribute">text-align</span>: $site-author-name-align;</span><br><span class="line">  <span class="attribute">color</span>: $site-author-name-color;</span><br><span class="line">  <span class="attribute">font-weight</span>: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-description</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: $site-description-margin-top;</span><br><span class="line">  <span class="attribute">text-align</span>: $site-description-align;</span><br><span class="line">  <span class="attribute">font-size</span>: $site-description-font-size;</span><br><span class="line">  <span class="attribute">color</span>: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ok，基本上大致的配置就这么多吧，还有些东西，比如打赏啊，公益404，友情链接，大家都可以在<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">next主题官网</a>可以看到配置教程，在这里就不多说了，有不懂得同学可以留言，我会第一时间回复你的。ok，睡觉去了，好困。。。</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客网站</title>
      <link href="/2016/09/25/tech-hexo-github/"/>
      <url>/2016/09/25/tech-hexo-github/</url>
      
        <content type="html"><![CDATA[<p>之前一直想搭建一个自己的个人博客，用来记录一些自己的个技术笔记，但是因为种种原因被耽搁了，趁周末有时间，终于把博客搭建好了，下面记录一下整个搭建的过程，也给想搭建博客的同学一个参考。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>:因为 hexo 整个博客框架是基于node.js的，所以必须安装node.js环境。我安装的是最新的版本，v4.5.0，安装过程一路 next 即可。</li><li><a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">git客户端</a>:用来将hexo相关文件提交到github上去，安装过程一路next。</li></ul><h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><p>环境准备好以后，我们便可以安装hexo博客框架。</p><p>桌面鼠标右击，选择Git Bash Here ，打开git命令行窗口，如下图</p><p><img src="/img/gitbash.png" alt="Git Bash Here"></p><p>输入安装命令，回车</p><ul><li><code>npm install -g hexo</code></li></ul><p>然后在指定的盘新建一个hexo文件夹，进入到新建的这个文件夹内，点击鼠标右键，选择Git Bash Here，输入初始化指令，回车，就会看到生成一系列的文件：</p><ul><li><code>hexo init</code></li></ul><p>安装相关的依赖包，输入下面的指令，回车</p><ul><li><code>npm install</code></li></ul><p>下面来解说一下各个文件夹的作用，指定文件夹的目录如下：</p><p><img src="/img/direction.png" alt="hexo文件目录"></p><ul><li><code>_config.yml</code>：用来配置站点信息，大多数配置都在这里进行。</li><li><code>package.json</code>：管理我们安装的一些插件，我们要删除某些插件的时候，可以在这里进行。</li><li><code>scaffolds</code>：模板文件夹。</li><li><code>source</code>：源文件夹是存放用户资源的地方,他下面有一个_posts，文件夹，我们发表的文件就存放在这个文件夹下。</li><li><code>themes</code>：主题文件夹，Hexo 会根据主题来生成静态页面。</li></ul><p>接着在hexo文件夹下执行：</p><ul><li><code>hexo g</code></li><li><code>hexo s</code></li></ul><p>然后用浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，就能看到hexo初始化界面，是不是很激动呢？但是这个界面只有我们自己可以看到，要想别人看到怎么办呢？ok，接下来我们就来完成这一步骤。</p><h2 id="创建一个github账号"><a href="#创建一个github账号" class="headerlink" title="创建一个github账号"></a>创建一个github账号</h2><p>已经有账号的暂时忽略这一步，传送门：<a href="https://github.com/" target="_blank" rel="noopener">github</a>，没有的话就老老实实创建一个吧。</p><h2 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h2><p>我们有了账号以后，便可以创建repository，中文即是仓库，如下图所示</p><p><img src="/img/repository.png" alt="仓库"></p><p>这里仓库的名字要注意，格式应该是：<strong>你的github账号名字.github.io</strong>，像我的就是 wangleeyom.github.io。为什么要这么设置，我也不太清楚，可能是github约定的吧</p><h2 id="部署文件到github"><a href="#部署文件到github" class="headerlink" title="部署文件到github"></a>部署文件到github</h2><p>用notepad++或者sublime打开 hexo 文件夹下的 <code>_config.yml</code> 文件，找到关键字 deploy ，然后修改成如下，我就用我自己的做示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/wangleeyom/wangleeyom.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>需要注意的一点：<strong>冒号后面要有一个空格</strong>，比如 type 冒号后面要加一个空格，很多同学部署不上去就是问题出在这里，需要注意，修改完以后，保存即可。</p><p>但是这样还不能连接到 github ，我们还需要配置SSH，找到路径<code>C:\Users\leeyom\.ssh</code>，如果已经存在SSH Keys ，直接删除<code>.ssh</code> 文件夹下的所有的文件，如下图。</p><p><img src="/img/sshKeys.png" alt="SSH Keys"></p><p>然后输入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;635709492@qq.com&quot;</span><br></pre></td></tr></table></figure><p>这个邮箱是我们当初注册github的时候填写的邮箱，然后回车，需要回车三次。最后出现如下的结果</p><p><img src="/img/keygen.png" alt="keygen"></p><blockquote><p>图片引用自<a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a></p></blockquote><p>然后再输入指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s</span><br></pre></td></tr></table></figure><p>继续输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>到这里后，可能会出现如下的错误，我的就出现如下的错误：</p><p><img src="/img/mistake.png" alt="mistake"></p><blockquote><p>图片引用自<a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a></p></blockquote><p>如果你出现了上面的错误，不要着急，输入下面的指令即可以解决，如果没有，则跳过这步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure><p><img src="/img/keysuccess.png" alt="添加SSH key到Github"></p><blockquote><p>图片引用自<a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a></p></blockquote><p>接着拷贝key，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>打开github，点击setting，然后再点击SSH and GPG keys，如下图：</p><p><img src="/img/sshSetting.png" alt=""></p><p>接下来</p><p><img src="/img/SSHkeys2.png" alt=""></p><p>测试一下，输入如下命令，然后会让你输入yes/no，你输入yes即可。以上ssh就配好了，我们就可以将项目部署到github上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>执行以下命令部署项目到github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>但是输入hexo d 可能会报 <strong>ERROR Deployer not fount： git</strong> 错误,这是因为没有安装<code>hexo-deployer-git</code>这个模块，无法识别该指令，安装该模块即可，输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>可能网速的原因，安装该模块的时候，很慢，需要等待一会儿。我安装的时候一直没动静，以为挂掉了，试了几次都不行。后来出去有事，就执行命令后就不管他了，回来后，就安装好了。<br>安装好以后输入 hexo d ，会有弹出框，输入github账号密码即可，就可以访问了。浏览器输入 <code>wangleeyom.github.io</code> 即可访问，烦人的404没有了，出现的是 hexo 默认界面。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>假如一直出现如下图的错误，一直无法发布到github上</p><p><img src="/img/mistake_2.png" alt=""></p><p>尝试将站点配置_config.yml的deploy部分更改成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git://github.com/wangleeyom/wangleeyom.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>也就是把https换成git试试。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，hexo 的搭建就完成了，是不是很激动呢？别着急，界面是不是很丑？咋发表文章呢？哈哈。。后面有时间的话会讲解如何发布文章，添加tags，分类，更换主题，如何绑定域名，如何接入第三方的服务等一系列的问题，敬请期待。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>本文章很大一部分参考的 <a href="http://www.jianshu.com/p/ba76165ca84d" target="_blank" rel="noopener">http://www.jianshu.com/p/ba76165ca84d</a> ，感谢该作者。</li><li>潘柏信：<a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">http://www.jianshu.com/p/465830080ea9</a></li><li>next主题官网：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></li><li>hexo 中文网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>常用的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class="line">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class="line">hexo d #完整命令为hexo deploy,用于将本地文件发布到github上</span><br><span class="line">hexo n #完整命令为hexo new,用于新建一篇文章</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/09/23/life-hello-world/"/>
      <url>/2016/09/23/life-hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hello, 欢迎你阅读我的博客，我是一名90后的程序员，主要从事web开发。我有一个小小的愿望。我希望凭借自己的努力，净化程序员的环境，提升程序员的层次。愿IT界再无黑心企业的剥削，无人自嘲”码农”、”码畜”，技术人员受到足够的尊重，写程序重新成为一种创造性的劳动。软件行业，重新成为令人羡慕的行业。</p><a id="more"></a><p>Hello World!</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
